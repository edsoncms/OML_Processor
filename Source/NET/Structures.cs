using System;
using System.Collections;
using System.Data;
using System.Reflection;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

namespace OutSystems.NssOMLProcessor {

	/// <summary>
	/// Structure <code>STEntityInfoStructure</code> that represents the Service Studio structure
	///  <code>EntityInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEntityInfoStructure: ISerializable, ITypedRecord<STEntityInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*IQTzwbCFBVWo0SiaCnf1UA");
		internal static readonly GlobalObjectKey IdReferenceKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bhnsauKwadr4pWLLb2kcfQ");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NWKpAPSIH7+4tF7V0ClEtA");
		internal static readonly GlobalObjectKey IdReadOnly = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*d5Yo2b1y8AEr3Qg1YGtd4w");
		internal static readonly GlobalObjectKey IdShowTenantId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SpvzPNfQvNbdR_lc5vleHw");
		internal static readonly GlobalObjectKey Idstatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*L_b_xaLW4lAgn9R7igoL2w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("ReferenceKey")]
		public string ssReferenceKey;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("ReadOnly")]
		public bool ssReadOnly;

		[System.Xml.Serialization.XmlElement("ShowTenantId")]
		public bool ssShowTenantId;

		[System.Xml.Serialization.XmlElement("status")]
		public string ssstatus;


		public BitArray OptimizedAttributes;

		public STEntityInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssReferenceKey = "";
			ssKey = "";
			ssReadOnly = false;
			ssShowTenantId = false;
			ssstatus = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "EntityInfo.Name", "");
			ssReferenceKey = r.ReadText(index++, "EntityInfo.ReferenceKey", "");
			ssKey = r.ReadText(index++, "EntityInfo.Key", "");
			ssReadOnly = r.ReadBoolean(index++, "EntityInfo.ReadOnly", false);
			ssShowTenantId = r.ReadBoolean(index++, "EntityInfo.ShowTenantId", false);
			ssstatus = r.ReadText(index++, "EntityInfo.status", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEntityInfoStructure r) {
			this = r;
		}


		public static bool operator == (STEntityInfoStructure a, STEntityInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssReferenceKey != b.ssReferenceKey) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssReadOnly != b.ssReadOnly) return false;
			if (a.ssShowTenantId != b.ssShowTenantId) return false;
			if (a.ssstatus != b.ssstatus) return false;
			return true;
		}

		public static bool operator != (STEntityInfoStructure a, STEntityInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEntityInfoStructure)) return false;
			return (this == (STEntityInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssReferenceKey.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssReadOnly.GetHashCode()
				^ ssShowTenantId.GetHashCode()
				^ ssstatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEntityInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssReferenceKey = "";
			ssKey = "";
			ssReadOnly = false;
			ssShowTenantId = false;
			ssstatus = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReferenceKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReferenceKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReferenceKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReadOnly", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReadOnly' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReadOnly = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssShowTenantId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssShowTenantId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssShowTenantId = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssstatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssstatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssstatus = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEntityInfoStructure Duplicate() {
			STEntityInfoStructure t;
			t.ssName = this.ssName;
			t.ssReferenceKey = this.ssReferenceKey;
			t.ssKey = this.ssKey;
			t.ssReadOnly = this.ssReadOnly;
			t.ssShowTenantId = this.ssShowTenantId;
			t.ssstatus = this.ssstatus;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReferenceKey")) VarValue.AppendAttribute(recordElem, "ReferenceKey", ssReferenceKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ReferenceKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReadOnly")) VarValue.AppendAttribute(recordElem, "ReadOnly", ssReadOnly, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ReadOnly");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShowTenantId")) VarValue.AppendAttribute(recordElem, "ShowTenantId", ssShowTenantId, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ShowTenantId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".status")) VarValue.AppendAttribute(recordElem, "status", ssstatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "status");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "referencekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReferenceKey")) variable.Value = ssReferenceKey; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "readonly") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReadOnly")) variable.Value = ssReadOnly; else variable.Optimized = true;
			} else if (head == "showtenantid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShowTenantId")) variable.Value = ssShowTenantId; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".status")) variable.Value = ssstatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdReferenceKey) {
				return ssReferenceKey;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdReadOnly) {
				return ssReadOnly;
			} else if (key == IdShowTenantId) {
				return ssShowTenantId;
			} else if (key == Idstatus) {
				return ssstatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssReferenceKey = (string) other.AttributeGet(IdReferenceKey);
			ssKey = (string) other.AttributeGet(IdKey);
			ssReadOnly = (bool) other.AttributeGet(IdReadOnly);
			ssShowTenantId = (bool) other.AttributeGet(IdShowTenantId);
			ssstatus = (string) other.AttributeGet(Idstatus);
		}
		public bool IsDefault() {
			STEntityInfoStructure defaultStruct = new STEntityInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssReferenceKey != defaultStruct.ssReferenceKey) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssReadOnly != defaultStruct.ssReadOnly) return false;
			if (this.ssShowTenantId != defaultStruct.ssShowTenantId) return false;
			if (this.ssstatus != defaultStruct.ssstatus) return false;
			return true;
		}
	} // STEntityInfoStructure

	/// <summary>
	/// Structure <code>STExtensionInfoStructure</code> that represents the Service Studio structure
	///  <code>ExtensionInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STExtensionInfoStructure: ISerializable, ITypedRecord<STExtensionInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*xykGrvlLo8ErUbpaPFwurg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bCsQm3fsYcYqMUoQg0bq7A");
		internal static readonly GlobalObjectKey Idstatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Lu7Rs+wOU9awV_lEwiRRdw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("status")]
		public string ssstatus;


		public BitArray OptimizedAttributes;

		public STExtensionInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssstatus = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ExtensionInfo.Name", "");
			ssKey = r.ReadText(index++, "ExtensionInfo.Key", "");
			ssstatus = r.ReadText(index++, "ExtensionInfo.status", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STExtensionInfoStructure r) {
			this = r;
		}


		public static bool operator == (STExtensionInfoStructure a, STExtensionInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssstatus != b.ssstatus) return false;
			return true;
		}

		public static bool operator != (STExtensionInfoStructure a, STExtensionInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STExtensionInfoStructure)) return false;
			return (this == (STExtensionInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssstatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STExtensionInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssstatus = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssstatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssstatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssstatus = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STExtensionInfoStructure Duplicate() {
			STExtensionInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssstatus = this.ssstatus;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".status")) VarValue.AppendAttribute(recordElem, "status", ssstatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "status");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".status")) variable.Value = ssstatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == Idstatus) {
				return ssstatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssstatus = (string) other.AttributeGet(Idstatus);
		}
		public bool IsDefault() {
			STExtensionInfoStructure defaultStruct = new STExtensionInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssstatus != defaultStruct.ssstatus) return false;
			return true;
		}
	} // STExtensionInfoStructure

	/// <summary>
	/// Structure <code>STHEMessageStructure</code> that represents the Service Studio structure
	///  <code>HEMessage</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STHEMessageStructure: ISerializable, ITypedRecord<STHEMessageStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Uh9h2DB5viCwCiUDDTqB1Q");
		internal static readonly GlobalObjectKey IdMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*nlgu4wXTlrIu6MuuQmbKUg");
		internal static readonly GlobalObjectKey IdDetail = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NVto0WxPNc_z1jH3vm8SaQ");
		internal static readonly GlobalObjectKey IdHelpRef = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_hc3nt6YG6vmUzdTbM+GzA");
		internal static readonly GlobalObjectKey IdExtraInfo = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UQrPkReE5T4pWFjs28JldQ");
		internal static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gowRAG7mvzXV7msaO0Nz_A");
		internal static readonly GlobalObjectKey IdSubmitable = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NeXso20tD2QtJSjmQjYtwQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public string ssId;

		[System.Xml.Serialization.XmlElement("Message")]
		public string ssMessage;

		[System.Xml.Serialization.XmlElement("Detail")]
		public string ssDetail;

		[System.Xml.Serialization.XmlElement("HelpRef")]
		public int ssHelpRef;

		[System.Xml.Serialization.XmlElement("ExtraInfo")]
		public string ssExtraInfo;

		[System.Xml.Serialization.XmlElement("Type")]
		public string ssType;

		[System.Xml.Serialization.XmlElement("Submitable")]
		public bool ssSubmitable;


		public BitArray OptimizedAttributes;

		public STHEMessageStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = "";
			ssMessage = "";
			ssDetail = "";
			ssHelpRef = 0;
			ssExtraInfo = "";
			ssType = "";
			ssSubmitable = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "HEMessage.Id", "");
			ssMessage = r.ReadText(index++, "HEMessage.Message", "");
			ssDetail = r.ReadText(index++, "HEMessage.Detail", "");
			ssHelpRef = r.ReadInteger(index++, "HEMessage.HelpRef", 0);
			ssExtraInfo = r.ReadText(index++, "HEMessage.ExtraInfo", "");
			ssType = r.ReadText(index++, "HEMessage.Type", "");
			ssSubmitable = r.ReadBoolean(index++, "HEMessage.Submitable", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STHEMessageStructure r) {
			this = r;
		}


		public static bool operator == (STHEMessageStructure a, STHEMessageStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssMessage != b.ssMessage) return false;
			if (a.ssDetail != b.ssDetail) return false;
			if (a.ssHelpRef != b.ssHelpRef) return false;
			if (a.ssExtraInfo != b.ssExtraInfo) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssSubmitable != b.ssSubmitable) return false;
			return true;
		}

		public static bool operator != (STHEMessageStructure a, STHEMessageStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STHEMessageStructure)) return false;
			return (this == (STHEMessageStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssMessage.GetHashCode()
				^ ssDetail.GetHashCode()
				^ ssHelpRef.GetHashCode()
				^ ssExtraInfo.GetHashCode()
				^ ssType.GetHashCode()
				^ ssSubmitable.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STHEMessageStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = "";
			ssMessage = "";
			ssDetail = "";
			ssHelpRef = 0;
			ssExtraInfo = "";
			ssType = "";
			ssSubmitable = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDetail", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDetail' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDetail = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHelpRef", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHelpRef' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHelpRef = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtraInfo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtraInfo' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtraInfo = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSubmitable", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSubmitable' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSubmitable = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STHEMessageStructure Duplicate() {
			STHEMessageStructure t;
			t.ssId = this.ssId;
			t.ssMessage = this.ssMessage;
			t.ssDetail = this.ssDetail;
			t.ssHelpRef = this.ssHelpRef;
			t.ssExtraInfo = this.ssExtraInfo;
			t.ssType = this.ssType;
			t.ssSubmitable = this.ssSubmitable;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message")) VarValue.AppendAttribute(recordElem, "Message", ssMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Detail")) VarValue.AppendAttribute(recordElem, "Detail", ssDetail, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Detail");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HelpRef")) VarValue.AppendAttribute(recordElem, "HelpRef", ssHelpRef, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "HelpRef");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExtraInfo")) VarValue.AppendAttribute(recordElem, "ExtraInfo", ssExtraInfo, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExtraInfo");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Submitable")) VarValue.AppendAttribute(recordElem, "Submitable", ssSubmitable, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Submitable");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "message") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message")) variable.Value = ssMessage; else variable.Optimized = true;
			} else if (head == "detail") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Detail")) variable.Value = ssDetail; else variable.Optimized = true;
			} else if (head == "helpref") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HelpRef")) variable.Value = ssHelpRef; else variable.Optimized = true;
			} else if (head == "extrainfo") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExtraInfo")) variable.Value = ssExtraInfo; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "submitable") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Submitable")) variable.Value = ssSubmitable; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdMessage) {
				return ssMessage;
			} else if (key == IdDetail) {
				return ssDetail;
			} else if (key == IdHelpRef) {
				return ssHelpRef;
			} else if (key == IdExtraInfo) {
				return ssExtraInfo;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdSubmitable) {
				return ssSubmitable;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ssMessage = (string) other.AttributeGet(IdMessage);
			ssDetail = (string) other.AttributeGet(IdDetail);
			ssHelpRef = (int) other.AttributeGet(IdHelpRef);
			ssExtraInfo = (string) other.AttributeGet(IdExtraInfo);
			ssType = (string) other.AttributeGet(IdType);
			ssSubmitable = (bool) other.AttributeGet(IdSubmitable);
		}
		public bool IsDefault() {
			STHEMessageStructure defaultStruct = new STHEMessageStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssMessage != defaultStruct.ssMessage) return false;
			if (this.ssDetail != defaultStruct.ssDetail) return false;
			if (this.ssHelpRef != defaultStruct.ssHelpRef) return false;
			if (this.ssExtraInfo != defaultStruct.ssExtraInfo) return false;
			if (this.ssType != defaultStruct.ssType) return false;
			if (this.ssSubmitable != defaultStruct.ssSubmitable) return false;
			return true;
		}
	} // STHEMessageStructure

	/// <summary>
	/// Structure <code>STHubNodeStatusStructure</code> that represents the Service Studio structure
	///  <code>HubNodeStatus</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STHubNodeStatusStructure: ISerializable, ITypedRecord<STHubNodeStatusStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RMwhYMBMssyS394em39r0A");
		internal static readonly GlobalObjectKey IdIP = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*G_swK48fWyRsee63ADg6ag");
		internal static readonly GlobalObjectKey IdIISStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*nVVHzn7SnUJi7UvJVtBJiw");
		internal static readonly GlobalObjectKey IdSchedulerStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*upO3r7D9uob0cDUbMcPoJQ");
		internal static readonly GlobalObjectKey IdSchedulerStatusDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4aqsXbnQ95Yp4cjbruYTug");
		internal static readonly GlobalObjectKey IdDeployStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9DVLcASVFDdX0DMyyjdy9g");
		internal static readonly GlobalObjectKey IdDeployStatusDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9PIEHCsUMuzTZK98ctrnzw");
		internal static readonly GlobalObjectKey IdLogStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gVLht+sxRXORHHJhm2aEeg");
		internal static readonly GlobalObjectKey IdLogStatusDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+BKbWHtEqBwqgv6EROO57Q");
		internal static readonly GlobalObjectKey IdSMSConnectorStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*xKqrTYp0RmYDWvTypxspXw");
		internal static readonly GlobalObjectKey IdSMSConnectorStatusDesc = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9xUcW0kbo9MNdlyJ6u7igQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("IP")]
		public string ssIP;

		[System.Xml.Serialization.XmlElement("IISStatus")]
		public bool ssIISStatus;

		[System.Xml.Serialization.XmlElement("SchedulerStatus")]
		public bool ssSchedulerStatus;

		[System.Xml.Serialization.XmlElement("SchedulerStatusDescription")]
		public string ssSchedulerStatusDescription;

		[System.Xml.Serialization.XmlElement("DeployStatus")]
		public bool ssDeployStatus;

		[System.Xml.Serialization.XmlElement("DeployStatusDescription")]
		public string ssDeployStatusDescription;

		[System.Xml.Serialization.XmlElement("LogStatus")]
		public bool ssLogStatus;

		[System.Xml.Serialization.XmlElement("LogStatusDescription")]
		public string ssLogStatusDescription;

		[System.Xml.Serialization.XmlElement("SMSConnectorStatus")]
		public bool ssSMSConnectorStatus;

		[System.Xml.Serialization.XmlElement("SMSConnectorStatusDesc")]
		public string ssSMSConnectorStatusDesc;


		public BitArray OptimizedAttributes;

		public STHubNodeStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssIP = "";
			ssIISStatus = false;
			ssSchedulerStatus = false;
			ssSchedulerStatusDescription = "";
			ssDeployStatus = false;
			ssDeployStatusDescription = "";
			ssLogStatus = false;
			ssLogStatusDescription = "";
			ssSMSConnectorStatus = false;
			ssSMSConnectorStatusDesc = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "HubNodeStatus.Name", "");
			ssIP = r.ReadText(index++, "HubNodeStatus.IP", "");
			ssIISStatus = r.ReadBoolean(index++, "HubNodeStatus.IISStatus", false);
			ssSchedulerStatus = r.ReadBoolean(index++, "HubNodeStatus.SchedulerStatus", false);
			ssSchedulerStatusDescription = r.ReadText(index++, "HubNodeStatus.SchedulerStatusDescription", "");
			ssDeployStatus = r.ReadBoolean(index++, "HubNodeStatus.DeployStatus", false);
			ssDeployStatusDescription = r.ReadText(index++, "HubNodeStatus.DeployStatusDescription", "");
			ssLogStatus = r.ReadBoolean(index++, "HubNodeStatus.LogStatus", false);
			ssLogStatusDescription = r.ReadText(index++, "HubNodeStatus.LogStatusDescription", "");
			ssSMSConnectorStatus = r.ReadBoolean(index++, "HubNodeStatus.SMSConnectorStatus", false);
			ssSMSConnectorStatusDesc = r.ReadText(index++, "HubNodeStatus.SMSConnectorStatusDesc", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STHubNodeStatusStructure r) {
			this = r;
		}


		public static bool operator == (STHubNodeStatusStructure a, STHubNodeStatusStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssIP != b.ssIP) return false;
			if (a.ssIISStatus != b.ssIISStatus) return false;
			if (a.ssSchedulerStatus != b.ssSchedulerStatus) return false;
			if (a.ssSchedulerStatusDescription != b.ssSchedulerStatusDescription) return false;
			if (a.ssDeployStatus != b.ssDeployStatus) return false;
			if (a.ssDeployStatusDescription != b.ssDeployStatusDescription) return false;
			if (a.ssLogStatus != b.ssLogStatus) return false;
			if (a.ssLogStatusDescription != b.ssLogStatusDescription) return false;
			if (a.ssSMSConnectorStatus != b.ssSMSConnectorStatus) return false;
			if (a.ssSMSConnectorStatusDesc != b.ssSMSConnectorStatusDesc) return false;
			return true;
		}

		public static bool operator != (STHubNodeStatusStructure a, STHubNodeStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STHubNodeStatusStructure)) return false;
			return (this == (STHubNodeStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssIP.GetHashCode()
				^ ssIISStatus.GetHashCode()
				^ ssSchedulerStatus.GetHashCode()
				^ ssSchedulerStatusDescription.GetHashCode()
				^ ssDeployStatus.GetHashCode()
				^ ssDeployStatusDescription.GetHashCode()
				^ ssLogStatus.GetHashCode()
				^ ssLogStatusDescription.GetHashCode()
				^ ssSMSConnectorStatus.GetHashCode()
				^ ssSMSConnectorStatusDesc.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STHubNodeStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssIP = "";
			ssIISStatus = false;
			ssSchedulerStatus = false;
			ssSchedulerStatusDescription = "";
			ssDeployStatus = false;
			ssDeployStatusDescription = "";
			ssLogStatus = false;
			ssLogStatusDescription = "";
			ssSMSConnectorStatus = false;
			ssSMSConnectorStatusDesc = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIP", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIP' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIP = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIISStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIISStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIISStatus = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSchedulerStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSchedulerStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSchedulerStatus = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSchedulerStatusDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSchedulerStatusDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSchedulerStatusDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDeployStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDeployStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDeployStatus = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDeployStatusDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDeployStatusDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDeployStatusDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogStatus = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogStatusDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogStatusDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogStatusDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSMSConnectorStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSMSConnectorStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSMSConnectorStatus = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSMSConnectorStatusDesc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSMSConnectorStatusDesc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSMSConnectorStatusDesc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STHubNodeStatusStructure Duplicate() {
			STHubNodeStatusStructure t;
			t.ssName = this.ssName;
			t.ssIP = this.ssIP;
			t.ssIISStatus = this.ssIISStatus;
			t.ssSchedulerStatus = this.ssSchedulerStatus;
			t.ssSchedulerStatusDescription = this.ssSchedulerStatusDescription;
			t.ssDeployStatus = this.ssDeployStatus;
			t.ssDeployStatusDescription = this.ssDeployStatusDescription;
			t.ssLogStatus = this.ssLogStatus;
			t.ssLogStatusDescription = this.ssLogStatusDescription;
			t.ssSMSConnectorStatus = this.ssSMSConnectorStatus;
			t.ssSMSConnectorStatusDesc = this.ssSMSConnectorStatusDesc;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IP")) VarValue.AppendAttribute(recordElem, "IP", ssIP, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IP");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IISStatus")) VarValue.AppendAttribute(recordElem, "IISStatus", ssIISStatus, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IISStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SchedulerStatus")) VarValue.AppendAttribute(recordElem, "SchedulerStatus", ssSchedulerStatus, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SchedulerStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SchedulerStatusDescription")) VarValue.AppendAttribute(recordElem, "SchedulerStatusDescription", ssSchedulerStatusDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SchedulerStatusDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DeployStatus")) VarValue.AppendAttribute(recordElem, "DeployStatus", ssDeployStatus, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "DeployStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DeployStatusDescription")) VarValue.AppendAttribute(recordElem, "DeployStatusDescription", ssDeployStatusDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DeployStatusDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogStatus")) VarValue.AppendAttribute(recordElem, "LogStatus", ssLogStatus, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "LogStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogStatusDescription")) VarValue.AppendAttribute(recordElem, "LogStatusDescription", ssLogStatusDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogStatusDescription");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SMSConnectorStatus")) VarValue.AppendAttribute(recordElem, "SMSConnectorStatus", ssSMSConnectorStatus, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "SMSConnectorStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SMSConnectorStatusDesc")) VarValue.AppendAttribute(recordElem, "SMSConnectorStatusDesc", ssSMSConnectorStatusDesc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SMSConnectorStatusDesc");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "ip") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IP")) variable.Value = ssIP; else variable.Optimized = true;
			} else if (head == "iisstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IISStatus")) variable.Value = ssIISStatus; else variable.Optimized = true;
			} else if (head == "schedulerstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SchedulerStatus")) variable.Value = ssSchedulerStatus; else variable.Optimized = true;
			} else if (head == "schedulerstatusdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SchedulerStatusDescription")) variable.Value = ssSchedulerStatusDescription; else variable.Optimized = true;
			} else if (head == "deploystatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DeployStatus")) variable.Value = ssDeployStatus; else variable.Optimized = true;
			} else if (head == "deploystatusdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DeployStatusDescription")) variable.Value = ssDeployStatusDescription; else variable.Optimized = true;
			} else if (head == "logstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogStatus")) variable.Value = ssLogStatus; else variable.Optimized = true;
			} else if (head == "logstatusdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogStatusDescription")) variable.Value = ssLogStatusDescription; else variable.Optimized = true;
			} else if (head == "smsconnectorstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SMSConnectorStatus")) variable.Value = ssSMSConnectorStatus; else variable.Optimized = true;
			} else if (head == "smsconnectorstatusdesc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SMSConnectorStatusDesc")) variable.Value = ssSMSConnectorStatusDesc; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdIP) {
				return ssIP;
			} else if (key == IdIISStatus) {
				return ssIISStatus;
			} else if (key == IdSchedulerStatus) {
				return ssSchedulerStatus;
			} else if (key == IdSchedulerStatusDescription) {
				return ssSchedulerStatusDescription;
			} else if (key == IdDeployStatus) {
				return ssDeployStatus;
			} else if (key == IdDeployStatusDescription) {
				return ssDeployStatusDescription;
			} else if (key == IdLogStatus) {
				return ssLogStatus;
			} else if (key == IdLogStatusDescription) {
				return ssLogStatusDescription;
			} else if (key == IdSMSConnectorStatus) {
				return ssSMSConnectorStatus;
			} else if (key == IdSMSConnectorStatusDesc) {
				return ssSMSConnectorStatusDesc;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssIP = (string) other.AttributeGet(IdIP);
			ssIISStatus = (bool) other.AttributeGet(IdIISStatus);
			ssSchedulerStatus = (bool) other.AttributeGet(IdSchedulerStatus);
			ssSchedulerStatusDescription = (string) other.AttributeGet(IdSchedulerStatusDescription);
			ssDeployStatus = (bool) other.AttributeGet(IdDeployStatus);
			ssDeployStatusDescription = (string) other.AttributeGet(IdDeployStatusDescription);
			ssLogStatus = (bool) other.AttributeGet(IdLogStatus);
			ssLogStatusDescription = (string) other.AttributeGet(IdLogStatusDescription);
			ssSMSConnectorStatus = (bool) other.AttributeGet(IdSMSConnectorStatus);
			ssSMSConnectorStatusDesc = (string) other.AttributeGet(IdSMSConnectorStatusDesc);
		}
		public bool IsDefault() {
			STHubNodeStatusStructure defaultStruct = new STHubNodeStatusStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssIP != defaultStruct.ssIP) return false;
			if (this.ssIISStatus != defaultStruct.ssIISStatus) return false;
			if (this.ssSchedulerStatus != defaultStruct.ssSchedulerStatus) return false;
			if (this.ssSchedulerStatusDescription != defaultStruct.ssSchedulerStatusDescription) return false;
			if (this.ssDeployStatus != defaultStruct.ssDeployStatus) return false;
			if (this.ssDeployStatusDescription != defaultStruct.ssDeployStatusDescription) return false;
			if (this.ssLogStatus != defaultStruct.ssLogStatus) return false;
			if (this.ssLogStatusDescription != defaultStruct.ssLogStatusDescription) return false;
			if (this.ssSMSConnectorStatus != defaultStruct.ssSMSConnectorStatus) return false;
			if (this.ssSMSConnectorStatusDesc != defaultStruct.ssSMSConnectorStatusDesc) return false;
			return true;
		}
	} // STHubNodeStatusStructure

	/// <summary>
	/// Structure <code>STOmlReportStructure</code> that represents the Service Studio structure
	///  <code>OmlReport</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STOmlReportStructure: ISerializable, ITypedRecord<STOmlReportStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4ibr1iHYBp93PF_GQD+BEg");
		internal static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*H_toDKqd5CS_BUKrbA2D+A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Value")]
		public int ssValue;


		public BitArray OptimizedAttributes;

		public STOmlReportStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssValue = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "OmlReport.Name", "");
			ssValue = r.ReadInteger(index++, "OmlReport.Value", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STOmlReportStructure r) {
			this = r;
		}


		public static bool operator == (STOmlReportStructure a, STOmlReportStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STOmlReportStructure a, STOmlReportStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STOmlReportStructure)) return false;
			return (this == (STOmlReportStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STOmlReportStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssValue = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STOmlReportStructure Duplicate() {
			STOmlReportStructure t;
			t.ssName = this.ssName;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssValue = (int) other.AttributeGet(IdValue);
		}
		public bool IsDefault() {
			STOmlReportStructure defaultStruct = new STOmlReportStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssValue != defaultStruct.ssValue) return false;
			return true;
		}
	} // STOmlReportStructure

	/// <summary>
	/// Structure <code>STQueueStatusStructure</code> that represents the Service Studio structure
	///  <code>QueueStatus</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STQueueStatusStructure: ISerializable, ITypedRecord<STQueueStatusStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdQueueName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PB2zjNZ7wRJ6ZgazTnwtNQ");
		internal static readonly GlobalObjectKey IdQueueSize = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BiY6BBN9uPH691m_myB2Nw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("QueueName")]
		public string ssQueueName;

		[System.Xml.Serialization.XmlElement("QueueSize")]
		public int ssQueueSize;


		public BitArray OptimizedAttributes;

		public STQueueStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssQueueName = "";
			ssQueueSize = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssQueueName = r.ReadText(index++, "QueueStatus.QueueName", "");
			ssQueueSize = r.ReadInteger(index++, "QueueStatus.QueueSize", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STQueueStatusStructure r) {
			this = r;
		}


		public static bool operator == (STQueueStatusStructure a, STQueueStatusStructure b) {
			if (a.ssQueueName != b.ssQueueName) return false;
			if (a.ssQueueSize != b.ssQueueSize) return false;
			return true;
		}

		public static bool operator != (STQueueStatusStructure a, STQueueStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STQueueStatusStructure)) return false;
			return (this == (STQueueStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssQueueName.GetHashCode()
				^ ssQueueSize.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STQueueStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssQueueName = "";
			ssQueueSize = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssQueueName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQueueName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQueueName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQueueSize", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQueueSize' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQueueSize = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STQueueStatusStructure Duplicate() {
			STQueueStatusStructure t;
			t.ssQueueName = this.ssQueueName;
			t.ssQueueSize = this.ssQueueSize;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".QueueName")) VarValue.AppendAttribute(recordElem, "QueueName", ssQueueName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "QueueName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".QueueSize")) VarValue.AppendAttribute(recordElem, "QueueSize", ssQueueSize, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "QueueSize");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "queuename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".QueueName")) variable.Value = ssQueueName; else variable.Optimized = true;
			} else if (head == "queuesize") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".QueueSize")) variable.Value = ssQueueSize; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdQueueName) {
				return ssQueueName;
			} else if (key == IdQueueSize) {
				return ssQueueSize;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssQueueName = (string) other.AttributeGet(IdQueueName);
			ssQueueSize = (int) other.AttributeGet(IdQueueSize);
		}
		public bool IsDefault() {
			STQueueStatusStructure defaultStruct = new STQueueStatusStructure(null);
			if (this.ssQueueName != defaultStruct.ssQueueName) return false;
			if (this.ssQueueSize != defaultStruct.ssQueueSize) return false;
			return true;
		}
	} // STQueueStatusStructure

	/// <summary>
	/// Structure <code>STThreadStatusStructure</code> that represents the Service Studio structure
	///  <code>ThreadStatus</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STThreadStatusStructure: ISerializable, ITypedRecord<STThreadStatusStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UWBe7Q84pukanANIe8BPrA");
		internal static readonly GlobalObjectKey IdStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ARS1ln3nMzj+wrm29fwJXg");
		internal static readonly GlobalObjectKey IdSecondsInStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NLc_0aE4Wxgtee_Gb_Ukrg");
		internal static readonly GlobalObjectKey IdDetail = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*MeCEJTEr6Th4eW+VpMZhxg");
		internal static readonly GlobalObjectKey IdMaxSecondsInStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZfQc_9WGiBHil5cxMztkuQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Status")]
		public string ssStatus;

		[System.Xml.Serialization.XmlElement("SecondsInStatus")]
		public int ssSecondsInStatus;

		[System.Xml.Serialization.XmlElement("Detail")]
		public string ssDetail;

		[System.Xml.Serialization.XmlElement("MaxSecondsInStatus")]
		public int ssMaxSecondsInStatus;


		public BitArray OptimizedAttributes;

		public STThreadStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssStatus = "";
			ssSecondsInStatus = 0;
			ssDetail = "";
			ssMaxSecondsInStatus = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ThreadStatus.Name", "");
			ssStatus = r.ReadText(index++, "ThreadStatus.Status", "");
			ssSecondsInStatus = r.ReadInteger(index++, "ThreadStatus.SecondsInStatus", 0);
			ssDetail = r.ReadText(index++, "ThreadStatus.Detail", "");
			ssMaxSecondsInStatus = r.ReadInteger(index++, "ThreadStatus.MaxSecondsInStatus", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STThreadStatusStructure r) {
			this = r;
		}


		public static bool operator == (STThreadStatusStructure a, STThreadStatusStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssStatus != b.ssStatus) return false;
			if (a.ssSecondsInStatus != b.ssSecondsInStatus) return false;
			if (a.ssDetail != b.ssDetail) return false;
			if (a.ssMaxSecondsInStatus != b.ssMaxSecondsInStatus) return false;
			return true;
		}

		public static bool operator != (STThreadStatusStructure a, STThreadStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STThreadStatusStructure)) return false;
			return (this == (STThreadStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssStatus.GetHashCode()
				^ ssSecondsInStatus.GetHashCode()
				^ ssDetail.GetHashCode()
				^ ssMaxSecondsInStatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STThreadStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssStatus = "";
			ssSecondsInStatus = 0;
			ssDetail = "";
			ssMaxSecondsInStatus = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStatus = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSecondsInStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSecondsInStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSecondsInStatus = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDetail", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDetail' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDetail = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaxSecondsInStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaxSecondsInStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaxSecondsInStatus = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STThreadStatusStructure Duplicate() {
			STThreadStatusStructure t;
			t.ssName = this.ssName;
			t.ssStatus = this.ssStatus;
			t.ssSecondsInStatus = this.ssSecondsInStatus;
			t.ssDetail = this.ssDetail;
			t.ssMaxSecondsInStatus = this.ssMaxSecondsInStatus;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Status")) VarValue.AppendAttribute(recordElem, "Status", ssStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SecondsInStatus")) VarValue.AppendAttribute(recordElem, "SecondsInStatus", ssSecondsInStatus, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "SecondsInStatus");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Detail")) VarValue.AppendAttribute(recordElem, "Detail", ssDetail, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Detail");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MaxSecondsInStatus")) VarValue.AppendAttribute(recordElem, "MaxSecondsInStatus", ssMaxSecondsInStatus, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "MaxSecondsInStatus");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Status")) variable.Value = ssStatus; else variable.Optimized = true;
			} else if (head == "secondsinstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SecondsInStatus")) variable.Value = ssSecondsInStatus; else variable.Optimized = true;
			} else if (head == "detail") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Detail")) variable.Value = ssDetail; else variable.Optimized = true;
			} else if (head == "maxsecondsinstatus") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MaxSecondsInStatus")) variable.Value = ssMaxSecondsInStatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdStatus) {
				return ssStatus;
			} else if (key == IdSecondsInStatus) {
				return ssSecondsInStatus;
			} else if (key == IdDetail) {
				return ssDetail;
			} else if (key == IdMaxSecondsInStatus) {
				return ssMaxSecondsInStatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssStatus = (string) other.AttributeGet(IdStatus);
			ssSecondsInStatus = (int) other.AttributeGet(IdSecondsInStatus);
			ssDetail = (string) other.AttributeGet(IdDetail);
			ssMaxSecondsInStatus = (int) other.AttributeGet(IdMaxSecondsInStatus);
		}
		public bool IsDefault() {
			STThreadStatusStructure defaultStruct = new STThreadStatusStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssStatus != defaultStruct.ssStatus) return false;
			if (this.ssSecondsInStatus != defaultStruct.ssSecondsInStatus) return false;
			if (this.ssDetail != defaultStruct.ssDetail) return false;
			if (this.ssMaxSecondsInStatus != defaultStruct.ssMaxSecondsInStatus) return false;
			return true;
		}
	} // STThreadStatusStructure

	/// <summary>
	/// Structure <code>STActionInfoStructure</code> that represents the Service Studio structure
	///  <code>ActionInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STActionInfoStructure: ISerializable, ITypedRecord<STActionInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jGQQZuQmO3zfCrATgsGKKg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1nCX1fkwnWLuFyyydnAyrw");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*6zXRvalboVOHNv7g3_umYg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STActionInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ActionInfo.Name", "");
			ssKey = r.ReadText(index++, "ActionInfo.Key", "");
			ssDescription = r.ReadText(index++, "ActionInfo.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STActionInfoStructure r) {
			this = r;
		}


		public static bool operator == (STActionInfoStructure a, STActionInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STActionInfoStructure a, STActionInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STActionInfoStructure)) return false;
			return (this == (STActionInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STActionInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STActionInfoStructure Duplicate() {
			STActionInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
		public bool IsDefault() {
			STActionInfoStructure defaultStruct = new STActionInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			return true;
		}
	} // STActionInfoStructure

	/// <summary>
	/// Structure <code>STStructureInfoStructure</code> that represents the Service Studio structure
	///  <code>StructureInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STStructureInfoStructure: ISerializable, ITypedRecord<STStructureInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*fM_2NfBLSxJodceeAsmEQg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zV+QM+MLC9SMe4kARBV9dw");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+BTZzxPOgiRWMnZtwDuVkw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STStructureInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "StructureInfo.Name", "");
			ssKey = r.ReadText(index++, "StructureInfo.Key", "");
			ssDescription = r.ReadText(index++, "StructureInfo.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STStructureInfoStructure r) {
			this = r;
		}


		public static bool operator == (STStructureInfoStructure a, STStructureInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STStructureInfoStructure a, STStructureInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STStructureInfoStructure)) return false;
			return (this == (STStructureInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STStructureInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STStructureInfoStructure Duplicate() {
			STStructureInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
		public bool IsDefault() {
			STStructureInfoStructure defaultStruct = new STStructureInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			return true;
		}
	} // STStructureInfoStructure

	/// <summary>
	/// Structure <code>STReferenceImageStructure</code> that represents the Service Studio structure
	///  <code>ReferenceImage</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STReferenceImageStructure: ISerializable, ITypedRecord<STReferenceImageStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aRCJa474Lytwdf9MR8a_KA");
		internal static readonly GlobalObjectKey IdImage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kZzw7C8KlCMO4w1OnTc8OA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Image")]
		public byte[] ssImage;


		public BitArray OptimizedAttributes;

		public STReferenceImageStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssImage = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ReferenceImage.Name", "");
			ssImage = r.ReadBinaryData(index++, "ReferenceImage.Image", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STReferenceImageStructure r) {
			this = r;
		}


		public static bool operator == (STReferenceImageStructure a, STReferenceImageStructure b) {
			if (a.ssName != b.ssName) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssImage, b.ssImage)) return false;
			return true;
		}

		public static bool operator != (STReferenceImageStructure a, STReferenceImageStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STReferenceImageStructure)) return false;
			return (this == (STReferenceImageStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssImage.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STReferenceImageStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssImage = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssImage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssImage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssImage = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STReferenceImageStructure Duplicate() {
			STReferenceImageStructure t;
			t.ssName = this.ssName;
			if (this.ssImage != null) {
				t.ssImage = (byte[]) this.ssImage.Clone();
			} else {
				t.ssImage = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Image")) VarValue.AppendAttribute(recordElem, "Image", ssImage, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Image");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "image") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Image")) variable.Value = ssImage; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdImage) {
				return ssImage;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssImage = (byte[]) other.AttributeGet(IdImage);
		}
		public bool IsDefault() {
			STReferenceImageStructure defaultStruct = new STReferenceImageStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssImage, defaultStruct.ssImage)) return false;
			return true;
		}
	} // STReferenceImageStructure

	/// <summary>
	/// Structure <code>STProcessConfigStructure</code> that represents the Service Studio structure
	///  <code>ProcessConfig</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STProcessConfigStructure: ISerializable, ITypedRecord<STProcessConfigStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdProcessName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*j_kcr1zRfHYGlY069E+yRA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProcessName")]
		public string ssProcessName;


		public BitArray OptimizedAttributes;

		public STProcessConfigStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssProcessName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssProcessName = r.ReadText(index++, "ProcessConfig.ProcessName", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STProcessConfigStructure r) {
			this = r;
		}


		public static bool operator == (STProcessConfigStructure a, STProcessConfigStructure b) {
			if (a.ssProcessName != b.ssProcessName) return false;
			return true;
		}

		public static bool operator != (STProcessConfigStructure a, STProcessConfigStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STProcessConfigStructure)) return false;
			return (this == (STProcessConfigStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssProcessName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STProcessConfigStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssProcessName = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssProcessName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProcessName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProcessName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STProcessConfigStructure Duplicate() {
			STProcessConfigStructure t;
			t.ssProcessName = this.ssProcessName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProcessName")) VarValue.AppendAttribute(recordElem, "ProcessName", ssProcessName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProcessName");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "processname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProcessName")) variable.Value = ssProcessName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProcessName) {
				return ssProcessName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssProcessName = (string) other.AttributeGet(IdProcessName);
		}
		public bool IsDefault() {
			STProcessConfigStructure defaultStruct = new STProcessConfigStructure(null);
			if (this.ssProcessName != defaultStruct.ssProcessName) return false;
			return true;
		}
	} // STProcessConfigStructure

	/// <summary>
	/// Structure <code>STProcessMemDataStructure</code> that represents the Service Studio structure
	///  <code>ProcessMemData</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STProcessMemDataStructure: ISerializable, ITypedRecord<STProcessMemDataStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdmaxMem = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AhfqPxKLUNqThse6TF5mjg");
		internal static readonly GlobalObjectKey IdinitMem = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gAbcQIFvpIusbM8jp3sKZg");
		internal static readonly GlobalObjectKey IdendMem = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bQtRX_ivftSbFAL6mWmdPQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("maxMem")]
		public decimal ssmaxMem;

		[System.Xml.Serialization.XmlElement("initMem")]
		public decimal ssinitMem;

		[System.Xml.Serialization.XmlElement("endMem")]
		public decimal ssendMem;


		public BitArray OptimizedAttributes;

		public STProcessMemDataStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssmaxMem = 0.0M;
			ssinitMem = 0.0M;
			ssendMem = 0.0M;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssmaxMem = r.ReadDecimal(index++, "ProcessMemData.maxMem", 0.0M);
			ssinitMem = r.ReadDecimal(index++, "ProcessMemData.initMem", 0.0M);
			ssendMem = r.ReadDecimal(index++, "ProcessMemData.endMem", 0.0M);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STProcessMemDataStructure r) {
			this = r;
		}


		public static bool operator == (STProcessMemDataStructure a, STProcessMemDataStructure b) {
			if (a.ssmaxMem != b.ssmaxMem) return false;
			if (a.ssinitMem != b.ssinitMem) return false;
			if (a.ssendMem != b.ssendMem) return false;
			return true;
		}

		public static bool operator != (STProcessMemDataStructure a, STProcessMemDataStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STProcessMemDataStructure)) return false;
			return (this == (STProcessMemDataStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssmaxMem.GetHashCode()
				^ ssinitMem.GetHashCode()
				^ ssendMem.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STProcessMemDataStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssmaxMem = 0.0M;
			ssinitMem = 0.0M;
			ssendMem = 0.0M;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssmaxMem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssmaxMem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssmaxMem = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssinitMem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssinitMem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssinitMem = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssendMem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssendMem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssendMem = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STProcessMemDataStructure Duplicate() {
			STProcessMemDataStructure t;
			t.ssmaxMem = this.ssmaxMem;
			t.ssinitMem = this.ssinitMem;
			t.ssendMem = this.ssendMem;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".maxMem")) VarValue.AppendAttribute(recordElem, "maxMem", ssmaxMem, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "maxMem");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".initMem")) VarValue.AppendAttribute(recordElem, "initMem", ssinitMem, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "initMem");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".endMem")) VarValue.AppendAttribute(recordElem, "endMem", ssendMem, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "endMem");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "maxmem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".maxMem")) variable.Value = ssmaxMem; else variable.Optimized = true;
			} else if (head == "initmem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".initMem")) variable.Value = ssinitMem; else variable.Optimized = true;
			} else if (head == "endmem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".endMem")) variable.Value = ssendMem; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdmaxMem) {
				return ssmaxMem;
			} else if (key == IdinitMem) {
				return ssinitMem;
			} else if (key == IdendMem) {
				return ssendMem;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssmaxMem = (decimal) other.AttributeGet(IdmaxMem);
			ssinitMem = (decimal) other.AttributeGet(IdinitMem);
			ssendMem = (decimal) other.AttributeGet(IdendMem);
		}
		public bool IsDefault() {
			STProcessMemDataStructure defaultStruct = new STProcessMemDataStructure(null);
			if (this.ssmaxMem != defaultStruct.ssmaxMem) return false;
			if (this.ssinitMem != defaultStruct.ssinitMem) return false;
			if (this.ssendMem != defaultStruct.ssendMem) return false;
			return true;
		}
	} // STProcessMemDataStructure

	/// <summary>
	/// Structure <code>STActivationResponseStructure</code> that represents the Service Studio structure
	///  <code>ActivationResponse</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STActivationResponseStructure: ISerializable, ITypedRecord<STActivationResponseStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdAnswer = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*44s_KlA7MXtc52j7+qapZg");
		internal static readonly GlobalObjectKey IdMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*JzgXUoN5qIC+eD2QsZgICg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Answer")]
		public string ssAnswer;

		[System.Xml.Serialization.XmlElement("Message")]
		public RCHEMessageRecord ssMessage;


		public BitArray OptimizedAttributes;

		public STActivationResponseStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssAnswer = "";
			ssMessage = new RCHEMessageRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssMessage.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssAnswer = r.ReadText(index++, "ActivationResponse.Answer", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STActivationResponseStructure r) {
			this = r;
		}


		public static bool operator == (STActivationResponseStructure a, STActivationResponseStructure b) {
			if (a.ssAnswer != b.ssAnswer) return false;
			if (a.ssMessage != b.ssMessage) return false;
			return true;
		}

		public static bool operator != (STActivationResponseStructure a, STActivationResponseStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STActivationResponseStructure)) return false;
			return (this == (STActivationResponseStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssAnswer.GetHashCode()
				^ ssMessage.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STActivationResponseStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssAnswer = "";
			ssMessage = new RCHEMessageRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssAnswer", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAnswer' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAnswer = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage = (RCHEMessageRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssMessage.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssMessage.InternalRecursiveSave();
		}


		public STActivationResponseStructure Duplicate() {
			STActivationResponseStructure t;
			t.ssAnswer = this.ssAnswer;
			t.ssMessage = (RCHEMessageRecord) this.ssMessage.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Answer")) VarValue.AppendAttribute(recordElem, "Answer", ssAnswer, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Answer");
				ssMessage.ToXml(this, recordElem, "Message", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "answer") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Answer")) variable.Value = ssAnswer; else variable.Optimized = true;
			} else if (head == "message") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message")) variable.Value = ssMessage; else variable.Optimized = true;
				variable.SetFieldName("message");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAnswer) {
				return ssAnswer;
			} else if (key == IdMessage) {
				return ssMessage;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssAnswer = (string) other.AttributeGet(IdAnswer);
			ssMessage.FillFromOther((IRecord) other.AttributeGet(IdMessage));
		}
		public bool IsDefault() {
			STActivationResponseStructure defaultStruct = new STActivationResponseStructure(null);
			if (this.ssAnswer != defaultStruct.ssAnswer) return false;
			if (this.ssMessage != defaultStruct.ssMessage) return false;
			return true;
		}
	} // STActivationResponseStructure

	/// <summary>
	/// Structure <code>STActivationLicenseInformationStructure</code> that represents the Service Studio
	///  structure <code>ActivationLicenseInformation</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STActivationLicenseInformationStructure: ISerializable, ITypedRecord<STActivationLicenseInformationStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdSchema = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*lvDBh1co2HfSoVJB6fwyYg");
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RX+nohN84vtnI74R7_Npxg");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KNK9SRkpsj2S3FoowgWdZw");
		internal static readonly GlobalObjectKey IdTerm = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kOhJa1xfimfKcJdHFig9qg");
		internal static readonly GlobalObjectKey IdWarn = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0SShvWKfH0lpRJu0bQVcJg");
		internal static readonly GlobalObjectKey IdGrace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*h+BAiNpOOA0SnzUoMZgfjA");
		internal static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SRy5Mr0V9H9aDjsbf7PkNw");
		internal static readonly GlobalObjectKey IdEdition = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GR7fiiMM1tqye5tHg_o3PA");
		internal static readonly GlobalObjectKey IdSerial = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4UXZyu3F8405XBKEmKap5w");
		internal static readonly GlobalObjectKey IdOrganization = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WiJg+GBOQodP+RvVcqTlyg");
		internal static readonly GlobalObjectKey IdState = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*DLf5jHlwtbIQsvSItcIhig");
		internal static readonly GlobalObjectKey IdIsOEM = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jB8hvflfckuW6sK2A+v1+g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Schema")]
		public string ssSchema;

		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Creation")]
		public string ssCreation;

		[System.Xml.Serialization.XmlElement("Term")]
		public string ssTerm;

		[System.Xml.Serialization.XmlElement("Warn")]
		public string ssWarn;

		[System.Xml.Serialization.XmlElement("Grace")]
		public string ssGrace;

		[System.Xml.Serialization.XmlElement("Type")]
		public string ssType;

		[System.Xml.Serialization.XmlElement("Edition")]
		public string ssEdition;

		[System.Xml.Serialization.XmlElement("Serial")]
		public string ssSerial;

		[System.Xml.Serialization.XmlElement("Organization")]
		public string ssOrganization;

		[System.Xml.Serialization.XmlElement("State")]
		public RCActivationResponseRecord ssState;

		[System.Xml.Serialization.XmlElement("IsOEM")]
		public string ssIsOEM;


		public BitArray OptimizedAttributes;

		public STActivationLicenseInformationStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSchema = "";
			ssUID = "";
			ssCreation = "";
			ssTerm = "";
			ssWarn = "";
			ssGrace = "";
			ssType = "";
			ssEdition = "";
			ssSerial = "";
			ssOrganization = "";
			ssState = new RCActivationResponseRecord(null);
			ssIsOEM = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssState.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSchema = r.ReadText(index++, "ActivationLicenseInformation.Schema", "");
			ssUID = r.ReadText(index++, "ActivationLicenseInformation.UID", "");
			ssCreation = r.ReadText(index++, "ActivationLicenseInformation.Creation", "");
			ssTerm = r.ReadText(index++, "ActivationLicenseInformation.Term", "");
			ssWarn = r.ReadText(index++, "ActivationLicenseInformation.Warn", "");
			ssGrace = r.ReadText(index++, "ActivationLicenseInformation.Grace", "");
			ssType = r.ReadText(index++, "ActivationLicenseInformation.Type", "");
			ssEdition = r.ReadText(index++, "ActivationLicenseInformation.Edition", "");
			ssSerial = r.ReadText(index++, "ActivationLicenseInformation.Serial", "");
			ssOrganization = r.ReadText(index++, "ActivationLicenseInformation.Organization", "");
			ssIsOEM = r.ReadText(index++, "ActivationLicenseInformation.IsOEM", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STActivationLicenseInformationStructure r) {
			this = r;
		}


		public static bool operator == (STActivationLicenseInformationStructure a, STActivationLicenseInformationStructure b) {
			if (a.ssSchema != b.ssSchema) return false;
			if (a.ssUID != b.ssUID) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssTerm != b.ssTerm) return false;
			if (a.ssWarn != b.ssWarn) return false;
			if (a.ssGrace != b.ssGrace) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssEdition != b.ssEdition) return false;
			if (a.ssSerial != b.ssSerial) return false;
			if (a.ssOrganization != b.ssOrganization) return false;
			if (a.ssState != b.ssState) return false;
			if (a.ssIsOEM != b.ssIsOEM) return false;
			return true;
		}

		public static bool operator != (STActivationLicenseInformationStructure a, STActivationLicenseInformationStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STActivationLicenseInformationStructure)) return false;
			return (this == (STActivationLicenseInformationStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSchema.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssTerm.GetHashCode()
				^ ssWarn.GetHashCode()
				^ ssGrace.GetHashCode()
				^ ssType.GetHashCode()
				^ ssEdition.GetHashCode()
				^ ssSerial.GetHashCode()
				^ ssOrganization.GetHashCode()
				^ ssState.GetHashCode()
				^ ssIsOEM.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STActivationLicenseInformationStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSchema = "";
			ssUID = "";
			ssCreation = "";
			ssTerm = "";
			ssWarn = "";
			ssGrace = "";
			ssType = "";
			ssEdition = "";
			ssSerial = "";
			ssOrganization = "";
			ssState = new RCActivationResponseRecord(null);
			ssIsOEM = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSchema", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSchema' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSchema = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTerm", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTerm' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTerm = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWarn", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWarn' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWarn = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGrace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGrace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGrace = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEdition", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEdition' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEdition = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSerial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSerial' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSerial = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOrganization", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOrganization' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOrganization = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssState' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssState = (RCActivationResponseRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsOEM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsOEM' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsOEM = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssState.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssState.InternalRecursiveSave();
		}


		public STActivationLicenseInformationStructure Duplicate() {
			STActivationLicenseInformationStructure t;
			t.ssSchema = this.ssSchema;
			t.ssUID = this.ssUID;
			t.ssCreation = this.ssCreation;
			t.ssTerm = this.ssTerm;
			t.ssWarn = this.ssWarn;
			t.ssGrace = this.ssGrace;
			t.ssType = this.ssType;
			t.ssEdition = this.ssEdition;
			t.ssSerial = this.ssSerial;
			t.ssOrganization = this.ssOrganization;
			t.ssState = (RCActivationResponseRecord) this.ssState.Duplicate();
			t.ssIsOEM = this.ssIsOEM;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Schema")) VarValue.AppendAttribute(recordElem, "Schema", ssSchema, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Schema");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Term")) VarValue.AppendAttribute(recordElem, "Term", ssTerm, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Term");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Warn")) VarValue.AppendAttribute(recordElem, "Warn", ssWarn, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Warn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Grace")) VarValue.AppendAttribute(recordElem, "Grace", ssGrace, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Grace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Edition")) VarValue.AppendAttribute(recordElem, "Edition", ssEdition, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Edition");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Serial")) VarValue.AppendAttribute(recordElem, "Serial", ssSerial, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Serial");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Organization")) VarValue.AppendAttribute(recordElem, "Organization", ssOrganization, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Organization");
				ssState.ToXml(this, recordElem, "State", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsOEM")) VarValue.AppendAttribute(recordElem, "IsOEM", ssIsOEM, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IsOEM");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "schema") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Schema")) variable.Value = ssSchema; else variable.Optimized = true;
			} else if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "term") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Term")) variable.Value = ssTerm; else variable.Optimized = true;
			} else if (head == "warn") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Warn")) variable.Value = ssWarn; else variable.Optimized = true;
			} else if (head == "grace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Grace")) variable.Value = ssGrace; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "edition") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Edition")) variable.Value = ssEdition; else variable.Optimized = true;
			} else if (head == "serial") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Serial")) variable.Value = ssSerial; else variable.Optimized = true;
			} else if (head == "organization") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Organization")) variable.Value = ssOrganization; else variable.Optimized = true;
			} else if (head == "state") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".State")) variable.Value = ssState; else variable.Optimized = true;
				variable.SetFieldName("state");
			} else if (head == "isoem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsOEM")) variable.Value = ssIsOEM; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSchema) {
				return ssSchema;
			} else if (key == IdUID) {
				return ssUID;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdTerm) {
				return ssTerm;
			} else if (key == IdWarn) {
				return ssWarn;
			} else if (key == IdGrace) {
				return ssGrace;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdEdition) {
				return ssEdition;
			} else if (key == IdSerial) {
				return ssSerial;
			} else if (key == IdOrganization) {
				return ssOrganization;
			} else if (key == IdState) {
				return ssState;
			} else if (key == IdIsOEM) {
				return ssIsOEM;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSchema = (string) other.AttributeGet(IdSchema);
			ssUID = (string) other.AttributeGet(IdUID);
			ssCreation = (string) other.AttributeGet(IdCreation);
			ssTerm = (string) other.AttributeGet(IdTerm);
			ssWarn = (string) other.AttributeGet(IdWarn);
			ssGrace = (string) other.AttributeGet(IdGrace);
			ssType = (string) other.AttributeGet(IdType);
			ssEdition = (string) other.AttributeGet(IdEdition);
			ssSerial = (string) other.AttributeGet(IdSerial);
			ssOrganization = (string) other.AttributeGet(IdOrganization);
			ssState.FillFromOther((IRecord) other.AttributeGet(IdState));
			ssIsOEM = (string) other.AttributeGet(IdIsOEM);
		}
		public bool IsDefault() {
			STActivationLicenseInformationStructure defaultStruct = new STActivationLicenseInformationStructure(null);
			if (this.ssSchema != defaultStruct.ssSchema) return false;
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssTerm != defaultStruct.ssTerm) return false;
			if (this.ssWarn != defaultStruct.ssWarn) return false;
			if (this.ssGrace != defaultStruct.ssGrace) return false;
			if (this.ssType != defaultStruct.ssType) return false;
			if (this.ssEdition != defaultStruct.ssEdition) return false;
			if (this.ssSerial != defaultStruct.ssSerial) return false;
			if (this.ssOrganization != defaultStruct.ssOrganization) return false;
			if (this.ssState != defaultStruct.ssState) return false;
			if (this.ssIsOEM != defaultStruct.ssIsOEM) return false;
			return true;
		}
	} // STActivationLicenseInformationStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_Solution</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdSchema = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*VrR2m5rXGecnSqt15b71Dg");
		internal static readonly GlobalObjectKey IdHubServerVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*P576VMQrLqcIfkdH6bFEVA");
		internal static readonly GlobalObjectKey IdLastUpgradeVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BBq5kGIqihAq0w9HpKqH6A");
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Dmgfgrs3o0wWqVa8wVzH+Q");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GtfarCmz9PHBz4m0TR9IwA");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jVisloQFPQ4y_jEQWhgItw");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7A_QWD4DSTdtS8rfnG+QFg");
		internal static readonly GlobalObjectKey IdReferences = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*enk+xE7JrJNHVffYc1sONA");
		internal static readonly GlobalObjectKey IdApplications = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ekn7E_c4Y0m_WjXnB5RVxg");
		internal static readonly GlobalObjectKey IdVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*V5Iv8M2pt0KbHCPTnQ7mKA");
		internal static readonly GlobalObjectKey IdActivationCode = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*lGsxyYG_1zTDze97xF+U1A");
		internal static readonly GlobalObjectKey IdIsTransient = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*C1jLi8QQ5UuNY8naWAqj_Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Schema")]
		public int ssSchema;

		[System.Xml.Serialization.XmlElement("HubServerVersion")]
		public string ssHubServerVersion;

		[System.Xml.Serialization.XmlElement("LastUpgradeVersion")]
		public string ssLastUpgradeVersion;

		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Creation")]
		public DateTime ssCreation;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("References")]
		public RLSolutionPack_SolutionReferenceRecordList ssReferences;

		[System.Xml.Serialization.XmlElement("Applications")]
		public RLSolutionPack_ApplicationRecordList ssApplications;

		[System.Xml.Serialization.XmlElement("Version")]
		public RCSolutionPack_SolutionVersionRecord ssVersion;

		[System.Xml.Serialization.XmlElement("ActivationCode")]
		public string ssActivationCode;

		[System.Xml.Serialization.XmlElement("IsTransient")]
		public bool ssIsTransient;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSchema = 0;
			ssHubServerVersion = "";
			ssLastUpgradeVersion = "";
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssName = "";
			ssDescription = "";
			ssReferences = new RLSolutionPack_SolutionReferenceRecordList();
			ssApplications = new RLSolutionPack_ApplicationRecordList();
			ssVersion = new RCSolutionPack_SolutionVersionRecord(null);
			ssActivationCode = "";
			ssIsTransient = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssVersion.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSchema = r.ReadInteger(index++, "SolutionPack_Solution.Schema", 0);
			ssHubServerVersion = r.ReadText(index++, "SolutionPack_Solution.HubServerVersion", "");
			ssLastUpgradeVersion = r.ReadText(index++, "SolutionPack_Solution.LastUpgradeVersion", "");
			ssUID = r.ReadText(index++, "SolutionPack_Solution.UID", "");
			ssCreation = r.ReadDateTime(index++, "SolutionPack_Solution.Creation", new DateTime(1900, 1, 1, 0, 0, 0));
			ssName = r.ReadText(index++, "SolutionPack_Solution.Name", "");
			ssDescription = r.ReadText(index++, "SolutionPack_Solution.Description", "");
			ssActivationCode = r.ReadText(index++, "SolutionPack_Solution.ActivationCode", "");
			ssIsTransient = r.ReadBoolean(index++, "SolutionPack_Solution.IsTransient", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionStructure a, STSolutionPack_SolutionStructure b) {
			if (a.ssSchema != b.ssSchema) return false;
			if (a.ssHubServerVersion != b.ssHubServerVersion) return false;
			if (a.ssLastUpgradeVersion != b.ssLastUpgradeVersion) return false;
			if (a.ssUID != b.ssUID) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssReferences != b.ssReferences) return false;
			if (a.ssApplications != b.ssApplications) return false;
			if (a.ssVersion != b.ssVersion) return false;
			if (a.ssActivationCode != b.ssActivationCode) return false;
			if (a.ssIsTransient != b.ssIsTransient) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionStructure a, STSolutionPack_SolutionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionStructure)) return false;
			return (this == (STSolutionPack_SolutionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSchema.GetHashCode()
				^ ssHubServerVersion.GetHashCode()
				^ ssLastUpgradeVersion.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssReferences.GetHashCode()
				^ ssApplications.GetHashCode()
				^ ssVersion.GetHashCode()
				^ ssActivationCode.GetHashCode()
				^ ssIsTransient.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSchema = 0;
			ssHubServerVersion = "";
			ssLastUpgradeVersion = "";
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssName = "";
			ssDescription = "";
			ssReferences = new RLSolutionPack_SolutionReferenceRecordList();
			ssApplications = new RLSolutionPack_ApplicationRecordList();
			ssVersion = new RCSolutionPack_SolutionVersionRecord(null);
			ssActivationCode = "";
			ssIsTransient = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSchema", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSchema' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSchema = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHubServerVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHubServerVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHubServerVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLastUpgradeVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLastUpgradeVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLastUpgradeVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReferences", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReferences' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReferences = (RLSolutionPack_SolutionReferenceRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplications", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplications' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplications = (RLSolutionPack_ApplicationRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersion = (RCSolutionPack_SolutionVersionRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssActivationCode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssActivationCode' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssActivationCode = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsTransient", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsTransient' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsTransient = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssReferences.RecursiveReset();
			ssApplications.RecursiveReset();
			ssVersion.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssReferences.InternalRecursiveSave();
			ssApplications.InternalRecursiveSave();
			ssVersion.InternalRecursiveSave();
		}


		public STSolutionPack_SolutionStructure Duplicate() {
			STSolutionPack_SolutionStructure t;
			t.ssSchema = this.ssSchema;
			t.ssHubServerVersion = this.ssHubServerVersion;
			t.ssLastUpgradeVersion = this.ssLastUpgradeVersion;
			t.ssUID = this.ssUID;
			t.ssCreation = this.ssCreation;
			t.ssName = this.ssName;
			t.ssDescription = this.ssDescription;
			t.ssReferences = (RLSolutionPack_SolutionReferenceRecordList) this.ssReferences.Duplicate();
			t.ssApplications = (RLSolutionPack_ApplicationRecordList) this.ssApplications.Duplicate();
			t.ssVersion = (RCSolutionPack_SolutionVersionRecord) this.ssVersion.Duplicate();
			t.ssActivationCode = this.ssActivationCode;
			t.ssIsTransient = this.ssIsTransient;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Schema")) VarValue.AppendAttribute(recordElem, "Schema", ssSchema, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Schema");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HubServerVersion")) VarValue.AppendAttribute(recordElem, "HubServerVersion", ssHubServerVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HubServerVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpgradeVersion")) VarValue.AppendAttribute(recordElem, "LastUpgradeVersion", ssLastUpgradeVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpgradeVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				ssReferences.ToXml(this, recordElem, "References", detailLevel - 1);
				ssApplications.ToXml(this, recordElem, "Applications", detailLevel - 1);
				ssVersion.ToXml(this, recordElem, "Version", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ActivationCode")) VarValue.AppendAttribute(recordElem, "ActivationCode", ssActivationCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ActivationCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsTransient")) VarValue.AppendAttribute(recordElem, "IsTransient", ssIsTransient, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsTransient");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "schema") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Schema")) variable.Value = ssSchema; else variable.Optimized = true;
			} else if (head == "hubserverversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HubServerVersion")) variable.Value = ssHubServerVersion; else variable.Optimized = true;
			} else if (head == "lastupgradeversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpgradeVersion")) variable.Value = ssLastUpgradeVersion; else variable.Optimized = true;
			} else if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "references") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".References")) variable.Value = ssReferences; else variable.Optimized = true;
				variable.SetFieldName("references");
			} else if (head == "applications") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Applications")) variable.Value = ssApplications; else variable.Optimized = true;
				variable.SetFieldName("applications");
			} else if (head == "version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Version")) variable.Value = ssVersion; else variable.Optimized = true;
				variable.SetFieldName("version");
			} else if (head == "activationcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ActivationCode")) variable.Value = ssActivationCode; else variable.Optimized = true;
			} else if (head == "istransient") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsTransient")) variable.Value = ssIsTransient; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSchema) {
				return ssSchema;
			} else if (key == IdHubServerVersion) {
				return ssHubServerVersion;
			} else if (key == IdLastUpgradeVersion) {
				return ssLastUpgradeVersion;
			} else if (key == IdUID) {
				return ssUID;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdReferences) {
				return ssReferences;
			} else if (key == IdApplications) {
				return ssApplications;
			} else if (key == IdVersion) {
				return ssVersion;
			} else if (key == IdActivationCode) {
				return ssActivationCode;
			} else if (key == IdIsTransient) {
				return ssIsTransient;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSchema = (int) other.AttributeGet(IdSchema);
			ssHubServerVersion = (string) other.AttributeGet(IdHubServerVersion);
			ssLastUpgradeVersion = (string) other.AttributeGet(IdLastUpgradeVersion);
			ssUID = (string) other.AttributeGet(IdUID);
			ssCreation = (DateTime) other.AttributeGet(IdCreation);
			ssName = (string) other.AttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssReferences = new RLSolutionPack_SolutionReferenceRecordList();
			ssReferences.FillFromOther((IOSList) other.AttributeGet(IdReferences));
			ssApplications = new RLSolutionPack_ApplicationRecordList();
			ssApplications.FillFromOther((IOSList) other.AttributeGet(IdApplications));
			ssVersion.FillFromOther((IRecord) other.AttributeGet(IdVersion));
			ssActivationCode = (string) other.AttributeGet(IdActivationCode);
			ssIsTransient = (bool) other.AttributeGet(IdIsTransient);
		}
		public bool IsDefault() {
			STSolutionPack_SolutionStructure defaultStruct = new STSolutionPack_SolutionStructure(null);
			if (this.ssSchema != defaultStruct.ssSchema) return false;
			if (this.ssHubServerVersion != defaultStruct.ssHubServerVersion) return false;
			if (this.ssLastUpgradeVersion != defaultStruct.ssLastUpgradeVersion) return false;
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssReferences != null && this.ssReferences.Length != 0) return false;
			if (this.ssApplications != null && this.ssApplications.Length != 0) return false;
			if (this.ssVersion != defaultStruct.ssVersion) return false;
			if (this.ssActivationCode != defaultStruct.ssActivationCode) return false;
			if (this.ssIsTransient != defaultStruct.ssIsTransient) return false;
			return true;
		}
	} // STSolutionPack_SolutionStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionReferenceStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_SolutionReference</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionReferenceStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionReferenceStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_o_rbD8xOdLgnUPC9dQDhA");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KHy4JAlv4AU+BD91vttFEg");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NjpDnSxuU510EGcXkbMe1A");
		internal static readonly GlobalObjectKey IdLogicalDatabases = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZVKzxyFpohVDVJA_WZ_dKw");
		internal static readonly GlobalObjectKey IdDBCatalog = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9gGlypj8AUKszQ1j_p1xYA");
		internal static readonly GlobalObjectKey IdHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*prjROVv+O0iAa_76yNP5sA");
		internal static readonly GlobalObjectKey IdIsComponent = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*urKJGUO8f0GDbaPwM4WuVw");
		internal static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*W6KUsfGblECYEVsHWHX4wg");
		internal static readonly GlobalObjectKey IdCreatedOn = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*LldPa6Ms4kS7Rif2eXNY1A");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*VipbJgZtEkOHE0OAd0mSOw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("LogicalDatabases")]
		public RLSolutionPack_SolutionLogicalDatabaseRecordList ssLogicalDatabases;

		[System.Xml.Serialization.XmlElement("DBCatalog")]
		public RCSolutionPack_SolutionDBCatalogRecord ssDBCatalog;

		[System.Xml.Serialization.XmlElement("Hash")]
		public string ssHash;

		[System.Xml.Serialization.XmlElement("IsComponent")]
		public bool ssIsComponent;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public string ssCreatedBy;

		[System.Xml.Serialization.XmlElement("CreatedOn")]
		public DateTime ssCreatedOn;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionReferenceStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssName = "";
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssDBCatalog = new RCSolutionPack_SolutionDBCatalogRecord(null);
			ssHash = "";
			ssIsComponent = false;
			ssCreatedBy = "";
			ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssDBCatalog.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUID = r.ReadText(index++, "SolutionPack_SolutionReference.UID", "");
			ssKind = r.ReadText(index++, "SolutionPack_SolutionReference.Kind", "");
			ssName = r.ReadText(index++, "SolutionPack_SolutionReference.Name", "");
			ssHash = r.ReadText(index++, "SolutionPack_SolutionReference.Hash", "");
			ssIsComponent = r.ReadBoolean(index++, "SolutionPack_SolutionReference.IsComponent", false);
			ssCreatedBy = r.ReadText(index++, "SolutionPack_SolutionReference.CreatedBy", "");
			ssCreatedOn = r.ReadDateTime(index++, "SolutionPack_SolutionReference.CreatedOn", new DateTime(1900, 1, 1, 0, 0, 0));
			ssDescription = r.ReadText(index++, "SolutionPack_SolutionReference.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionReferenceStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionReferenceStructure a, STSolutionPack_SolutionReferenceStructure b) {
			if (a.ssUID != b.ssUID) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssLogicalDatabases != b.ssLogicalDatabases) return false;
			if (a.ssDBCatalog != b.ssDBCatalog) return false;
			if (a.ssHash != b.ssHash) return false;
			if (a.ssIsComponent != b.ssIsComponent) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssCreatedOn != b.ssCreatedOn) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionReferenceStructure a, STSolutionPack_SolutionReferenceStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionReferenceStructure)) return false;
			return (this == (STSolutionPack_SolutionReferenceStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssName.GetHashCode()
				^ ssLogicalDatabases.GetHashCode()
				^ ssDBCatalog.GetHashCode()
				^ ssHash.GetHashCode()
				^ ssIsComponent.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssCreatedOn.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionReferenceStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssName = "";
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssDBCatalog = new RCSolutionPack_SolutionDBCatalogRecord(null);
			ssHash = "";
			ssIsComponent = false;
			ssCreatedBy = "";
			ssCreatedOn = new DateTime(1900, 1, 1, 0, 0, 0);
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogicalDatabases", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalDatabases' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalDatabases = (RLSolutionPack_SolutionLogicalDatabaseRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDBCatalog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDBCatalog' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDBCatalog = (RCSolutionPack_SolutionDBCatalogRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsComponent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsComponent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsComponent = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreatedBy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreatedBy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreatedBy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreatedOn", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreatedOn' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreatedOn = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssLogicalDatabases.RecursiveReset();
			ssDBCatalog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssLogicalDatabases.InternalRecursiveSave();
			ssDBCatalog.InternalRecursiveSave();
		}


		public STSolutionPack_SolutionReferenceStructure Duplicate() {
			STSolutionPack_SolutionReferenceStructure t;
			t.ssUID = this.ssUID;
			t.ssKind = this.ssKind;
			t.ssName = this.ssName;
			t.ssLogicalDatabases = (RLSolutionPack_SolutionLogicalDatabaseRecordList) this.ssLogicalDatabases.Duplicate();
			t.ssDBCatalog = (RCSolutionPack_SolutionDBCatalogRecord) this.ssDBCatalog.Duplicate();
			t.ssHash = this.ssHash;
			t.ssIsComponent = this.ssIsComponent;
			t.ssCreatedBy = this.ssCreatedBy;
			t.ssCreatedOn = this.ssCreatedOn;
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				ssLogicalDatabases.ToXml(this, recordElem, "LogicalDatabases", detailLevel - 1);
				ssDBCatalog.ToXml(this, recordElem, "DBCatalog", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Hash")) VarValue.AppendAttribute(recordElem, "Hash", ssHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Hash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsComponent")) VarValue.AppendAttribute(recordElem, "IsComponent", ssIsComponent, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsComponent");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedOn")) VarValue.AppendAttribute(recordElem, "CreatedOn", ssCreatedOn, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedOn");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "logicaldatabases") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalDatabases")) variable.Value = ssLogicalDatabases; else variable.Optimized = true;
				variable.SetFieldName("logicaldatabases");
			} else if (head == "dbcatalog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBCatalog")) variable.Value = ssDBCatalog; else variable.Optimized = true;
				variable.SetFieldName("dbcatalog");
			} else if (head == "hash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Hash")) variable.Value = ssHash; else variable.Optimized = true;
			} else if (head == "iscomponent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsComponent")) variable.Value = ssIsComponent; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "createdon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedOn")) variable.Value = ssCreatedOn; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUID) {
				return ssUID;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdLogicalDatabases) {
				return ssLogicalDatabases;
			} else if (key == IdDBCatalog) {
				return ssDBCatalog;
			} else if (key == IdHash) {
				return ssHash;
			} else if (key == IdIsComponent) {
				return ssIsComponent;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdCreatedOn) {
				return ssCreatedOn;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUID = (string) other.AttributeGet(IdUID);
			ssKind = (string) other.AttributeGet(IdKind);
			ssName = (string) other.AttributeGet(IdName);
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssLogicalDatabases.FillFromOther((IOSList) other.AttributeGet(IdLogicalDatabases));
			ssDBCatalog.FillFromOther((IRecord) other.AttributeGet(IdDBCatalog));
			ssHash = (string) other.AttributeGet(IdHash);
			ssIsComponent = (bool) other.AttributeGet(IdIsComponent);
			ssCreatedBy = (string) other.AttributeGet(IdCreatedBy);
			ssCreatedOn = (DateTime) other.AttributeGet(IdCreatedOn);
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
		public bool IsDefault() {
			STSolutionPack_SolutionReferenceStructure defaultStruct = new STSolutionPack_SolutionReferenceStructure(null);
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssLogicalDatabases != null && this.ssLogicalDatabases.Length != 0) return false;
			if (this.ssDBCatalog != defaultStruct.ssDBCatalog) return false;
			if (this.ssHash != defaultStruct.ssHash) return false;
			if (this.ssIsComponent != defaultStruct.ssIsComponent) return false;
			if (this.ssCreatedBy != defaultStruct.ssCreatedBy) return false;
			if (this.ssCreatedOn != defaultStruct.ssCreatedOn) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			return true;
		}
	} // STSolutionPack_SolutionReferenceStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionVersionStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_SolutionVersion</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionVersionStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionVersionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8+RAMU+GZMUbVeV5JHODkw");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*6y_YA3WCfqNc1r2xxYc9nQ");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7ztvVbz619ZNrHpYcr5q1w");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SUZmfrJYz3WwEetrWRQesQ");
		internal static readonly GlobalObjectKey IdReferences = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4QgxYQyiDEtbhlfeteothw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Creation")]
		public DateTime ssCreation;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("References")]
		public RLSolutionPack_SolutionVersionReferenceRecordList ssReferences;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionVersionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssName = "";
			ssDescription = "";
			ssReferences = new RLSolutionPack_SolutionVersionReferenceRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUID = r.ReadText(index++, "SolutionPack_SolutionVersion.UID", "");
			ssCreation = r.ReadDateTime(index++, "SolutionPack_SolutionVersion.Creation", new DateTime(1900, 1, 1, 0, 0, 0));
			ssName = r.ReadText(index++, "SolutionPack_SolutionVersion.Name", "");
			ssDescription = r.ReadText(index++, "SolutionPack_SolutionVersion.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionVersionStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionVersionStructure a, STSolutionPack_SolutionVersionStructure b) {
			if (a.ssUID != b.ssUID) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssReferences != b.ssReferences) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionVersionStructure a, STSolutionPack_SolutionVersionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionVersionStructure)) return false;
			return (this == (STSolutionPack_SolutionVersionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssReferences.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionVersionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssName = "";
			ssDescription = "";
			ssReferences = new RLSolutionPack_SolutionVersionReferenceRecordList();
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReferences", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReferences' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReferences = (RLSolutionPack_SolutionVersionReferenceRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssReferences.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssReferences.InternalRecursiveSave();
		}


		public STSolutionPack_SolutionVersionStructure Duplicate() {
			STSolutionPack_SolutionVersionStructure t;
			t.ssUID = this.ssUID;
			t.ssCreation = this.ssCreation;
			t.ssName = this.ssName;
			t.ssDescription = this.ssDescription;
			t.ssReferences = (RLSolutionPack_SolutionVersionReferenceRecordList) this.ssReferences.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				ssReferences.ToXml(this, recordElem, "References", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "references") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".References")) variable.Value = ssReferences; else variable.Optimized = true;
				variable.SetFieldName("references");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUID) {
				return ssUID;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdReferences) {
				return ssReferences;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUID = (string) other.AttributeGet(IdUID);
			ssCreation = (DateTime) other.AttributeGet(IdCreation);
			ssName = (string) other.AttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssReferences = new RLSolutionPack_SolutionVersionReferenceRecordList();
			ssReferences.FillFromOther((IOSList) other.AttributeGet(IdReferences));
		}
		public bool IsDefault() {
			STSolutionPack_SolutionVersionStructure defaultStruct = new STSolutionPack_SolutionVersionStructure(null);
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssReferences != null && this.ssReferences.Length != 0) return false;
			return true;
		}
	} // STSolutionPack_SolutionVersionStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionVersionReferenceStructure</code> that represents the Service
	///  Studio structure <code>SolutionPack_SolutionVersionReference</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionVersionReferenceStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionVersionReferenceStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QzV+iMGYcfB5ReD0ORMA4w");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3DbHXqCgUGK70rNs_hM1iw");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kH3HLI7R5aN2I_5OA0JLyA");
		internal static readonly GlobalObjectKey IdMainReference = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*B0XmmhobXCh5L9l9zRzXLw");
		internal static readonly GlobalObjectKey IdFilename = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*tvrZLSdOUQNvAHD7FSt5zg");
		internal static readonly GlobalObjectKey IdInPack = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*6_EEdhmk5KvTpc5pw+XaAg");
		internal static readonly GlobalObjectKey IdHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*k9ijGMosVdyQhU1RLjD9Ug");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zsEew9xGuzEXveQ9NeSQGg");
		internal static readonly GlobalObjectKey IdCreationBy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Nt1njACJ6cgitsvUl5W02A");
		internal static readonly GlobalObjectKey IdVersionId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*iEOehDV+9eaLR4iDtuQjsQ");
		internal static readonly GlobalObjectKey IdLogicalDatabases = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aYhdO44QTU6dE1Ev1YRstA");
		internal static readonly GlobalObjectKey IdDBCatalog = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*64zVSTq_dE2RfzLgIzIH8w");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*VswzZhAwpE6BV3uFPKexEw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("MainReference")]
		public bool ssMainReference;

		[System.Xml.Serialization.XmlElement("Filename")]
		public string ssFilename;

		[System.Xml.Serialization.XmlElement("InPack")]
		public bool ssInPack;

		[System.Xml.Serialization.XmlElement("Hash")]
		public string ssHash;

		[System.Xml.Serialization.XmlElement("Creation")]
		public DateTime ssCreation;

		[System.Xml.Serialization.XmlElement("CreationBy")]
		public string ssCreationBy;

		[System.Xml.Serialization.XmlElement("VersionId")]
		public int ssVersionId;

		[System.Xml.Serialization.XmlElement("LogicalDatabases")]
		public RLSolutionPack_SolutionLogicalDatabaseRecordList ssLogicalDatabases;

		[System.Xml.Serialization.XmlElement("DBCatalog")]
		public RCSolutionPack_SolutionDBCatalogRecord ssDBCatalog;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionVersionReferenceStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssName = "";
			ssMainReference = false;
			ssFilename = "";
			ssInPack = false;
			ssHash = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssCreationBy = "";
			ssVersionId = 0;
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssDBCatalog = new RCSolutionPack_SolutionDBCatalogRecord(null);
			ssDescription = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssDBCatalog.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUID = r.ReadText(index++, "SolutionPack_SolutionVersionReference.UID", "");
			ssKind = r.ReadText(index++, "SolutionPack_SolutionVersionReference.Kind", "");
			ssName = r.ReadText(index++, "SolutionPack_SolutionVersionReference.Name", "");
			ssMainReference = r.ReadBoolean(index++, "SolutionPack_SolutionVersionReference.MainReference", false);
			ssFilename = r.ReadText(index++, "SolutionPack_SolutionVersionReference.Filename", "");
			ssInPack = r.ReadBoolean(index++, "SolutionPack_SolutionVersionReference.InPack", false);
			ssHash = r.ReadText(index++, "SolutionPack_SolutionVersionReference.Hash", "");
			ssCreation = r.ReadDateTime(index++, "SolutionPack_SolutionVersionReference.Creation", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreationBy = r.ReadText(index++, "SolutionPack_SolutionVersionReference.CreationBy", "");
			ssVersionId = r.ReadEntityReference(index++, "SolutionPack_SolutionVersionReference.VersionId", 0);
			ssDescription = r.ReadText(index++, "SolutionPack_SolutionVersionReference.Description", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionVersionReferenceStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionVersionReferenceStructure a, STSolutionPack_SolutionVersionReferenceStructure b) {
			if (a.ssUID != b.ssUID) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssMainReference != b.ssMainReference) return false;
			if (a.ssFilename != b.ssFilename) return false;
			if (a.ssInPack != b.ssInPack) return false;
			if (a.ssHash != b.ssHash) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssCreationBy != b.ssCreationBy) return false;
			if (a.ssVersionId != b.ssVersionId) return false;
			if (a.ssLogicalDatabases != b.ssLogicalDatabases) return false;
			if (a.ssDBCatalog != b.ssDBCatalog) return false;
			if (a.ssDescription != b.ssDescription) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionVersionReferenceStructure a, STSolutionPack_SolutionVersionReferenceStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionVersionReferenceStructure)) return false;
			return (this == (STSolutionPack_SolutionVersionReferenceStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssName.GetHashCode()
				^ ssMainReference.GetHashCode()
				^ ssFilename.GetHashCode()
				^ ssInPack.GetHashCode()
				^ ssHash.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssCreationBy.GetHashCode()
				^ ssVersionId.GetHashCode()
				^ ssLogicalDatabases.GetHashCode()
				^ ssDBCatalog.GetHashCode()
				^ ssDescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionVersionReferenceStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssName = "";
			ssMainReference = false;
			ssFilename = "";
			ssInPack = false;
			ssHash = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssCreationBy = "";
			ssVersionId = 0;
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssDBCatalog = new RCSolutionPack_SolutionDBCatalogRecord(null);
			ssDescription = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMainReference", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMainReference' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMainReference = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFilename", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFilename' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFilename = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInPack", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInPack' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInPack = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreationBy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreationBy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreationBy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersionId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersionId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersionId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogicalDatabases", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalDatabases' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalDatabases = (RLSolutionPack_SolutionLogicalDatabaseRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDBCatalog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDBCatalog' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDBCatalog = (RCSolutionPack_SolutionDBCatalogRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssLogicalDatabases.RecursiveReset();
			ssDBCatalog.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssLogicalDatabases.InternalRecursiveSave();
			ssDBCatalog.InternalRecursiveSave();
		}


		public STSolutionPack_SolutionVersionReferenceStructure Duplicate() {
			STSolutionPack_SolutionVersionReferenceStructure t;
			t.ssUID = this.ssUID;
			t.ssKind = this.ssKind;
			t.ssName = this.ssName;
			t.ssMainReference = this.ssMainReference;
			t.ssFilename = this.ssFilename;
			t.ssInPack = this.ssInPack;
			t.ssHash = this.ssHash;
			t.ssCreation = this.ssCreation;
			t.ssCreationBy = this.ssCreationBy;
			t.ssVersionId = this.ssVersionId;
			t.ssLogicalDatabases = (RLSolutionPack_SolutionLogicalDatabaseRecordList) this.ssLogicalDatabases.Duplicate();
			t.ssDBCatalog = (RCSolutionPack_SolutionDBCatalogRecord) this.ssDBCatalog.Duplicate();
			t.ssDescription = this.ssDescription;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MainReference")) VarValue.AppendAttribute(recordElem, "MainReference", ssMainReference, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "MainReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filename")) VarValue.AppendAttribute(recordElem, "Filename", ssFilename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".InPack")) VarValue.AppendAttribute(recordElem, "InPack", ssInPack, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "InPack");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Hash")) VarValue.AppendAttribute(recordElem, "Hash", ssHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Hash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreationBy")) VarValue.AppendAttribute(recordElem, "CreationBy", ssCreationBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CreationBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VersionId")) VarValue.AppendAttribute(recordElem, "VersionId", ssVersionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VersionId");
				ssLogicalDatabases.ToXml(this, recordElem, "LogicalDatabases", detailLevel - 1);
				ssDBCatalog.ToXml(this, recordElem, "DBCatalog", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "mainreference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MainReference")) variable.Value = ssMainReference; else variable.Optimized = true;
			} else if (head == "filename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filename")) variable.Value = ssFilename; else variable.Optimized = true;
			} else if (head == "inpack") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".InPack")) variable.Value = ssInPack; else variable.Optimized = true;
			} else if (head == "hash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Hash")) variable.Value = ssHash; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "creationby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreationBy")) variable.Value = ssCreationBy; else variable.Optimized = true;
			} else if (head == "versionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VersionId")) variable.Value = ssVersionId; else variable.Optimized = true;
			} else if (head == "logicaldatabases") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalDatabases")) variable.Value = ssLogicalDatabases; else variable.Optimized = true;
				variable.SetFieldName("logicaldatabases");
			} else if (head == "dbcatalog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBCatalog")) variable.Value = ssDBCatalog; else variable.Optimized = true;
				variable.SetFieldName("dbcatalog");
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUID) {
				return ssUID;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdMainReference) {
				return ssMainReference;
			} else if (key == IdFilename) {
				return ssFilename;
			} else if (key == IdInPack) {
				return ssInPack;
			} else if (key == IdHash) {
				return ssHash;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdCreationBy) {
				return ssCreationBy;
			} else if (key == IdVersionId) {
				return ssVersionId;
			} else if (key == IdLogicalDatabases) {
				return ssLogicalDatabases;
			} else if (key == IdDBCatalog) {
				return ssDBCatalog;
			} else if (key == IdDescription) {
				return ssDescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUID = (string) other.AttributeGet(IdUID);
			ssKind = (string) other.AttributeGet(IdKind);
			ssName = (string) other.AttributeGet(IdName);
			ssMainReference = (bool) other.AttributeGet(IdMainReference);
			ssFilename = (string) other.AttributeGet(IdFilename);
			ssInPack = (bool) other.AttributeGet(IdInPack);
			ssHash = (string) other.AttributeGet(IdHash);
			ssCreation = (DateTime) other.AttributeGet(IdCreation);
			ssCreationBy = (string) other.AttributeGet(IdCreationBy);
			ssVersionId = (int) other.AttributeGet(IdVersionId);
			ssLogicalDatabases = new RLSolutionPack_SolutionLogicalDatabaseRecordList();
			ssLogicalDatabases.FillFromOther((IOSList) other.AttributeGet(IdLogicalDatabases));
			ssDBCatalog.FillFromOther((IRecord) other.AttributeGet(IdDBCatalog));
			ssDescription = (string) other.AttributeGet(IdDescription);
		}
		public bool IsDefault() {
			STSolutionPack_SolutionVersionReferenceStructure defaultStruct = new STSolutionPack_SolutionVersionReferenceStructure(null);
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssMainReference != defaultStruct.ssMainReference) return false;
			if (this.ssFilename != defaultStruct.ssFilename) return false;
			if (this.ssInPack != defaultStruct.ssInPack) return false;
			if (this.ssHash != defaultStruct.ssHash) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssCreationBy != defaultStruct.ssCreationBy) return false;
			if (this.ssVersionId != defaultStruct.ssVersionId) return false;
			if (this.ssLogicalDatabases != null && this.ssLogicalDatabases.Length != 0) return false;
			if (this.ssDBCatalog != defaultStruct.ssDBCatalog) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			return true;
		}
	} // STSolutionPack_SolutionVersionReferenceStructure

	/// <summary>
	/// Structure <code>STSolutionPackStructure</code> that represents the Service Studio structure
	///  <code>SolutionPack</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPackStructure: ISerializable, ITypedRecord<STSolutionPackStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdSchema = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*T3b8swekP5CPPA6j_ejxdA");
		internal static readonly GlobalObjectKey IdHubServerVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Z74a37kAkKOyEP0RrmhqDA");
		internal static readonly GlobalObjectKey IdLastUpgradeVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7gS2WLbHxiBeJKGgEWl2nw");
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dwWmPFkOqNIDvra4Q6_rHg");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*fXjim4xmjbsGxhLcEG1fvQ");
		internal static readonly GlobalObjectKey IdSolutions = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WoHkZVpKIj2VmRDxu5VYhQ");
		internal static readonly GlobalObjectKey IdIsApplicationPack = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9ViDMmuYV0a19KKGGyCtHA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Schema")]
		public int ssSchema;

		[System.Xml.Serialization.XmlElement("HubServerVersion")]
		public string ssHubServerVersion;

		[System.Xml.Serialization.XmlElement("LastUpgradeVersion")]
		public string ssLastUpgradeVersion;

		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Creation")]
		public DateTime ssCreation;

		[System.Xml.Serialization.XmlElement("Solutions")]
		public RLSolutionPack_SolutionRecordList ssSolutions;

		[System.Xml.Serialization.XmlElement("IsApplicationPack")]
		public bool ssIsApplicationPack;


		public BitArray OptimizedAttributes;

		public STSolutionPackStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSchema = 0;
			ssHubServerVersion = "";
			ssLastUpgradeVersion = "";
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSolutions = new RLSolutionPack_SolutionRecordList();
			ssIsApplicationPack = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSchema = r.ReadInteger(index++, "SolutionPack.Schema", 0);
			ssHubServerVersion = r.ReadText(index++, "SolutionPack.HubServerVersion", "");
			ssLastUpgradeVersion = r.ReadText(index++, "SolutionPack.LastUpgradeVersion", "");
			ssUID = r.ReadText(index++, "SolutionPack.UID", "");
			ssCreation = r.ReadDateTime(index++, "SolutionPack.Creation", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIsApplicationPack = r.ReadBoolean(index++, "SolutionPack.IsApplicationPack", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPackStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPackStructure a, STSolutionPackStructure b) {
			if (a.ssSchema != b.ssSchema) return false;
			if (a.ssHubServerVersion != b.ssHubServerVersion) return false;
			if (a.ssLastUpgradeVersion != b.ssLastUpgradeVersion) return false;
			if (a.ssUID != b.ssUID) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssSolutions != b.ssSolutions) return false;
			if (a.ssIsApplicationPack != b.ssIsApplicationPack) return false;
			return true;
		}

		public static bool operator != (STSolutionPackStructure a, STSolutionPackStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPackStructure)) return false;
			return (this == (STSolutionPackStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSchema.GetHashCode()
				^ ssHubServerVersion.GetHashCode()
				^ ssLastUpgradeVersion.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssSolutions.GetHashCode()
				^ ssIsApplicationPack.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPackStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSchema = 0;
			ssHubServerVersion = "";
			ssLastUpgradeVersion = "";
			ssUID = "";
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSolutions = new RLSolutionPack_SolutionRecordList();
			ssIsApplicationPack = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSchema", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSchema' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSchema = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHubServerVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHubServerVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHubServerVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLastUpgradeVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLastUpgradeVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLastUpgradeVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSolutions", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSolutions' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSolutions = (RLSolutionPack_SolutionRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsApplicationPack", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsApplicationPack' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsApplicationPack = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSolutions.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSolutions.InternalRecursiveSave();
		}


		public STSolutionPackStructure Duplicate() {
			STSolutionPackStructure t;
			t.ssSchema = this.ssSchema;
			t.ssHubServerVersion = this.ssHubServerVersion;
			t.ssLastUpgradeVersion = this.ssLastUpgradeVersion;
			t.ssUID = this.ssUID;
			t.ssCreation = this.ssCreation;
			t.ssSolutions = (RLSolutionPack_SolutionRecordList) this.ssSolutions.Duplicate();
			t.ssIsApplicationPack = this.ssIsApplicationPack;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Schema")) VarValue.AppendAttribute(recordElem, "Schema", ssSchema, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Schema");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HubServerVersion")) VarValue.AppendAttribute(recordElem, "HubServerVersion", ssHubServerVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HubServerVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpgradeVersion")) VarValue.AppendAttribute(recordElem, "LastUpgradeVersion", ssLastUpgradeVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpgradeVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				ssSolutions.ToXml(this, recordElem, "Solutions", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsApplicationPack")) VarValue.AppendAttribute(recordElem, "IsApplicationPack", ssIsApplicationPack, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsApplicationPack");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "schema") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Schema")) variable.Value = ssSchema; else variable.Optimized = true;
			} else if (head == "hubserverversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HubServerVersion")) variable.Value = ssHubServerVersion; else variable.Optimized = true;
			} else if (head == "lastupgradeversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpgradeVersion")) variable.Value = ssLastUpgradeVersion; else variable.Optimized = true;
			} else if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "solutions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Solutions")) variable.Value = ssSolutions; else variable.Optimized = true;
				variable.SetFieldName("solutions");
			} else if (head == "isapplicationpack") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsApplicationPack")) variable.Value = ssIsApplicationPack; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSchema) {
				return ssSchema;
			} else if (key == IdHubServerVersion) {
				return ssHubServerVersion;
			} else if (key == IdLastUpgradeVersion) {
				return ssLastUpgradeVersion;
			} else if (key == IdUID) {
				return ssUID;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdSolutions) {
				return ssSolutions;
			} else if (key == IdIsApplicationPack) {
				return ssIsApplicationPack;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSchema = (int) other.AttributeGet(IdSchema);
			ssHubServerVersion = (string) other.AttributeGet(IdHubServerVersion);
			ssLastUpgradeVersion = (string) other.AttributeGet(IdLastUpgradeVersion);
			ssUID = (string) other.AttributeGet(IdUID);
			ssCreation = (DateTime) other.AttributeGet(IdCreation);
			ssSolutions = new RLSolutionPack_SolutionRecordList();
			ssSolutions.FillFromOther((IOSList) other.AttributeGet(IdSolutions));
			ssIsApplicationPack = (bool) other.AttributeGet(IdIsApplicationPack);
		}
		public bool IsDefault() {
			STSolutionPackStructure defaultStruct = new STSolutionPackStructure(null);
			if (this.ssSchema != defaultStruct.ssSchema) return false;
			if (this.ssHubServerVersion != defaultStruct.ssHubServerVersion) return false;
			if (this.ssLastUpgradeVersion != defaultStruct.ssLastUpgradeVersion) return false;
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssSolutions != null && this.ssSolutions.Length != 0) return false;
			if (this.ssIsApplicationPack != defaultStruct.ssIsApplicationPack) return false;
			return true;
		}
	} // STSolutionPackStructure

	/// <summary>
	/// Structure <code>STSolutionPack_FileStructure</code> that represents the Service Studio structure
	///  <code>SolutionPack_File</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_FileStructure: ISerializable, ITypedRecord<STSolutionPack_FileStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdFilename = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*C0XsMXT11PnrQAs0f90hfw");
		internal static readonly GlobalObjectKey IdDirectory = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*p5TnzBOQmMO97zuMmiC+nw");
		internal static readonly GlobalObjectKey IdDateTime = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Mxwv82U0H_gRKKhWgcv2Jg");
		internal static readonly GlobalObjectKey IdSize = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ktK0ERE6PtccPaJya8nziQ");
		internal static readonly GlobalObjectKey IdCompressedSize = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KbcCvUKhrVbLCoZDQY3fOA");
		internal static readonly GlobalObjectKey IdContent = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ooEi36lsje3FfYmY+gFkfQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Filename")]
		public string ssFilename;

		[System.Xml.Serialization.XmlElement("Directory")]
		public bool ssDirectory;

		[System.Xml.Serialization.XmlElement("DateTime")]
		public DateTime ssDateTime;

		[System.Xml.Serialization.XmlElement("Size")]
		public int ssSize;

		[System.Xml.Serialization.XmlElement("CompressedSize")]
		public int ssCompressedSize;

		[System.Xml.Serialization.XmlElement("Content")]
		public byte[] ssContent;


		public BitArray OptimizedAttributes;

		public STSolutionPack_FileStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFilename = "";
			ssDirectory = false;
			ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSize = 0;
			ssCompressedSize = 0;
			ssContent = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssFilename = r.ReadText(index++, "SolutionPack_File.Filename", "");
			ssDirectory = r.ReadBoolean(index++, "SolutionPack_File.Directory", false);
			ssDateTime = r.ReadDateTime(index++, "SolutionPack_File.DateTime", new DateTime(1900, 1, 1, 0, 0, 0));
			ssSize = r.ReadInteger(index++, "SolutionPack_File.Size", 0);
			ssCompressedSize = r.ReadInteger(index++, "SolutionPack_File.CompressedSize", 0);
			ssContent = r.ReadBinaryData(index++, "SolutionPack_File.Content", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_FileStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_FileStructure a, STSolutionPack_FileStructure b) {
			if (a.ssFilename != b.ssFilename) return false;
			if (a.ssDirectory != b.ssDirectory) return false;
			if (a.ssDateTime != b.ssDateTime) return false;
			if (a.ssSize != b.ssSize) return false;
			if (a.ssCompressedSize != b.ssCompressedSize) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssContent, b.ssContent)) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_FileStructure a, STSolutionPack_FileStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_FileStructure)) return false;
			return (this == (STSolutionPack_FileStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFilename.GetHashCode()
				^ ssDirectory.GetHashCode()
				^ ssDateTime.GetHashCode()
				^ ssSize.GetHashCode()
				^ ssCompressedSize.GetHashCode()
				^ ssContent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_FileStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFilename = "";
			ssDirectory = false;
			ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSize = 0;
			ssCompressedSize = 0;
			ssContent = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssFilename", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFilename' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFilename = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDirectory", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDirectory' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDirectory = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDateTime", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDateTime' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDateTime = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSize", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSize' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSize = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCompressedSize", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCompressedSize' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCompressedSize = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContent = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSolutionPack_FileStructure Duplicate() {
			STSolutionPack_FileStructure t;
			t.ssFilename = this.ssFilename;
			t.ssDirectory = this.ssDirectory;
			t.ssDateTime = this.ssDateTime;
			t.ssSize = this.ssSize;
			t.ssCompressedSize = this.ssCompressedSize;
			if (this.ssContent != null) {
				t.ssContent = (byte[]) this.ssContent.Clone();
			} else {
				t.ssContent = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filename")) VarValue.AppendAttribute(recordElem, "Filename", ssFilename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Directory")) VarValue.AppendAttribute(recordElem, "Directory", ssDirectory, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Directory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateTime")) VarValue.AppendAttribute(recordElem, "DateTime", ssDateTime, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "DateTime");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Size")) VarValue.AppendAttribute(recordElem, "Size", ssSize, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Size");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompressedSize")) VarValue.AppendAttribute(recordElem, "CompressedSize", ssCompressedSize, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CompressedSize");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Content")) VarValue.AppendAttribute(recordElem, "Content", ssContent, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Content");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "filename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filename")) variable.Value = ssFilename; else variable.Optimized = true;
			} else if (head == "directory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Directory")) variable.Value = ssDirectory; else variable.Optimized = true;
			} else if (head == "datetime") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateTime")) variable.Value = ssDateTime; else variable.Optimized = true;
			} else if (head == "size") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Size")) variable.Value = ssSize; else variable.Optimized = true;
			} else if (head == "compressedsize") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompressedSize")) variable.Value = ssCompressedSize; else variable.Optimized = true;
			} else if (head == "content") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Content")) variable.Value = ssContent; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFilename) {
				return ssFilename;
			} else if (key == IdDirectory) {
				return ssDirectory;
			} else if (key == IdDateTime) {
				return ssDateTime;
			} else if (key == IdSize) {
				return ssSize;
			} else if (key == IdCompressedSize) {
				return ssCompressedSize;
			} else if (key == IdContent) {
				return ssContent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFilename = (string) other.AttributeGet(IdFilename);
			ssDirectory = (bool) other.AttributeGet(IdDirectory);
			ssDateTime = (DateTime) other.AttributeGet(IdDateTime);
			ssSize = (int) other.AttributeGet(IdSize);
			ssCompressedSize = (int) other.AttributeGet(IdCompressedSize);
			ssContent = (byte[]) other.AttributeGet(IdContent);
		}
		public bool IsDefault() {
			STSolutionPack_FileStructure defaultStruct = new STSolutionPack_FileStructure(null);
			if (this.ssFilename != defaultStruct.ssFilename) return false;
			if (this.ssDirectory != defaultStruct.ssDirectory) return false;
			if (this.ssDateTime != defaultStruct.ssDateTime) return false;
			if (this.ssSize != defaultStruct.ssSize) return false;
			if (this.ssCompressedSize != defaultStruct.ssCompressedSize) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssContent, defaultStruct.ssContent)) return false;
			return true;
		}
	} // STSolutionPack_FileStructure

	/// <summary>
	/// Structure <code>STEspaceInfoStructure</code> that represents the Service Studio structure
	///  <code>EspaceInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEspaceInfoStructure: ISerializable, ITypedRecord<STEspaceInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*o58qyS+CJ5rDcupVyJ9tRA");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ssZtHSkzfuMmKxmTlT1Q6A");
		internal static readonly GlobalObjectKey Idstatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*C6bbKfyGYMraCtAOhe5y8g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("status")]
		public string ssstatus;


		public BitArray OptimizedAttributes;

		public STEspaceInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssstatus = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "EspaceInfo.Name", "");
			ssKey = r.ReadText(index++, "EspaceInfo.Key", "");
			ssstatus = r.ReadText(index++, "EspaceInfo.status", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEspaceInfoStructure r) {
			this = r;
		}


		public static bool operator == (STEspaceInfoStructure a, STEspaceInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssstatus != b.ssstatus) return false;
			return true;
		}

		public static bool operator != (STEspaceInfoStructure a, STEspaceInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEspaceInfoStructure)) return false;
			return (this == (STEspaceInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssstatus.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEspaceInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssstatus = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssstatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssstatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssstatus = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEspaceInfoStructure Duplicate() {
			STEspaceInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssstatus = this.ssstatus;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".status")) VarValue.AppendAttribute(recordElem, "status", ssstatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "status");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".status")) variable.Value = ssstatus; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == Idstatus) {
				return ssstatus;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssstatus = (string) other.AttributeGet(Idstatus);
		}
		public bool IsDefault() {
			STEspaceInfoStructure defaultStruct = new STEspaceInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssstatus != defaultStruct.ssstatus) return false;
			return true;
		}
	} // STEspaceInfoStructure

	/// <summary>
	/// Structure <code>STReferenceStructure</code> that represents the Service Studio structure
	///  <code>Reference</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STReferenceStructure: ISerializable, ITypedRecord<STReferenceStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Vc5yNzc6gPKGD0aP44ZUwg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*C+TEM7gRbxrmz_b93ZRunA");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*XiH4f2LCV4alKcbNDPooeg");
		internal static readonly GlobalObjectKey IdVersionId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*o2OyoUFp49UbkNcA+6KSxg");
		internal static readonly GlobalObjectKey IdComponentId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UsX9+kE6EUisZ7BWGKVOew");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("VersionId")]
		public int ssVersionId;

		[System.Xml.Serialization.XmlElement("ComponentId")]
		public int ssComponentId;


		public BitArray OptimizedAttributes;

		public STReferenceStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssVersionId = 0;
			ssComponentId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "Reference.Name", "");
			ssKey = r.ReadText(index++, "Reference.Key", "");
			ssKind = r.ReadText(index++, "Reference.Kind", "");
			ssVersionId = r.ReadEntityReference(index++, "Reference.VersionId", 0);
			ssComponentId = r.ReadEntityReference(index++, "Reference.ComponentId", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STReferenceStructure r) {
			this = r;
		}


		public static bool operator == (STReferenceStructure a, STReferenceStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssVersionId != b.ssVersionId) return false;
			if (a.ssComponentId != b.ssComponentId) return false;
			return true;
		}

		public static bool operator != (STReferenceStructure a, STReferenceStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STReferenceStructure)) return false;
			return (this == (STReferenceStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssVersionId.GetHashCode()
				^ ssComponentId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STReferenceStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssVersionId = 0;
			ssComponentId = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersionId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersionId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersionId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssComponentId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssComponentId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssComponentId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STReferenceStructure Duplicate() {
			STReferenceStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssKind = this.ssKind;
			t.ssVersionId = this.ssVersionId;
			t.ssComponentId = this.ssComponentId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VersionId")) VarValue.AppendAttribute(recordElem, "VersionId", ssVersionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "VersionId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ComponentId")) VarValue.AppendAttribute(recordElem, "ComponentId", ssComponentId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ComponentId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "versionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VersionId")) variable.Value = ssVersionId; else variable.Optimized = true;
			} else if (head == "componentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ComponentId")) variable.Value = ssComponentId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdVersionId) {
				return ssVersionId;
			} else if (key == IdComponentId) {
				return ssComponentId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssKind = (string) other.AttributeGet(IdKind);
			ssVersionId = (int) other.AttributeGet(IdVersionId);
			ssComponentId = (int) other.AttributeGet(IdComponentId);
		}
		public bool IsDefault() {
			STReferenceStructure defaultStruct = new STReferenceStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssVersionId != defaultStruct.ssVersionId) return false;
			if (this.ssComponentId != defaultStruct.ssComponentId) return false;
			return true;
		}
	} // STReferenceStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionLogicalDatabaseStructure</code> that represents the Service
	///  Studio structure <code>SolutionPack_SolutionLogicalDatabase</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionLogicalDatabaseStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionLogicalDatabaseStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdLogicalDatabase = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dBN9OOTRHNWDCW7_WnSBeA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LogicalDatabase")]
		public string ssLogicalDatabase;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionLogicalDatabaseStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLogicalDatabase = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLogicalDatabase = r.ReadText(index++, "SolutionPack_SolutionLogicalDatabase.LogicalDatabase", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionLogicalDatabaseStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionLogicalDatabaseStructure a, STSolutionPack_SolutionLogicalDatabaseStructure b) {
			if (a.ssLogicalDatabase != b.ssLogicalDatabase) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionLogicalDatabaseStructure a, STSolutionPack_SolutionLogicalDatabaseStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionLogicalDatabaseStructure)) return false;
			return (this == (STSolutionPack_SolutionLogicalDatabaseStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLogicalDatabase.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionLogicalDatabaseStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLogicalDatabase = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssLogicalDatabase", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalDatabase' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalDatabase = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSolutionPack_SolutionLogicalDatabaseStructure Duplicate() {
			STSolutionPack_SolutionLogicalDatabaseStructure t;
			t.ssLogicalDatabase = this.ssLogicalDatabase;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogicalDatabase")) VarValue.AppendAttribute(recordElem, "LogicalDatabase", ssLogicalDatabase, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogicalDatabase");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "logicaldatabase") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalDatabase")) variable.Value = ssLogicalDatabase; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLogicalDatabase) {
				return ssLogicalDatabase;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLogicalDatabase = (string) other.AttributeGet(IdLogicalDatabase);
		}
		public bool IsDefault() {
			STSolutionPack_SolutionLogicalDatabaseStructure defaultStruct = new STSolutionPack_SolutionLogicalDatabaseStructure(null);
			if (this.ssLogicalDatabase != defaultStruct.ssLogicalDatabase) return false;
			return true;
		}
	} // STSolutionPack_SolutionLogicalDatabaseStructure

	/// <summary>
	/// Structure <code>STLinkStructure</code> that represents the Service Studio structure
	///  <code>Link</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STLinkStructure: ISerializable, ITypedRecord<STLinkStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdLogicalName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GrjlWImi8eVYVHRTOuB9EQ");
		internal static readonly GlobalObjectKey IdPhysicalName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jLjC3Zj+g5I54265vh_Xpw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("LogicalName")]
		public string ssLogicalName;

		[System.Xml.Serialization.XmlElement("PhysicalName")]
		public string ssPhysicalName;


		public BitArray OptimizedAttributes;

		public STLinkStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLogicalName = "";
			ssPhysicalName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLogicalName = r.ReadText(index++, "Link.LogicalName", "");
			ssPhysicalName = r.ReadText(index++, "Link.PhysicalName", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STLinkStructure r) {
			this = r;
		}


		public static bool operator == (STLinkStructure a, STLinkStructure b) {
			if (a.ssLogicalName != b.ssLogicalName) return false;
			if (a.ssPhysicalName != b.ssPhysicalName) return false;
			return true;
		}

		public static bool operator != (STLinkStructure a, STLinkStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STLinkStructure)) return false;
			return (this == (STLinkStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLogicalName.GetHashCode()
				^ ssPhysicalName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STLinkStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLogicalName = "";
			ssPhysicalName = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssLogicalName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPhysicalName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPhysicalName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPhysicalName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STLinkStructure Duplicate() {
			STLinkStructure t;
			t.ssLogicalName = this.ssLogicalName;
			t.ssPhysicalName = this.ssPhysicalName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogicalName")) VarValue.AppendAttribute(recordElem, "LogicalName", ssLogicalName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogicalName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PhysicalName")) VarValue.AppendAttribute(recordElem, "PhysicalName", ssPhysicalName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PhysicalName");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "logicalname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalName")) variable.Value = ssLogicalName; else variable.Optimized = true;
			} else if (head == "physicalname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PhysicalName")) variable.Value = ssPhysicalName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLogicalName) {
				return ssLogicalName;
			} else if (key == IdPhysicalName) {
				return ssPhysicalName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLogicalName = (string) other.AttributeGet(IdLogicalName);
			ssPhysicalName = (string) other.AttributeGet(IdPhysicalName);
		}
		public bool IsDefault() {
			STLinkStructure defaultStruct = new STLinkStructure(null);
			if (this.ssLogicalName != defaultStruct.ssLogicalName) return false;
			if (this.ssPhysicalName != defaultStruct.ssPhysicalName) return false;
			return true;
		}
	} // STLinkStructure

	/// <summary>
	/// Structure <code>STAbstractRecordStructure</code> that represents the Service Studio structure
	///  <code>AbstractRecord</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAbstractRecordStructure: ISerializable, ITypedRecord<STAbstractRecordStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdFields = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AFj_GQLNM30_0tKL3cYaEA");
		internal static readonly GlobalObjectKey IdTag = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jd4kgPu3Gq3ONpDvdaLHhw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Fields")]
		public RLAbstractFieldRecordList ssFields;

		[System.Xml.Serialization.XmlElement("Tag")]
		public string ssTag;


		public BitArray OptimizedAttributes;

		public STAbstractRecordStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFields = new RLAbstractFieldRecordList();
			ssTag = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssTag = r.ReadText(index++, "AbstractRecord.Tag", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAbstractRecordStructure r) {
			this = r;
		}


		public static bool operator == (STAbstractRecordStructure a, STAbstractRecordStructure b) {
			if (a.ssFields != b.ssFields) return false;
			if (a.ssTag != b.ssTag) return false;
			return true;
		}

		public static bool operator != (STAbstractRecordStructure a, STAbstractRecordStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAbstractRecordStructure)) return false;
			return (this == (STAbstractRecordStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFields.GetHashCode()
				^ ssTag.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAbstractRecordStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFields = new RLAbstractFieldRecordList();
			ssTag = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssFields", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFields' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFields = (RLAbstractFieldRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTag' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTag = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssFields.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssFields.InternalRecursiveSave();
		}


		public STAbstractRecordStructure Duplicate() {
			STAbstractRecordStructure t;
			t.ssFields = (RLAbstractFieldRecordList) this.ssFields.Duplicate();
			t.ssTag = this.ssTag;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssFields.ToXml(this, recordElem, "Fields", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Tag")) VarValue.AppendAttribute(recordElem, "Tag", ssTag, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Tag");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "fields") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Fields")) variable.Value = ssFields; else variable.Optimized = true;
				variable.SetFieldName("fields");
			} else if (head == "tag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tag")) variable.Value = ssTag; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFields) {
				return ssFields;
			} else if (key == IdTag) {
				return ssTag;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFields = new RLAbstractFieldRecordList();
			ssFields.FillFromOther((IOSList) other.AttributeGet(IdFields));
			ssTag = (string) other.AttributeGet(IdTag);
		}
		public bool IsDefault() {
			STAbstractRecordStructure defaultStruct = new STAbstractRecordStructure(null);
			if (this.ssFields != null && this.ssFields.Length != 0) return false;
			if (this.ssTag != defaultStruct.ssTag) return false;
			return true;
		}
	} // STAbstractRecordStructure

	/// <summary>
	/// Structure <code>STAbstractFieldStructure</code> that represents the Service Studio structure
	///  <code>AbstractField</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAbstractFieldStructure: ISerializable, ITypedRecord<STAbstractFieldStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GFJP6CeWP9qlpukgs+lC4w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Text")]
		public string ssText;


		public BitArray OptimizedAttributes;

		public STAbstractFieldStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssText = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssText = r.ReadText(index++, "AbstractField.Text", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAbstractFieldStructure r) {
			this = r;
		}


		public static bool operator == (STAbstractFieldStructure a, STAbstractFieldStructure b) {
			if (a.ssText != b.ssText) return false;
			return true;
		}

		public static bool operator != (STAbstractFieldStructure a, STAbstractFieldStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAbstractFieldStructure)) return false;
			return (this == (STAbstractFieldStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssText.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAbstractFieldStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssText = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssText", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssText' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssText = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAbstractFieldStructure Duplicate() {
			STAbstractFieldStructure t;
			t.ssText = this.ssText;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Text")) VarValue.AppendAttribute(recordElem, "Text", ssText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Text");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssText; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdText) {
				return ssText;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssText = (string) other.AttributeGet(IdText);
		}
		public bool IsDefault() {
			STAbstractFieldStructure defaultStruct = new STAbstractFieldStructure(null);
			if (this.ssText != defaultStruct.ssText) return false;
			return true;
		}
	} // STAbstractFieldStructure

	/// <summary>
	/// Structure <code>STFeatureStructure</code> that represents the Service Studio structure
	///  <code>Feature</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STFeatureStructure: ISerializable, ITypedRecord<STFeatureStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7Mm7Y3yGViMoNvaKOm_vPA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public string ssId;


		public BitArray OptimizedAttributes;

		public STFeatureStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "Feature.Id", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STFeatureStructure r) {
			this = r;
		}


		public static bool operator == (STFeatureStructure a, STFeatureStructure b) {
			if (a.ssId != b.ssId) return false;
			return true;
		}

		public static bool operator != (STFeatureStructure a, STFeatureStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STFeatureStructure)) return false;
			return (this == (STFeatureStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STFeatureStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STFeatureStructure Duplicate() {
			STFeatureStructure t;
			t.ssId = this.ssId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
		}
		public bool IsDefault() {
			STFeatureStructure defaultStruct = new STFeatureStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			return true;
		}
	} // STFeatureStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SolutionDBCatalogStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_SolutionDBCatalog</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SolutionDBCatalogStructure: ISerializable, ITypedRecord<STSolutionPack_SolutionDBCatalogStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdDbCatalog = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wYJ+WAlDJU+VHNDXX5KWjQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DbCatalog")]
		public string ssDbCatalog;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SolutionDBCatalogStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDbCatalog = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDbCatalog = r.ReadText(index++, "SolutionPack_SolutionDBCatalog.DbCatalog", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SolutionDBCatalogStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SolutionDBCatalogStructure a, STSolutionPack_SolutionDBCatalogStructure b) {
			if (a.ssDbCatalog != b.ssDbCatalog) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SolutionDBCatalogStructure a, STSolutionPack_SolutionDBCatalogStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SolutionDBCatalogStructure)) return false;
			return (this == (STSolutionPack_SolutionDBCatalogStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDbCatalog.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SolutionDBCatalogStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDbCatalog = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDbCatalog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDbCatalog' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDbCatalog = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSolutionPack_SolutionDBCatalogStructure Duplicate() {
			STSolutionPack_SolutionDBCatalogStructure t;
			t.ssDbCatalog = this.ssDbCatalog;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DbCatalog")) VarValue.AppendAttribute(recordElem, "DbCatalog", ssDbCatalog, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DbCatalog");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "dbcatalog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DbCatalog")) variable.Value = ssDbCatalog; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDbCatalog) {
				return ssDbCatalog;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDbCatalog = (string) other.AttributeGet(IdDbCatalog);
		}
		public bool IsDefault() {
			STSolutionPack_SolutionDBCatalogStructure defaultStruct = new STSolutionPack_SolutionDBCatalogStructure(null);
			if (this.ssDbCatalog != defaultStruct.ssDbCatalog) return false;
			return true;
		}
	} // STSolutionPack_SolutionDBCatalogStructure

	/// <summary>
	/// Structure <code>STIntegerStructure</code> that represents the Service Studio structure
	///  <code>Integer</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STIntegerStructure: ISerializable, ITypedRecord<STIntegerStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdInteger = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Cj9CTrPVIUS3da5ptUAh0Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Integer")]
		public int ssInteger;


		public BitArray OptimizedAttributes;

		public STIntegerStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssInteger = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssInteger = r.ReadInteger(index++, "Integer.Integer", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STIntegerStructure r) {
			this = r;
		}


		public static bool operator == (STIntegerStructure a, STIntegerStructure b) {
			if (a.ssInteger != b.ssInteger) return false;
			return true;
		}

		public static bool operator != (STIntegerStructure a, STIntegerStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STIntegerStructure)) return false;
			return (this == (STIntegerStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssInteger.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STIntegerStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssInteger = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssInteger", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInteger' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInteger = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STIntegerStructure Duplicate() {
			STIntegerStructure t;
			t.ssInteger = this.ssInteger;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Integer")) VarValue.AppendAttribute(recordElem, "Integer", ssInteger, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Integer");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "integer") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Integer")) variable.Value = ssInteger; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInteger) {
				return ssInteger;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssInteger = (int) other.AttributeGet(IdInteger);
		}
		public bool IsDefault() {
			STIntegerStructure defaultStruct = new STIntegerStructure(null);
			if (this.ssInteger != defaultStruct.ssInteger) return false;
			return true;
		}
	} // STIntegerStructure

	/// <summary>
	/// Structure <code>STTextStructure</code> that represents the Service Studio structure
	///  <code>Text</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STTextStructure: ISerializable, ITypedRecord<STTextStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdText = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3c0Jilv1jkiSNb6_5L0LWA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Text")]
		public string ssText;


		public BitArray OptimizedAttributes;

		public STTextStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssText = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssText = r.ReadText(index++, "Text.Text", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STTextStructure r) {
			this = r;
		}


		public static bool operator == (STTextStructure a, STTextStructure b) {
			if (a.ssText != b.ssText) return false;
			return true;
		}

		public static bool operator != (STTextStructure a, STTextStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STTextStructure)) return false;
			return (this == (STTextStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssText.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STTextStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssText = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssText", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssText' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssText = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STTextStructure Duplicate() {
			STTextStructure t;
			t.ssText = this.ssText;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Text")) VarValue.AppendAttribute(recordElem, "Text", ssText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Text");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "text") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Text")) variable.Value = ssText; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdText) {
				return ssText;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssText = (string) other.AttributeGet(IdText);
		}
		public bool IsDefault() {
			STTextStructure defaultStruct = new STTextStructure(null);
			if (this.ssText != defaultStruct.ssText) return false;
			return true;
		}
	} // STTextStructure

	/// <summary>
	/// Structure <code>STBooleanStructure</code> that represents the Service Studio structure
	///  <code>Boolean</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STBooleanStructure: ISerializable, ITypedRecord<STBooleanStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wGJYempZGUOknInQQUa7cA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Boolean")]
		public bool ssBoolean;


		public BitArray OptimizedAttributes;

		public STBooleanStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssBoolean = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssBoolean = r.ReadBoolean(index++, "Boolean.Boolean", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STBooleanStructure r) {
			this = r;
		}


		public static bool operator == (STBooleanStructure a, STBooleanStructure b) {
			if (a.ssBoolean != b.ssBoolean) return false;
			return true;
		}

		public static bool operator != (STBooleanStructure a, STBooleanStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STBooleanStructure)) return false;
			return (this == (STBooleanStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STBooleanStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssBoolean = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssBoolean", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBoolean' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBoolean = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STBooleanStructure Duplicate() {
			STBooleanStructure t;
			t.ssBoolean = this.ssBoolean;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Boolean")) VarValue.AppendAttribute(recordElem, "Boolean", ssBoolean, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Boolean");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssBoolean; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBoolean) {
				return ssBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssBoolean = (bool) other.AttributeGet(IdBoolean);
		}
		public bool IsDefault() {
			STBooleanStructure defaultStruct = new STBooleanStructure(null);
			if (this.ssBoolean != defaultStruct.ssBoolean) return false;
			return true;
		}
	} // STBooleanStructure

	/// <summary>
	/// Structure <code>STDecimalStructure</code> that represents the Service Studio structure
	///  <code>Decimal</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDecimalStructure: ISerializable, ITypedRecord<STDecimalStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdDecimal = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*lNJXTiUo3kWsYhkET2iZaQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Decimal")]
		public decimal ssDecimal;


		public BitArray OptimizedAttributes;

		public STDecimalStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDecimal = 0.0M;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDecimal = r.ReadDecimal(index++, "Decimal.Decimal", 0.0M);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDecimalStructure r) {
			this = r;
		}


		public static bool operator == (STDecimalStructure a, STDecimalStructure b) {
			if (a.ssDecimal != b.ssDecimal) return false;
			return true;
		}

		public static bool operator != (STDecimalStructure a, STDecimalStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDecimalStructure)) return false;
			return (this == (STDecimalStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDecimal.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDecimalStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDecimal = 0.0M;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDecimal", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDecimal' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDecimal = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDecimalStructure Duplicate() {
			STDecimalStructure t;
			t.ssDecimal = this.ssDecimal;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Decimal")) VarValue.AppendAttribute(recordElem, "Decimal", ssDecimal, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Decimal");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "decimal") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Decimal")) variable.Value = ssDecimal; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDecimal) {
				return ssDecimal;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDecimal = (decimal) other.AttributeGet(IdDecimal);
		}
		public bool IsDefault() {
			STDecimalStructure defaultStruct = new STDecimalStructure(null);
			if (this.ssDecimal != defaultStruct.ssDecimal) return false;
			return true;
		}
	} // STDecimalStructure

	/// <summary>
	/// Structure <code>STDateTimeStructure</code> that represents the Service Studio structure
	///  <code>DateTime</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDateTimeStructure: ISerializable, ITypedRecord<STDateTimeStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdDateTime = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4oebAHHG+0yBDe38IJoZAw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DateTime")]
		public DateTime ssDateTime;


		public BitArray OptimizedAttributes;

		public STDateTimeStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDateTime = r.ReadDateTime(index++, "DateTime.DateTime", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDateTimeStructure r) {
			this = r;
		}


		public static bool operator == (STDateTimeStructure a, STDateTimeStructure b) {
			if (a.ssDateTime != b.ssDateTime) return false;
			return true;
		}

		public static bool operator != (STDateTimeStructure a, STDateTimeStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDateTimeStructure)) return false;
			return (this == (STDateTimeStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDateTime.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDateTimeStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDateTime", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDateTime' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDateTime = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDateTimeStructure Duplicate() {
			STDateTimeStructure t;
			t.ssDateTime = this.ssDateTime;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DateTime")) VarValue.AppendAttribute(recordElem, "DateTime", ssDateTime, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "DateTime");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "datetime") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DateTime")) variable.Value = ssDateTime; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDateTime) {
				return ssDateTime;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDateTime = (DateTime) other.AttributeGet(IdDateTime);
		}
		public bool IsDefault() {
			STDateTimeStructure defaultStruct = new STDateTimeStructure(null);
			if (this.ssDateTime != defaultStruct.ssDateTime) return false;
			return true;
		}
	} // STDateTimeStructure

	/// <summary>
	/// Structure <code>STBinaryDataStructure</code> that represents the Service Studio structure
	///  <code>BinaryData</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STBinaryDataStructure: ISerializable, ITypedRecord<STBinaryDataStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdBin = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jtrV+HHnw0S27IAQnL3tKA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Bin")]
		public byte[] ssBin;


		public BitArray OptimizedAttributes;

		public STBinaryDataStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssBin = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssBin = r.ReadBinaryData(index++, "BinaryData.Bin", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STBinaryDataStructure r) {
			this = r;
		}


		public static bool operator == (STBinaryDataStructure a, STBinaryDataStructure b) {
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssBin, b.ssBin)) return false;
			return true;
		}

		public static bool operator != (STBinaryDataStructure a, STBinaryDataStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STBinaryDataStructure)) return false;
			return (this == (STBinaryDataStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssBin.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STBinaryDataStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssBin = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssBin", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBin' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBin = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STBinaryDataStructure Duplicate() {
			STBinaryDataStructure t;
			if (this.ssBin != null) {
				t.ssBin = (byte[]) this.ssBin.Clone();
			} else {
				t.ssBin = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Bin")) VarValue.AppendAttribute(recordElem, "Bin", ssBin, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Bin");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "bin") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Bin")) variable.Value = ssBin; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBin) {
				return ssBin;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssBin = (byte[]) other.AttributeGet(IdBin);
		}
		public bool IsDefault() {
			STBinaryDataStructure defaultStruct = new STBinaryDataStructure(null);
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssBin, defaultStruct.ssBin)) return false;
			return true;
		}
	} // STBinaryDataStructure

	/// <summary>
	/// Structure <code>STKeyValuePairStructure</code> that represents the Service Studio structure
	///  <code>KeyValuePair</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STKeyValuePairStructure: ISerializable, ITypedRecord<STKeyValuePairStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*YVOeyLTd0UWMdJ258GJRDw");
		internal static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*fhYlhVtiZEefYyi6JkjEZw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;


		public BitArray OptimizedAttributes;

		public STKeyValuePairStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssValue = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "KeyValuePair.Key", "");
			ssValue = r.ReadText(index++, "KeyValuePair.Value", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STKeyValuePairStructure r) {
			this = r;
		}


		public static bool operator == (STKeyValuePairStructure a, STKeyValuePairStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STKeyValuePairStructure a, STKeyValuePairStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STKeyValuePairStructure)) return false;
			return (this == (STKeyValuePairStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STKeyValuePairStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssValue = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STKeyValuePairStructure Duplicate() {
			STKeyValuePairStructure t;
			t.ssKey = this.ssKey;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssValue = (string) other.AttributeGet(IdValue);
		}
		public bool IsDefault() {
			STKeyValuePairStructure defaultStruct = new STKeyValuePairStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssValue != defaultStruct.ssValue) return false;
			return true;
		}
	} // STKeyValuePairStructure

	/// <summary>
	/// Structure <code>STEntityEventStructure</code> that represents the Service Studio structure
	///  <code>EntityEvent</code> <p> Description: Information about the event associated to an entity</p>
	/// </summary>
	[Serializable()]
	public partial struct STEntityEventStructure: ISerializable, ITypedRecord<STEntityEventStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdProcessId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*EJleyvWYOUKOMM_zapR7BA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ProcessId")]
		public int ssProcessId;


		public BitArray OptimizedAttributes;

		public STEntityEventStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssProcessId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssProcessId = r.ReadInteger(index++, "EntityEvent.ProcessId", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEntityEventStructure r) {
			this = r;
		}


		public static bool operator == (STEntityEventStructure a, STEntityEventStructure b) {
			if (a.ssProcessId != b.ssProcessId) return false;
			return true;
		}

		public static bool operator != (STEntityEventStructure a, STEntityEventStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEntityEventStructure)) return false;
			return (this == (STEntityEventStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssProcessId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEntityEventStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssProcessId = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssProcessId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProcessId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProcessId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEntityEventStructure Duplicate() {
			STEntityEventStructure t;
			t.ssProcessId = this.ssProcessId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProcessId")) VarValue.AppendAttribute(recordElem, "ProcessId", ssProcessId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ProcessId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "processid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProcessId")) variable.Value = ssProcessId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdProcessId) {
				return ssProcessId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssProcessId = (int) other.AttributeGet(IdProcessId);
		}
		public bool IsDefault() {
			STEntityEventStructure defaultStruct = new STEntityEventStructure(null);
			if (this.ssProcessId != defaultStruct.ssProcessId) return false;
			return true;
		}
	} // STEntityEventStructure

	/// <summary>
	/// Structure <code>STSolutionPack_ApplicationStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_Application</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_ApplicationStructure: ISerializable, ITypedRecord<STSolutionPack_ApplicationStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*h5I0d9rpX0OJ_Ks4k8jhcA");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8RUJgDCqvkCKPd+Xi0S0lA");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BP6P5dfmPk+Kshe6GAIZ1Q");
		internal static readonly GlobalObjectKey IdDefaultThemeIsMobile = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*l6Hu_4K8jEyUM6QCADtTKg");
		internal static readonly GlobalObjectKey IdIcon = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZkOqnJqhnE6zH8nuBRhaww");
		internal static readonly GlobalObjectKey IdFrontOfficeEspaceKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Y7izQhFdCEmCompEysfsew");
		internal static readonly GlobalObjectKey IdFrontOfficeEspaceName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aWlH_C2uNUuoNBfB5bHZOw");
		internal static readonly GlobalObjectKey IdBackOfficeEspaceKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8xhE7NvHfkWeDWfXndGVIQ");
		internal static readonly GlobalObjectKey IdBackOfficeEspaceName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aQIzzAf4UU6CjxSqUcx0wQ");
		internal static readonly GlobalObjectKey IdModules = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*iECwkY0q5ku8e_0FDA+Kow");
		internal static readonly GlobalObjectKey IdDependencies = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Pq1wPDkMtUiEaU2kzpR53A");
		internal static readonly GlobalObjectKey IdForgeBaseVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PQ9UvTHpmUKFDlD7zN0P3A");
		internal static readonly GlobalObjectKey IdContentHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZNIHYaFRbUamXn9oJHSlEA");
		internal static readonly GlobalObjectKey IdAPIHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*YBseY5RgfkGYpQnJNHP+TQ");
		internal static readonly GlobalObjectKey IdOriginEnvironmentCode = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2apZDhEhzUG8Dh5Fu1Cf7A");
		internal static readonly GlobalObjectKey IdOutdatedReferences = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bdyKHkT5ekCM3KI4mfdquQ");
		internal static readonly GlobalObjectKey IdApplicationKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ntAhz2J1nECMH4I_IMZ8rA");
		internal static readonly GlobalObjectKey IdTemplateKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*LPAXuG4LEkq6bdt4DJUW4w");
		internal static readonly GlobalObjectKey IdPrimaryColor = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*f4FunlXEiUOUlyY_OyWDtw");
		internal static readonly GlobalObjectKey IdUrl = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jotfflDipEu35L21zJPmEw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("DefaultThemeIsMobile")]
		public bool ssDefaultThemeIsMobile;

		[System.Xml.Serialization.XmlElement("Icon")]
		public byte[] ssIcon;

		[System.Xml.Serialization.XmlElement("FrontOfficeEspaceKey")]
		public string ssFrontOfficeEspaceKey;

		[System.Xml.Serialization.XmlElement("FrontOfficeEspaceName")]
		public string ssFrontOfficeEspaceName;

		[System.Xml.Serialization.XmlElement("BackOfficeEspaceKey")]
		public string ssBackOfficeEspaceKey;

		[System.Xml.Serialization.XmlElement("BackOfficeEspaceName")]
		public string ssBackOfficeEspaceName;

		[System.Xml.Serialization.XmlElement("Modules")]
		public RLSolutionPack_ApplicationModuleRecordList ssModules;

		[System.Xml.Serialization.XmlElement("Dependencies")]
		public RLSolutionPack_ApplicationDependencyRecordList ssDependencies;

		[System.Xml.Serialization.XmlElement("ForgeBaseVersion")]
		public decimal ssForgeBaseVersion;

		[System.Xml.Serialization.XmlElement("ContentHash")]
		public string ssContentHash;

		[System.Xml.Serialization.XmlElement("APIHash")]
		public string ssAPIHash;

		[System.Xml.Serialization.XmlElement("OriginEnvironmentCode")]
		public string ssOriginEnvironmentCode;

		[System.Xml.Serialization.XmlElement("OutdatedReferences")]
		public bool ssOutdatedReferences;

		[System.Xml.Serialization.XmlElement("ApplicationKind")]
		public string ssApplicationKind;

		[System.Xml.Serialization.XmlElement("TemplateKey")]
		public string ssTemplateKey;

		[System.Xml.Serialization.XmlElement("PrimaryColor")]
		public string ssPrimaryColor;

		[System.Xml.Serialization.XmlElement("Url")]
		public string ssUrl;


		public BitArray OptimizedAttributes;

		public STSolutionPack_ApplicationStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssDescription = "";
			ssDefaultThemeIsMobile = false;
			ssIcon = new byte[] {};
			ssFrontOfficeEspaceKey = "";
			ssFrontOfficeEspaceName = "";
			ssBackOfficeEspaceKey = "";
			ssBackOfficeEspaceName = "";
			ssModules = new RLSolutionPack_ApplicationModuleRecordList();
			ssDependencies = new RLSolutionPack_ApplicationDependencyRecordList();
			ssForgeBaseVersion = 0.0M;
			ssContentHash = "";
			ssAPIHash = "";
			ssOriginEnvironmentCode = "";
			ssOutdatedReferences = false;
			ssApplicationKind = "";
			ssTemplateKey = "";
			ssPrimaryColor = "";
			ssUrl = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "SolutionPack_Application.Key", "");
			ssName = r.ReadText(index++, "SolutionPack_Application.Name", "");
			ssDescription = r.ReadText(index++, "SolutionPack_Application.Description", "");
			ssDefaultThemeIsMobile = r.ReadBoolean(index++, "SolutionPack_Application.DefaultThemeIsMobile", false);
			ssIcon = r.ReadBinaryData(index++, "SolutionPack_Application.Icon", new byte[] {});
			ssFrontOfficeEspaceKey = r.ReadText(index++, "SolutionPack_Application.FrontOfficeEspaceKey", "");
			ssFrontOfficeEspaceName = r.ReadText(index++, "SolutionPack_Application.FrontOfficeEspaceName", "");
			ssBackOfficeEspaceKey = r.ReadText(index++, "SolutionPack_Application.BackOfficeEspaceKey", "");
			ssBackOfficeEspaceName = r.ReadText(index++, "SolutionPack_Application.BackOfficeEspaceName", "");
			ssForgeBaseVersion = r.ReadDecimal(index++, "SolutionPack_Application.ForgeBaseVersion", 0.0M);
			ssContentHash = r.ReadText(index++, "SolutionPack_Application.ContentHash", "");
			ssAPIHash = r.ReadText(index++, "SolutionPack_Application.APIHash", "");
			ssOriginEnvironmentCode = r.ReadText(index++, "SolutionPack_Application.OriginEnvironmentCode", "");
			ssOutdatedReferences = r.ReadBoolean(index++, "SolutionPack_Application.OutdatedReferences", false);
			ssApplicationKind = r.ReadText(index++, "SolutionPack_Application.ApplicationKind", "");
			ssTemplateKey = r.ReadText(index++, "SolutionPack_Application.TemplateKey", "");
			ssPrimaryColor = r.ReadText(index++, "SolutionPack_Application.PrimaryColor", "");
			ssUrl = r.ReadText(index++, "SolutionPack_Application.Url", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_ApplicationStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_ApplicationStructure a, STSolutionPack_ApplicationStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssDefaultThemeIsMobile != b.ssDefaultThemeIsMobile) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssIcon, b.ssIcon)) return false;
			if (a.ssFrontOfficeEspaceKey != b.ssFrontOfficeEspaceKey) return false;
			if (a.ssFrontOfficeEspaceName != b.ssFrontOfficeEspaceName) return false;
			if (a.ssBackOfficeEspaceKey != b.ssBackOfficeEspaceKey) return false;
			if (a.ssBackOfficeEspaceName != b.ssBackOfficeEspaceName) return false;
			if (a.ssModules != b.ssModules) return false;
			if (a.ssDependencies != b.ssDependencies) return false;
			if (a.ssForgeBaseVersion != b.ssForgeBaseVersion) return false;
			if (a.ssContentHash != b.ssContentHash) return false;
			if (a.ssAPIHash != b.ssAPIHash) return false;
			if (a.ssOriginEnvironmentCode != b.ssOriginEnvironmentCode) return false;
			if (a.ssOutdatedReferences != b.ssOutdatedReferences) return false;
			if (a.ssApplicationKind != b.ssApplicationKind) return false;
			if (a.ssTemplateKey != b.ssTemplateKey) return false;
			if (a.ssPrimaryColor != b.ssPrimaryColor) return false;
			if (a.ssUrl != b.ssUrl) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_ApplicationStructure a, STSolutionPack_ApplicationStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_ApplicationStructure)) return false;
			return (this == (STSolutionPack_ApplicationStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssDefaultThemeIsMobile.GetHashCode()
				^ ssIcon.GetHashCode()
				^ ssFrontOfficeEspaceKey.GetHashCode()
				^ ssFrontOfficeEspaceName.GetHashCode()
				^ ssBackOfficeEspaceKey.GetHashCode()
				^ ssBackOfficeEspaceName.GetHashCode()
				^ ssModules.GetHashCode()
				^ ssDependencies.GetHashCode()
				^ ssForgeBaseVersion.GetHashCode()
				^ ssContentHash.GetHashCode()
				^ ssAPIHash.GetHashCode()
				^ ssOriginEnvironmentCode.GetHashCode()
				^ ssOutdatedReferences.GetHashCode()
				^ ssApplicationKind.GetHashCode()
				^ ssTemplateKey.GetHashCode()
				^ ssPrimaryColor.GetHashCode()
				^ ssUrl.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_ApplicationStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssDescription = "";
			ssDefaultThemeIsMobile = false;
			ssIcon = new byte[] {};
			ssFrontOfficeEspaceKey = "";
			ssFrontOfficeEspaceName = "";
			ssBackOfficeEspaceKey = "";
			ssBackOfficeEspaceName = "";
			ssModules = new RLSolutionPack_ApplicationModuleRecordList();
			ssDependencies = new RLSolutionPack_ApplicationDependencyRecordList();
			ssForgeBaseVersion = 0.0M;
			ssContentHash = "";
			ssAPIHash = "";
			ssOriginEnvironmentCode = "";
			ssOutdatedReferences = false;
			ssApplicationKind = "";
			ssTemplateKey = "";
			ssPrimaryColor = "";
			ssUrl = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDefaultThemeIsMobile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDefaultThemeIsMobile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDefaultThemeIsMobile = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIcon", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIcon' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIcon = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFrontOfficeEspaceKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFrontOfficeEspaceKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFrontOfficeEspaceKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFrontOfficeEspaceName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFrontOfficeEspaceName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFrontOfficeEspaceName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBackOfficeEspaceKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBackOfficeEspaceKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBackOfficeEspaceKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBackOfficeEspaceName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBackOfficeEspaceName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBackOfficeEspaceName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssModules", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssModules' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssModules = (RLSolutionPack_ApplicationModuleRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDependencies", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDependencies' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDependencies = (RLSolutionPack_ApplicationDependencyRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssForgeBaseVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssForgeBaseVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssForgeBaseVersion = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContentHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContentHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContentHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAPIHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAPIHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAPIHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOriginEnvironmentCode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOriginEnvironmentCode' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOriginEnvironmentCode = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOutdatedReferences", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOutdatedReferences' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOutdatedReferences = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTemplateKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTemplateKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTemplateKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPrimaryColor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPrimaryColor' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPrimaryColor = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUrl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUrl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUrl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssModules.RecursiveReset();
			ssDependencies.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssModules.InternalRecursiveSave();
			ssDependencies.InternalRecursiveSave();
		}


		public STSolutionPack_ApplicationStructure Duplicate() {
			STSolutionPack_ApplicationStructure t;
			t.ssKey = this.ssKey;
			t.ssName = this.ssName;
			t.ssDescription = this.ssDescription;
			t.ssDefaultThemeIsMobile = this.ssDefaultThemeIsMobile;
			if (this.ssIcon != null) {
				t.ssIcon = (byte[]) this.ssIcon.Clone();
			} else {
				t.ssIcon = null;
			}
			t.ssFrontOfficeEspaceKey = this.ssFrontOfficeEspaceKey;
			t.ssFrontOfficeEspaceName = this.ssFrontOfficeEspaceName;
			t.ssBackOfficeEspaceKey = this.ssBackOfficeEspaceKey;
			t.ssBackOfficeEspaceName = this.ssBackOfficeEspaceName;
			t.ssModules = (RLSolutionPack_ApplicationModuleRecordList) this.ssModules.Duplicate();
			t.ssDependencies = (RLSolutionPack_ApplicationDependencyRecordList) this.ssDependencies.Duplicate();
			t.ssForgeBaseVersion = this.ssForgeBaseVersion;
			t.ssContentHash = this.ssContentHash;
			t.ssAPIHash = this.ssAPIHash;
			t.ssOriginEnvironmentCode = this.ssOriginEnvironmentCode;
			t.ssOutdatedReferences = this.ssOutdatedReferences;
			t.ssApplicationKind = this.ssApplicationKind;
			t.ssTemplateKey = this.ssTemplateKey;
			t.ssPrimaryColor = this.ssPrimaryColor;
			t.ssUrl = this.ssUrl;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DefaultThemeIsMobile")) VarValue.AppendAttribute(recordElem, "DefaultThemeIsMobile", ssDefaultThemeIsMobile, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "DefaultThemeIsMobile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Icon")) VarValue.AppendAttribute(recordElem, "Icon", ssIcon, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Icon");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FrontOfficeEspaceKey")) VarValue.AppendAttribute(recordElem, "FrontOfficeEspaceKey", ssFrontOfficeEspaceKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FrontOfficeEspaceKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FrontOfficeEspaceName")) VarValue.AppendAttribute(recordElem, "FrontOfficeEspaceName", ssFrontOfficeEspaceName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FrontOfficeEspaceName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".BackOfficeEspaceKey")) VarValue.AppendAttribute(recordElem, "BackOfficeEspaceKey", ssBackOfficeEspaceKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "BackOfficeEspaceKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".BackOfficeEspaceName")) VarValue.AppendAttribute(recordElem, "BackOfficeEspaceName", ssBackOfficeEspaceName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "BackOfficeEspaceName");
				ssModules.ToXml(this, recordElem, "Modules", detailLevel - 1);
				ssDependencies.ToXml(this, recordElem, "Dependencies", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ForgeBaseVersion")) VarValue.AppendAttribute(recordElem, "ForgeBaseVersion", ssForgeBaseVersion, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "ForgeBaseVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ContentHash")) VarValue.AppendAttribute(recordElem, "ContentHash", ssContentHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ContentHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".APIHash")) VarValue.AppendAttribute(recordElem, "APIHash", ssAPIHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "APIHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OriginEnvironmentCode")) VarValue.AppendAttribute(recordElem, "OriginEnvironmentCode", ssOriginEnvironmentCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OriginEnvironmentCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OutdatedReferences")) VarValue.AppendAttribute(recordElem, "OutdatedReferences", ssOutdatedReferences, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "OutdatedReferences");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKind")) VarValue.AppendAttribute(recordElem, "ApplicationKind", ssApplicationKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TemplateKey")) VarValue.AppendAttribute(recordElem, "TemplateKey", ssTemplateKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TemplateKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PrimaryColor")) VarValue.AppendAttribute(recordElem, "PrimaryColor", ssPrimaryColor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PrimaryColor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Url")) VarValue.AppendAttribute(recordElem, "Url", ssUrl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Url");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "defaultthemeismobile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DefaultThemeIsMobile")) variable.Value = ssDefaultThemeIsMobile; else variable.Optimized = true;
			} else if (head == "icon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Icon")) variable.Value = ssIcon; else variable.Optimized = true;
			} else if (head == "frontofficeespacekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FrontOfficeEspaceKey")) variable.Value = ssFrontOfficeEspaceKey; else variable.Optimized = true;
			} else if (head == "frontofficeespacename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FrontOfficeEspaceName")) variable.Value = ssFrontOfficeEspaceName; else variable.Optimized = true;
			} else if (head == "backofficeespacekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BackOfficeEspaceKey")) variable.Value = ssBackOfficeEspaceKey; else variable.Optimized = true;
			} else if (head == "backofficeespacename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BackOfficeEspaceName")) variable.Value = ssBackOfficeEspaceName; else variable.Optimized = true;
			} else if (head == "modules") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Modules")) variable.Value = ssModules; else variable.Optimized = true;
				variable.SetFieldName("modules");
			} else if (head == "dependencies") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dependencies")) variable.Value = ssDependencies; else variable.Optimized = true;
				variable.SetFieldName("dependencies");
			} else if (head == "forgebaseversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ForgeBaseVersion")) variable.Value = ssForgeBaseVersion; else variable.Optimized = true;
			} else if (head == "contenthash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ContentHash")) variable.Value = ssContentHash; else variable.Optimized = true;
			} else if (head == "apihash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".APIHash")) variable.Value = ssAPIHash; else variable.Optimized = true;
			} else if (head == "originenvironmentcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OriginEnvironmentCode")) variable.Value = ssOriginEnvironmentCode; else variable.Optimized = true;
			} else if (head == "outdatedreferences") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OutdatedReferences")) variable.Value = ssOutdatedReferences; else variable.Optimized = true;
			} else if (head == "applicationkind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKind")) variable.Value = ssApplicationKind; else variable.Optimized = true;
			} else if (head == "templatekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TemplateKey")) variable.Value = ssTemplateKey; else variable.Optimized = true;
			} else if (head == "primarycolor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PrimaryColor")) variable.Value = ssPrimaryColor; else variable.Optimized = true;
			} else if (head == "url") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Url")) variable.Value = ssUrl; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdDefaultThemeIsMobile) {
				return ssDefaultThemeIsMobile;
			} else if (key == IdIcon) {
				return ssIcon;
			} else if (key == IdFrontOfficeEspaceKey) {
				return ssFrontOfficeEspaceKey;
			} else if (key == IdFrontOfficeEspaceName) {
				return ssFrontOfficeEspaceName;
			} else if (key == IdBackOfficeEspaceKey) {
				return ssBackOfficeEspaceKey;
			} else if (key == IdBackOfficeEspaceName) {
				return ssBackOfficeEspaceName;
			} else if (key == IdModules) {
				return ssModules;
			} else if (key == IdDependencies) {
				return ssDependencies;
			} else if (key == IdForgeBaseVersion) {
				return ssForgeBaseVersion;
			} else if (key == IdContentHash) {
				return ssContentHash;
			} else if (key == IdAPIHash) {
				return ssAPIHash;
			} else if (key == IdOriginEnvironmentCode) {
				return ssOriginEnvironmentCode;
			} else if (key == IdOutdatedReferences) {
				return ssOutdatedReferences;
			} else if (key == IdApplicationKind) {
				return ssApplicationKind;
			} else if (key == IdTemplateKey) {
				return ssTemplateKey;
			} else if (key == IdPrimaryColor) {
				return ssPrimaryColor;
			} else if (key == IdUrl) {
				return ssUrl;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssName = (string) other.AttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssDefaultThemeIsMobile = (bool) other.AttributeGet(IdDefaultThemeIsMobile);
			ssIcon = (byte[]) other.AttributeGet(IdIcon);
			ssFrontOfficeEspaceKey = (string) other.AttributeGet(IdFrontOfficeEspaceKey);
			ssFrontOfficeEspaceName = (string) other.AttributeGet(IdFrontOfficeEspaceName);
			ssBackOfficeEspaceKey = (string) other.AttributeGet(IdBackOfficeEspaceKey);
			ssBackOfficeEspaceName = (string) other.AttributeGet(IdBackOfficeEspaceName);
			ssModules = new RLSolutionPack_ApplicationModuleRecordList();
			ssModules.FillFromOther((IOSList) other.AttributeGet(IdModules));
			ssDependencies = new RLSolutionPack_ApplicationDependencyRecordList();
			ssDependencies.FillFromOther((IOSList) other.AttributeGet(IdDependencies));
			ssForgeBaseVersion = (decimal) other.AttributeGet(IdForgeBaseVersion);
			ssContentHash = (string) other.AttributeGet(IdContentHash);
			ssAPIHash = (string) other.AttributeGet(IdAPIHash);
			ssOriginEnvironmentCode = (string) other.AttributeGet(IdOriginEnvironmentCode);
			ssOutdatedReferences = (bool) other.AttributeGet(IdOutdatedReferences);
			ssApplicationKind = (string) other.AttributeGet(IdApplicationKind);
			ssTemplateKey = (string) other.AttributeGet(IdTemplateKey);
			ssPrimaryColor = (string) other.AttributeGet(IdPrimaryColor);
			ssUrl = (string) other.AttributeGet(IdUrl);
		}
		public bool IsDefault() {
			STSolutionPack_ApplicationStructure defaultStruct = new STSolutionPack_ApplicationStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssDefaultThemeIsMobile != defaultStruct.ssDefaultThemeIsMobile) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssIcon, defaultStruct.ssIcon)) return false;
			if (this.ssFrontOfficeEspaceKey != defaultStruct.ssFrontOfficeEspaceKey) return false;
			if (this.ssFrontOfficeEspaceName != defaultStruct.ssFrontOfficeEspaceName) return false;
			if (this.ssBackOfficeEspaceKey != defaultStruct.ssBackOfficeEspaceKey) return false;
			if (this.ssBackOfficeEspaceName != defaultStruct.ssBackOfficeEspaceName) return false;
			if (this.ssModules != null && this.ssModules.Length != 0) return false;
			if (this.ssDependencies != null && this.ssDependencies.Length != 0) return false;
			if (this.ssForgeBaseVersion != defaultStruct.ssForgeBaseVersion) return false;
			if (this.ssContentHash != defaultStruct.ssContentHash) return false;
			if (this.ssAPIHash != defaultStruct.ssAPIHash) return false;
			if (this.ssOriginEnvironmentCode != defaultStruct.ssOriginEnvironmentCode) return false;
			if (this.ssOutdatedReferences != defaultStruct.ssOutdatedReferences) return false;
			if (this.ssApplicationKind != defaultStruct.ssApplicationKind) return false;
			if (this.ssTemplateKey != defaultStruct.ssTemplateKey) return false;
			if (this.ssPrimaryColor != defaultStruct.ssPrimaryColor) return false;
			if (this.ssUrl != defaultStruct.ssUrl) return false;
			return true;
		}
	} // STSolutionPack_ApplicationStructure

	/// <summary>
	/// Structure <code>STSolutionPack_ApplicationModuleStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_ApplicationModule</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_ApplicationModuleStructure: ISerializable, ITypedRecord<STSolutionPack_ApplicationModuleStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vYD+h_p0YUuZFyRFORG5LA");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kUf1jpNZ7ECzh6GR3bCQMA");
		internal static readonly GlobalObjectKey IdSignature = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hK9PNW_km0Cho_imMBqp0g");
		internal static readonly GlobalObjectKey IdAPI = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*STLSC_y4z0uMOk7p+y7yXw");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*T9btVLLrkkG_FPZHUjTrqQ");
		internal static readonly GlobalObjectKey IdESpaceType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QIB9lu5TXkmZ3GaMiABSfQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Signature")]
		public byte[] ssSignature;

		[System.Xml.Serialization.XmlElement("API")]
		public RLSolutionPack_ApplicationModulePublicElementRecordList ssAPI;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("ESpaceType")]
		public string ssESpaceType;


		public BitArray OptimizedAttributes;

		public STSolutionPack_ApplicationModuleStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssSignature = new byte[] {};
			ssAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssName = "";
			ssESpaceType = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUID = r.ReadText(index++, "SolutionPack_ApplicationModule.UID", "");
			ssKind = r.ReadText(index++, "SolutionPack_ApplicationModule.Kind", "");
			ssSignature = r.ReadBinaryData(index++, "SolutionPack_ApplicationModule.Signature", new byte[] {});
			ssName = r.ReadText(index++, "SolutionPack_ApplicationModule.Name", "");
			ssESpaceType = r.ReadEntityReferenceText(index++, "SolutionPack_ApplicationModule.ESpaceType", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_ApplicationModuleStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_ApplicationModuleStructure a, STSolutionPack_ApplicationModuleStructure b) {
			if (a.ssUID != b.ssUID) return false;
			if (a.ssKind != b.ssKind) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssSignature, b.ssSignature)) return false;
			if (a.ssAPI != b.ssAPI) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssESpaceType != b.ssESpaceType) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_ApplicationModuleStructure a, STSolutionPack_ApplicationModuleStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_ApplicationModuleStructure)) return false;
			return (this == (STSolutionPack_ApplicationModuleStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssSignature.GetHashCode()
				^ ssAPI.GetHashCode()
				^ ssName.GetHashCode()
				^ ssESpaceType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_ApplicationModuleStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssSignature = new byte[] {};
			ssAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssName = "";
			ssESpaceType = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSignature", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSignature' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSignature = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAPI", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAPI' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAPI = (RLSolutionPack_ApplicationModulePublicElementRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssESpaceType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssESpaceType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssESpaceType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssAPI.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssAPI.InternalRecursiveSave();
		}


		public STSolutionPack_ApplicationModuleStructure Duplicate() {
			STSolutionPack_ApplicationModuleStructure t;
			t.ssUID = this.ssUID;
			t.ssKind = this.ssKind;
			if (this.ssSignature != null) {
				t.ssSignature = (byte[]) this.ssSignature.Clone();
			} else {
				t.ssSignature = null;
			}
			t.ssAPI = (RLSolutionPack_ApplicationModulePublicElementRecordList) this.ssAPI.Duplicate();
			t.ssName = this.ssName;
			t.ssESpaceType = this.ssESpaceType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Signature")) VarValue.AppendAttribute(recordElem, "Signature", ssSignature, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Signature");
				ssAPI.ToXml(this, recordElem, "API", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESpaceType")) VarValue.AppendAttribute(recordElem, "ESpaceType", ssESpaceType, detailLevel, TypeKind.EntityReferenceText); else VarValue.AppendOptimizedAttribute(recordElem, "ESpaceType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "signature") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Signature")) variable.Value = ssSignature; else variable.Optimized = true;
			} else if (head == "api") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".API")) variable.Value = ssAPI; else variable.Optimized = true;
				variable.SetFieldName("api");
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "espacetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESpaceType")) variable.Value = ssESpaceType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUID) {
				return ssUID;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdSignature) {
				return ssSignature;
			} else if (key == IdAPI) {
				return ssAPI;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdESpaceType) {
				return ssESpaceType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUID = (string) other.AttributeGet(IdUID);
			ssKind = (string) other.AttributeGet(IdKind);
			ssSignature = (byte[]) other.AttributeGet(IdSignature);
			ssAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssAPI.FillFromOther((IOSList) other.AttributeGet(IdAPI));
			ssName = (string) other.AttributeGet(IdName);
			ssESpaceType = (string) other.AttributeGet(IdESpaceType);
		}
		public bool IsDefault() {
			STSolutionPack_ApplicationModuleStructure defaultStruct = new STSolutionPack_ApplicationModuleStructure(null);
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssSignature, defaultStruct.ssSignature)) return false;
			if (this.ssAPI != null && this.ssAPI.Length != 0) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssESpaceType != defaultStruct.ssESpaceType) return false;
			return true;
		}
	} // STSolutionPack_ApplicationModuleStructure

	/// <summary>
	/// Structure <code>STExtensionEntityInfoStructure</code> that represents the Service Studio structure
	///  <code>ExtensionEntityInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STExtensionEntityInfoStructure: ISerializable, ITypedRecord<STExtensionEntityInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rVDYXSmcBE28_Gcm968q3Q");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gQX7fm3vnk2IcXfDQpYoMQ");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*tkByiureYkil+IUpZI2nMw");
		internal static readonly GlobalObjectKey IdPhysicalTableName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*X_qSMRi_DkmxC2oVg07WzA");
		internal static readonly GlobalObjectKey IdLogicalDatabase = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KAhBVpVBW0a_LyzsrV3D1g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("PhysicalTableName")]
		public string ssPhysicalTableName;

		[System.Xml.Serialization.XmlElement("LogicalDatabase")]
		public string ssLogicalDatabase;


		public BitArray OptimizedAttributes;

		public STExtensionEntityInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
			ssPhysicalTableName = "";
			ssLogicalDatabase = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ExtensionEntityInfo.Name", "");
			ssKey = r.ReadText(index++, "ExtensionEntityInfo.Key", "");
			ssDescription = r.ReadText(index++, "ExtensionEntityInfo.Description", "");
			ssPhysicalTableName = r.ReadText(index++, "ExtensionEntityInfo.PhysicalTableName", "");
			ssLogicalDatabase = r.ReadText(index++, "ExtensionEntityInfo.LogicalDatabase", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STExtensionEntityInfoStructure r) {
			this = r;
		}


		public static bool operator == (STExtensionEntityInfoStructure a, STExtensionEntityInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssPhysicalTableName != b.ssPhysicalTableName) return false;
			if (a.ssLogicalDatabase != b.ssLogicalDatabase) return false;
			return true;
		}

		public static bool operator != (STExtensionEntityInfoStructure a, STExtensionEntityInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STExtensionEntityInfoStructure)) return false;
			return (this == (STExtensionEntityInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssPhysicalTableName.GetHashCode()
				^ ssLogicalDatabase.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STExtensionEntityInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssDescription = "";
			ssPhysicalTableName = "";
			ssLogicalDatabase = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPhysicalTableName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPhysicalTableName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPhysicalTableName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogicalDatabase", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalDatabase' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalDatabase = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STExtensionEntityInfoStructure Duplicate() {
			STExtensionEntityInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssDescription = this.ssDescription;
			t.ssPhysicalTableName = this.ssPhysicalTableName;
			t.ssLogicalDatabase = this.ssLogicalDatabase;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PhysicalTableName")) VarValue.AppendAttribute(recordElem, "PhysicalTableName", ssPhysicalTableName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PhysicalTableName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogicalDatabase")) VarValue.AppendAttribute(recordElem, "LogicalDatabase", ssLogicalDatabase, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogicalDatabase");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "physicaltablename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PhysicalTableName")) variable.Value = ssPhysicalTableName; else variable.Optimized = true;
			} else if (head == "logicaldatabase") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalDatabase")) variable.Value = ssLogicalDatabase; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdPhysicalTableName) {
				return ssPhysicalTableName;
			} else if (key == IdLogicalDatabase) {
				return ssLogicalDatabase;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssPhysicalTableName = (string) other.AttributeGet(IdPhysicalTableName);
			ssLogicalDatabase = (string) other.AttributeGet(IdLogicalDatabase);
		}
		public bool IsDefault() {
			STExtensionEntityInfoStructure defaultStruct = new STExtensionEntityInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssPhysicalTableName != defaultStruct.ssPhysicalTableName) return false;
			if (this.ssLogicalDatabase != defaultStruct.ssLogicalDatabase) return false;
			return true;
		}
	} // STExtensionEntityInfoStructure

	/// <summary>
	/// Structure <code>STDALDBConfigParamStructure</code> that represents the Service Studio structure
	///  <code>DALDBConfigParam</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDALDBConfigParamStructure: ISerializable, ITypedRecord<STDALDBConfigParamStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*DgkbqIcihE2wso+TyJ74OQ");
		internal static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pTU7wRycP0mxX9vFimWb6Q");
		internal static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dcDzy2sLOUS0bK5CJ0IPVQ");
		internal static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Vv_HZEdj+UuhQoTbQKOl7A");
		internal static readonly GlobalObjectKey IdMandatory = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8IUzPtaNR0eOtzBCddZiAw");
		internal static readonly GlobalObjectKey IdExample = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*S21bFac4dkGFGebRIjWx8A");
		internal static readonly GlobalObjectKey IdAutoCompleteExpression = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2HmWqaTd10uc3foa_Aj4dA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Type")]
		public string ssType;

		[System.Xml.Serialization.XmlElement("Label")]
		public string ssLabel;

		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;

		[System.Xml.Serialization.XmlElement("Mandatory")]
		public bool ssMandatory;

		[System.Xml.Serialization.XmlElement("Example")]
		public string ssExample;

		[System.Xml.Serialization.XmlElement("AutoCompleteExpression")]
		public string ssAutoCompleteExpression;


		public BitArray OptimizedAttributes;

		public STDALDBConfigParamStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssType = "";
			ssLabel = "";
			ssValue = "";
			ssMandatory = false;
			ssExample = "";
			ssAutoCompleteExpression = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "DALDBConfigParam.Name", "");
			ssType = r.ReadText(index++, "DALDBConfigParam.Type", "");
			ssLabel = r.ReadText(index++, "DALDBConfigParam.Label", "");
			ssValue = r.ReadText(index++, "DALDBConfigParam.Value", "");
			ssMandatory = r.ReadBoolean(index++, "DALDBConfigParam.Mandatory", false);
			ssExample = r.ReadText(index++, "DALDBConfigParam.Example", "");
			ssAutoCompleteExpression = r.ReadText(index++, "DALDBConfigParam.AutoCompleteExpression", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDALDBConfigParamStructure r) {
			this = r;
		}


		public static bool operator == (STDALDBConfigParamStructure a, STDALDBConfigParamStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssType != b.ssType) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssValue != b.ssValue) return false;
			if (a.ssMandatory != b.ssMandatory) return false;
			if (a.ssExample != b.ssExample) return false;
			if (a.ssAutoCompleteExpression != b.ssAutoCompleteExpression) return false;
			return true;
		}

		public static bool operator != (STDALDBConfigParamStructure a, STDALDBConfigParamStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDALDBConfigParamStructure)) return false;
			return (this == (STDALDBConfigParamStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssType.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssValue.GetHashCode()
				^ ssMandatory.GetHashCode()
				^ ssExample.GetHashCode()
				^ ssAutoCompleteExpression.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDALDBConfigParamStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssType = "";
			ssLabel = "";
			ssValue = "";
			ssMandatory = false;
			ssExample = "";
			ssAutoCompleteExpression = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMandatory", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMandatory' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMandatory = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExample", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExample' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExample = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAutoCompleteExpression", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAutoCompleteExpression' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAutoCompleteExpression = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDALDBConfigParamStructure Duplicate() {
			STDALDBConfigParamStructure t;
			t.ssName = this.ssName;
			t.ssType = this.ssType;
			t.ssLabel = this.ssLabel;
			t.ssValue = this.ssValue;
			t.ssMandatory = this.ssMandatory;
			t.ssExample = this.ssExample;
			t.ssAutoCompleteExpression = this.ssAutoCompleteExpression;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Mandatory")) VarValue.AppendAttribute(recordElem, "Mandatory", ssMandatory, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Mandatory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Example")) VarValue.AppendAttribute(recordElem, "Example", ssExample, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Example");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutoCompleteExpression")) VarValue.AppendAttribute(recordElem, "AutoCompleteExpression", ssAutoCompleteExpression, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AutoCompleteExpression");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			} else if (head == "mandatory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Mandatory")) variable.Value = ssMandatory; else variable.Optimized = true;
			} else if (head == "example") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Example")) variable.Value = ssExample; else variable.Optimized = true;
			} else if (head == "autocompleteexpression") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutoCompleteExpression")) variable.Value = ssAutoCompleteExpression; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdType) {
				return ssType;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdValue) {
				return ssValue;
			} else if (key == IdMandatory) {
				return ssMandatory;
			} else if (key == IdExample) {
				return ssExample;
			} else if (key == IdAutoCompleteExpression) {
				return ssAutoCompleteExpression;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssType = (string) other.AttributeGet(IdType);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ssValue = (string) other.AttributeGet(IdValue);
			ssMandatory = (bool) other.AttributeGet(IdMandatory);
			ssExample = (string) other.AttributeGet(IdExample);
			ssAutoCompleteExpression = (string) other.AttributeGet(IdAutoCompleteExpression);
		}
		public bool IsDefault() {
			STDALDBConfigParamStructure defaultStruct = new STDALDBConfigParamStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssType != defaultStruct.ssType) return false;
			if (this.ssLabel != defaultStruct.ssLabel) return false;
			if (this.ssValue != defaultStruct.ssValue) return false;
			if (this.ssMandatory != defaultStruct.ssMandatory) return false;
			if (this.ssExample != defaultStruct.ssExample) return false;
			if (this.ssAutoCompleteExpression != defaultStruct.ssAutoCompleteExpression) return false;
			return true;
		}
	} // STDALDBConfigParamStructure

	/// <summary>
	/// Structure <code>STDALDBConfigProviderStructure</code> that represents the Service Studio structure
	///  <code>DALDBConfigProvider</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDALDBConfigProviderStructure: ISerializable, ITypedRecord<STDALDBConfigProviderStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdDisplayName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_CSy6xGel0qejBhygIWmoQ");
		internal static readonly GlobalObjectKey IdProviderKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wy10GrBBekyXWFg32kUNcQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("DisplayName")]
		public string ssDisplayName;

		[System.Xml.Serialization.XmlElement("ProviderKey")]
		public string ssProviderKey;


		public BitArray OptimizedAttributes;

		public STDALDBConfigProviderStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDisplayName = "";
			ssProviderKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDisplayName = r.ReadText(index++, "DALDBConfigProvider.DisplayName", "");
			ssProviderKey = r.ReadText(index++, "DALDBConfigProvider.ProviderKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDALDBConfigProviderStructure r) {
			this = r;
		}


		public static bool operator == (STDALDBConfigProviderStructure a, STDALDBConfigProviderStructure b) {
			if (a.ssDisplayName != b.ssDisplayName) return false;
			if (a.ssProviderKey != b.ssProviderKey) return false;
			return true;
		}

		public static bool operator != (STDALDBConfigProviderStructure a, STDALDBConfigProviderStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDALDBConfigProviderStructure)) return false;
			return (this == (STDALDBConfigProviderStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDisplayName.GetHashCode()
				^ ssProviderKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDALDBConfigProviderStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDisplayName = "";
			ssProviderKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDisplayName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDisplayName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDisplayName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProviderKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProviderKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProviderKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDALDBConfigProviderStructure Duplicate() {
			STDALDBConfigProviderStructure t;
			t.ssDisplayName = this.ssDisplayName;
			t.ssProviderKey = this.ssProviderKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DisplayName")) VarValue.AppendAttribute(recordElem, "DisplayName", ssDisplayName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DisplayName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProviderKey")) VarValue.AppendAttribute(recordElem, "ProviderKey", ssProviderKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProviderKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "displayname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DisplayName")) variable.Value = ssDisplayName; else variable.Optimized = true;
			} else if (head == "providerkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProviderKey")) variable.Value = ssProviderKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDisplayName) {
				return ssDisplayName;
			} else if (key == IdProviderKey) {
				return ssProviderKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDisplayName = (string) other.AttributeGet(IdDisplayName);
			ssProviderKey = (string) other.AttributeGet(IdProviderKey);
		}
		public bool IsDefault() {
			STDALDBConfigProviderStructure defaultStruct = new STDALDBConfigProviderStructure(null);
			if (this.ssDisplayName != defaultStruct.ssDisplayName) return false;
			if (this.ssProviderKey != defaultStruct.ssProviderKey) return false;
			return true;
		}
	} // STDALDBConfigProviderStructure

	/// <summary>
	/// Structure <code>STDALDBConfigEnumValueStructure</code> that represents the Service Studio structure
	///  <code>DALDBConfigEnumValue</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDALDBConfigEnumValueStructure: ISerializable, ITypedRecord<STDALDBConfigEnumValueStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0rJF5PQExUK9xlWxp8yPTQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public string ssValue;


		public BitArray OptimizedAttributes;

		public STDALDBConfigEnumValueStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadText(index++, "DALDBConfigEnumValue.Value", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDALDBConfigEnumValueStructure r) {
			this = r;
		}


		public static bool operator == (STDALDBConfigEnumValueStructure a, STDALDBConfigEnumValueStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STDALDBConfigEnumValueStructure a, STDALDBConfigEnumValueStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDALDBConfigEnumValueStructure)) return false;
			return (this == (STDALDBConfigEnumValueStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDALDBConfigEnumValueStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDALDBConfigEnumValueStructure Duplicate() {
			STDALDBConfigEnumValueStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (string) other.AttributeGet(IdValue);
		}
		public bool IsDefault() {
			STDALDBConfigEnumValueStructure defaultStruct = new STDALDBConfigEnumValueStructure(null);
			if (this.ssValue != defaultStruct.ssValue) return false;
			return true;
		}
	} // STDALDBConfigEnumValueStructure

	/// <summary>
	/// Structure <code>STSolutionPack_ApplicationModulePublicElementStructure</code> that represents the
	///  Service Studio structure <code>SolutionPack_ApplicationModulePublicElement</code> <p> Description
	/// : </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_ApplicationModulePublicElementStructure: ISerializable, ITypedRecord<STSolutionPack_ApplicationModulePublicElementStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0BcKKiyAeEiehEfm6culUg");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5yX8X5pdOkGVfrDSnfL5UA");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*fpxDiBfq2EuCADIHzTXz_g");
		internal static readonly GlobalObjectKey IdCompatibilitySignatureHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ylPsiflYhE+Fju4FJCvrIg");
		internal static readonly GlobalObjectKey IdFullSignatureHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Hew_++AtPUa2HuSvTgCK0g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("CompatibilitySignatureHash")]
		public string ssCompatibilitySignatureHash;

		[System.Xml.Serialization.XmlElement("FullSignatureHash")]
		public string ssFullSignatureHash;


		public BitArray OptimizedAttributes;

		public STSolutionPack_ApplicationModulePublicElementStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKind = "";
			ssKey = "";
			ssCompatibilitySignatureHash = "";
			ssFullSignatureHash = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "SolutionPack_ApplicationModulePublicElement.Name", "");
			ssKind = r.ReadText(index++, "SolutionPack_ApplicationModulePublicElement.Kind", "");
			ssKey = r.ReadText(index++, "SolutionPack_ApplicationModulePublicElement.Key", "");
			ssCompatibilitySignatureHash = r.ReadText(index++, "SolutionPack_ApplicationModulePublicElement.CompatibilitySignatureHash", "");
			ssFullSignatureHash = r.ReadText(index++, "SolutionPack_ApplicationModulePublicElement.FullSignatureHash", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_ApplicationModulePublicElementStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_ApplicationModulePublicElementStructure a, STSolutionPack_ApplicationModulePublicElementStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssCompatibilitySignatureHash != b.ssCompatibilitySignatureHash) return false;
			if (a.ssFullSignatureHash != b.ssFullSignatureHash) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_ApplicationModulePublicElementStructure a, STSolutionPack_ApplicationModulePublicElementStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_ApplicationModulePublicElementStructure)) return false;
			return (this == (STSolutionPack_ApplicationModulePublicElementStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssCompatibilitySignatureHash.GetHashCode()
				^ ssFullSignatureHash.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_ApplicationModulePublicElementStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKind = "";
			ssKey = "";
			ssCompatibilitySignatureHash = "";
			ssFullSignatureHash = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCompatibilitySignatureHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCompatibilitySignatureHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCompatibilitySignatureHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFullSignatureHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFullSignatureHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFullSignatureHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSolutionPack_ApplicationModulePublicElementStructure Duplicate() {
			STSolutionPack_ApplicationModulePublicElementStructure t;
			t.ssName = this.ssName;
			t.ssKind = this.ssKind;
			t.ssKey = this.ssKey;
			t.ssCompatibilitySignatureHash = this.ssCompatibilitySignatureHash;
			t.ssFullSignatureHash = this.ssFullSignatureHash;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompatibilitySignatureHash")) VarValue.AppendAttribute(recordElem, "CompatibilitySignatureHash", ssCompatibilitySignatureHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompatibilitySignatureHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FullSignatureHash")) VarValue.AppendAttribute(recordElem, "FullSignatureHash", ssFullSignatureHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FullSignatureHash");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "compatibilitysignaturehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompatibilitySignatureHash")) variable.Value = ssCompatibilitySignatureHash; else variable.Optimized = true;
			} else if (head == "fullsignaturehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FullSignatureHash")) variable.Value = ssFullSignatureHash; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdCompatibilitySignatureHash) {
				return ssCompatibilitySignatureHash;
			} else if (key == IdFullSignatureHash) {
				return ssFullSignatureHash;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKind = (string) other.AttributeGet(IdKind);
			ssKey = (string) other.AttributeGet(IdKey);
			ssCompatibilitySignatureHash = (string) other.AttributeGet(IdCompatibilitySignatureHash);
			ssFullSignatureHash = (string) other.AttributeGet(IdFullSignatureHash);
		}
		public bool IsDefault() {
			STSolutionPack_ApplicationModulePublicElementStructure defaultStruct = new STSolutionPack_ApplicationModulePublicElementStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssCompatibilitySignatureHash != defaultStruct.ssCompatibilitySignatureHash) return false;
			if (this.ssFullSignatureHash != defaultStruct.ssFullSignatureHash) return false;
			return true;
		}
	} // STSolutionPack_ApplicationModulePublicElementStructure

	/// <summary>
	/// Structure <code>STSolutionPack_ApplicationDependencyStructure</code> that represents the Service
	///  Studio structure <code>SolutionPack_ApplicationDependency</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_ApplicationDependencyStructure: ISerializable, ITypedRecord<STSolutionPack_ApplicationDependencyStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*P1OdNCvcyUqNAuI8Ad7k3g");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7Nd2LAyxAUGN6NSDZyXFyw");
		internal static readonly GlobalObjectKey IdReferencedModules = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*T30V7epBnEmGJJhXI_qFAw");
		internal static readonly GlobalObjectKey IdForgeBaseVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WPdUMivg2Ue0Wj9sdpZj+g");
		internal static readonly GlobalObjectKey IdHasLocalChanges = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_4H0GiTIIESJTqqSDqcoLw");
		internal static readonly GlobalObjectKey IdContentHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AHdCRDgKukaqYywoag0pvQ");
		internal static readonly GlobalObjectKey IdAPIHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*G8UOQIeWOUG0FX0YHhty8g");
		internal static readonly GlobalObjectKey IdApplicationKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dVQu62jHyEq34oGeRwO+2g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("ReferencedModules")]
		public RLSolutionPack_ApplicationReferencedModuleRecordList ssReferencedModules;

		[System.Xml.Serialization.XmlElement("ForgeBaseVersion")]
		public decimal ssForgeBaseVersion;

		[System.Xml.Serialization.XmlElement("HasLocalChanges")]
		public bool ssHasLocalChanges;

		[System.Xml.Serialization.XmlElement("ContentHash")]
		public string ssContentHash;

		[System.Xml.Serialization.XmlElement("APIHash")]
		public string ssAPIHash;

		[System.Xml.Serialization.XmlElement("ApplicationKind")]
		public string ssApplicationKind;


		public BitArray OptimizedAttributes;

		public STSolutionPack_ApplicationDependencyStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssReferencedModules = new RLSolutionPack_ApplicationReferencedModuleRecordList();
			ssForgeBaseVersion = 0.0M;
			ssHasLocalChanges = false;
			ssContentHash = "";
			ssAPIHash = "";
			ssApplicationKind = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "SolutionPack_ApplicationDependency.Name", "");
			ssKey = r.ReadText(index++, "SolutionPack_ApplicationDependency.Key", "");
			ssForgeBaseVersion = r.ReadDecimal(index++, "SolutionPack_ApplicationDependency.ForgeBaseVersion", 0.0M);
			ssHasLocalChanges = r.ReadBoolean(index++, "SolutionPack_ApplicationDependency.HasLocalChanges", false);
			ssContentHash = r.ReadText(index++, "SolutionPack_ApplicationDependency.ContentHash", "");
			ssAPIHash = r.ReadText(index++, "SolutionPack_ApplicationDependency.APIHash", "");
			ssApplicationKind = r.ReadText(index++, "SolutionPack_ApplicationDependency.ApplicationKind", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_ApplicationDependencyStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_ApplicationDependencyStructure a, STSolutionPack_ApplicationDependencyStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssReferencedModules != b.ssReferencedModules) return false;
			if (a.ssForgeBaseVersion != b.ssForgeBaseVersion) return false;
			if (a.ssHasLocalChanges != b.ssHasLocalChanges) return false;
			if (a.ssContentHash != b.ssContentHash) return false;
			if (a.ssAPIHash != b.ssAPIHash) return false;
			if (a.ssApplicationKind != b.ssApplicationKind) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_ApplicationDependencyStructure a, STSolutionPack_ApplicationDependencyStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_ApplicationDependencyStructure)) return false;
			return (this == (STSolutionPack_ApplicationDependencyStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssReferencedModules.GetHashCode()
				^ ssForgeBaseVersion.GetHashCode()
				^ ssHasLocalChanges.GetHashCode()
				^ ssContentHash.GetHashCode()
				^ ssAPIHash.GetHashCode()
				^ ssApplicationKind.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_ApplicationDependencyStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssReferencedModules = new RLSolutionPack_ApplicationReferencedModuleRecordList();
			ssForgeBaseVersion = 0.0M;
			ssHasLocalChanges = false;
			ssContentHash = "";
			ssAPIHash = "";
			ssApplicationKind = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReferencedModules", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReferencedModules' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReferencedModules = (RLSolutionPack_ApplicationReferencedModuleRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssForgeBaseVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssForgeBaseVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssForgeBaseVersion = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHasLocalChanges", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHasLocalChanges' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHasLocalChanges = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContentHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContentHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContentHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAPIHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAPIHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAPIHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssReferencedModules.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssReferencedModules.InternalRecursiveSave();
		}


		public STSolutionPack_ApplicationDependencyStructure Duplicate() {
			STSolutionPack_ApplicationDependencyStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssReferencedModules = (RLSolutionPack_ApplicationReferencedModuleRecordList) this.ssReferencedModules.Duplicate();
			t.ssForgeBaseVersion = this.ssForgeBaseVersion;
			t.ssHasLocalChanges = this.ssHasLocalChanges;
			t.ssContentHash = this.ssContentHash;
			t.ssAPIHash = this.ssAPIHash;
			t.ssApplicationKind = this.ssApplicationKind;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				ssReferencedModules.ToXml(this, recordElem, "ReferencedModules", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ForgeBaseVersion")) VarValue.AppendAttribute(recordElem, "ForgeBaseVersion", ssForgeBaseVersion, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "ForgeBaseVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasLocalChanges")) VarValue.AppendAttribute(recordElem, "HasLocalChanges", ssHasLocalChanges, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasLocalChanges");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ContentHash")) VarValue.AppendAttribute(recordElem, "ContentHash", ssContentHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ContentHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".APIHash")) VarValue.AppendAttribute(recordElem, "APIHash", ssAPIHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "APIHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKind")) VarValue.AppendAttribute(recordElem, "ApplicationKind", ssApplicationKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKind");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "referencedmodules") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReferencedModules")) variable.Value = ssReferencedModules; else variable.Optimized = true;
				variable.SetFieldName("referencedmodules");
			} else if (head == "forgebaseversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ForgeBaseVersion")) variable.Value = ssForgeBaseVersion; else variable.Optimized = true;
			} else if (head == "haslocalchanges") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasLocalChanges")) variable.Value = ssHasLocalChanges; else variable.Optimized = true;
			} else if (head == "contenthash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ContentHash")) variable.Value = ssContentHash; else variable.Optimized = true;
			} else if (head == "apihash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".APIHash")) variable.Value = ssAPIHash; else variable.Optimized = true;
			} else if (head == "applicationkind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKind")) variable.Value = ssApplicationKind; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdReferencedModules) {
				return ssReferencedModules;
			} else if (key == IdForgeBaseVersion) {
				return ssForgeBaseVersion;
			} else if (key == IdHasLocalChanges) {
				return ssHasLocalChanges;
			} else if (key == IdContentHash) {
				return ssContentHash;
			} else if (key == IdAPIHash) {
				return ssAPIHash;
			} else if (key == IdApplicationKind) {
				return ssApplicationKind;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssReferencedModules = new RLSolutionPack_ApplicationReferencedModuleRecordList();
			ssReferencedModules.FillFromOther((IOSList) other.AttributeGet(IdReferencedModules));
			ssForgeBaseVersion = (decimal) other.AttributeGet(IdForgeBaseVersion);
			ssHasLocalChanges = (bool) other.AttributeGet(IdHasLocalChanges);
			ssContentHash = (string) other.AttributeGet(IdContentHash);
			ssAPIHash = (string) other.AttributeGet(IdAPIHash);
			ssApplicationKind = (string) other.AttributeGet(IdApplicationKind);
		}
		public bool IsDefault() {
			STSolutionPack_ApplicationDependencyStructure defaultStruct = new STSolutionPack_ApplicationDependencyStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssReferencedModules != null && this.ssReferencedModules.Length != 0) return false;
			if (this.ssForgeBaseVersion != defaultStruct.ssForgeBaseVersion) return false;
			if (this.ssHasLocalChanges != defaultStruct.ssHasLocalChanges) return false;
			if (this.ssContentHash != defaultStruct.ssContentHash) return false;
			if (this.ssAPIHash != defaultStruct.ssAPIHash) return false;
			if (this.ssApplicationKind != defaultStruct.ssApplicationKind) return false;
			return true;
		}
	} // STSolutionPack_ApplicationDependencyStructure

	/// <summary>
	/// Structure <code>STSolutionPack_ApplicationReferencedModuleStructure</code> that represents the
	///  Service Studio structure <code>SolutionPack_ApplicationReferencedModule</code> <p> Description
	/// : </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_ApplicationReferencedModuleStructure: ISerializable, ITypedRecord<STSolutionPack_ApplicationReferencedModuleStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2CtTzF+f5U2Wvw3iHMAyjg");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oxjc+m2un0iISPnrjAZaig");
		internal static readonly GlobalObjectKey IdReferencedAPI = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PcwYXnDaP0Cbd9pJ4hfpxQ");
		internal static readonly GlobalObjectKey IdESpaceType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*LJyQC9XsBU20Q17esLXhTA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UID")]
		public string ssUID;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("ReferencedAPI")]
		public RLSolutionPack_ApplicationModulePublicElementRecordList ssReferencedAPI;

		[System.Xml.Serialization.XmlElement("ESpaceType")]
		public string ssESpaceType;


		public BitArray OptimizedAttributes;

		public STSolutionPack_ApplicationReferencedModuleStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssReferencedAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssESpaceType = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUID = r.ReadText(index++, "SolutionPack_ApplicationReferencedModule.UID", "");
			ssKind = r.ReadText(index++, "SolutionPack_ApplicationReferencedModule.Kind", "");
			ssESpaceType = r.ReadText(index++, "SolutionPack_ApplicationReferencedModule.ESpaceType", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_ApplicationReferencedModuleStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_ApplicationReferencedModuleStructure a, STSolutionPack_ApplicationReferencedModuleStructure b) {
			if (a.ssUID != b.ssUID) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssReferencedAPI != b.ssReferencedAPI) return false;
			if (a.ssESpaceType != b.ssESpaceType) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_ApplicationReferencedModuleStructure a, STSolutionPack_ApplicationReferencedModuleStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_ApplicationReferencedModuleStructure)) return false;
			return (this == (STSolutionPack_ApplicationReferencedModuleStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUID.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssReferencedAPI.GetHashCode()
				^ ssESpaceType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_ApplicationReferencedModuleStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUID = "";
			ssKind = "";
			ssReferencedAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssESpaceType = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReferencedAPI", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReferencedAPI' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReferencedAPI = (RLSolutionPack_ApplicationModulePublicElementRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssESpaceType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssESpaceType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssESpaceType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssReferencedAPI.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssReferencedAPI.InternalRecursiveSave();
		}


		public STSolutionPack_ApplicationReferencedModuleStructure Duplicate() {
			STSolutionPack_ApplicationReferencedModuleStructure t;
			t.ssUID = this.ssUID;
			t.ssKind = this.ssKind;
			t.ssReferencedAPI = (RLSolutionPack_ApplicationModulePublicElementRecordList) this.ssReferencedAPI.Duplicate();
			t.ssESpaceType = this.ssESpaceType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UID")) VarValue.AppendAttribute(recordElem, "UID", ssUID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				ssReferencedAPI.ToXml(this, recordElem, "ReferencedAPI", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ESpaceType")) VarValue.AppendAttribute(recordElem, "ESpaceType", ssESpaceType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ESpaceType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UID")) variable.Value = ssUID; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "referencedapi") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReferencedAPI")) variable.Value = ssReferencedAPI; else variable.Optimized = true;
				variable.SetFieldName("referencedapi");
			} else if (head == "espacetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESpaceType")) variable.Value = ssESpaceType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUID) {
				return ssUID;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdReferencedAPI) {
				return ssReferencedAPI;
			} else if (key == IdESpaceType) {
				return ssESpaceType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUID = (string) other.AttributeGet(IdUID);
			ssKind = (string) other.AttributeGet(IdKind);
			ssReferencedAPI = new RLSolutionPack_ApplicationModulePublicElementRecordList();
			ssReferencedAPI.FillFromOther((IOSList) other.AttributeGet(IdReferencedAPI));
			ssESpaceType = (string) other.AttributeGet(IdESpaceType);
		}
		public bool IsDefault() {
			STSolutionPack_ApplicationReferencedModuleStructure defaultStruct = new STSolutionPack_ApplicationReferencedModuleStructure(null);
			if (this.ssUID != defaultStruct.ssUID) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssReferencedAPI != null && this.ssReferencedAPI.Length != 0) return false;
			if (this.ssESpaceType != defaultStruct.ssESpaceType) return false;
			return true;
		}
	} // STSolutionPack_ApplicationReferencedModuleStructure

	/// <summary>
	/// Structure <code>STEntityDBProviderKeyStructure</code> that represents the Service Studio structure
	///  <code>EntityDBProviderKey</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEntityDBProviderKeyStructure: ISerializable, ITypedRecord<STEntityDBProviderKeyStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdEntityKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3KdTC5_Xr0SyTfO9jAQw0Q");
		internal static readonly GlobalObjectKey IdDBProviderKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*tCswuzay9Eq+PYafjjAuQg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("EntityKey")]
		public string ssEntityKey;

		[System.Xml.Serialization.XmlElement("DBProviderKey")]
		public string ssDBProviderKey;


		public BitArray OptimizedAttributes;

		public STEntityDBProviderKeyStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssEntityKey = "";
			ssDBProviderKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssEntityKey = r.ReadText(index++, "EntityDBProviderKey.EntityKey", "");
			ssDBProviderKey = r.ReadText(index++, "EntityDBProviderKey.DBProviderKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEntityDBProviderKeyStructure r) {
			this = r;
		}


		public static bool operator == (STEntityDBProviderKeyStructure a, STEntityDBProviderKeyStructure b) {
			if (a.ssEntityKey != b.ssEntityKey) return false;
			if (a.ssDBProviderKey != b.ssDBProviderKey) return false;
			return true;
		}

		public static bool operator != (STEntityDBProviderKeyStructure a, STEntityDBProviderKeyStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEntityDBProviderKeyStructure)) return false;
			return (this == (STEntityDBProviderKeyStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssEntityKey.GetHashCode()
				^ ssDBProviderKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEntityDBProviderKeyStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssEntityKey = "";
			ssDBProviderKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssEntityKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEntityKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEntityKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDBProviderKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDBProviderKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDBProviderKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEntityDBProviderKeyStructure Duplicate() {
			STEntityDBProviderKeyStructure t;
			t.ssEntityKey = this.ssEntityKey;
			t.ssDBProviderKey = this.ssDBProviderKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EntityKey")) VarValue.AppendAttribute(recordElem, "EntityKey", ssEntityKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EntityKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DBProviderKey")) VarValue.AppendAttribute(recordElem, "DBProviderKey", ssDBProviderKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DBProviderKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "entitykey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EntityKey")) variable.Value = ssEntityKey; else variable.Optimized = true;
			} else if (head == "dbproviderkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBProviderKey")) variable.Value = ssDBProviderKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEntityKey) {
				return ssEntityKey;
			} else if (key == IdDBProviderKey) {
				return ssDBProviderKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssEntityKey = (string) other.AttributeGet(IdEntityKey);
			ssDBProviderKey = (string) other.AttributeGet(IdDBProviderKey);
		}
		public bool IsDefault() {
			STEntityDBProviderKeyStructure defaultStruct = new STEntityDBProviderKeyStructure(null);
			if (this.ssEntityKey != defaultStruct.ssEntityKey) return false;
			if (this.ssDBProviderKey != defaultStruct.ssDBProviderKey) return false;
			return true;
		}
	} // STEntityDBProviderKeyStructure

	/// <summary>
	/// Structure <code>STDALEntityHighlightingHashStructure</code> that represents the Service Studio
	///  structure <code>DALEntityHighlightingHash</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDALEntityHighlightingHashStructure: ISerializable, ITypedRecord<STDALEntityHighlightingHashStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdModuleKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bk64apOfBUCSHut2cc5saQ");
		internal static readonly GlobalObjectKey IdEntityKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QQikL_wBFE2W3S3bmiRpkA");
		internal static readonly GlobalObjectKey IdHighlightingHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gO3_s2fYlUqhh3DtqEeO3w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ModuleKey")]
		public string ssModuleKey;

		[System.Xml.Serialization.XmlElement("EntityKey")]
		public string ssEntityKey;

		[System.Xml.Serialization.XmlElement("HighlightingHash")]
		public string ssHighlightingHash;


		public BitArray OptimizedAttributes;

		public STDALEntityHighlightingHashStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssModuleKey = "";
			ssEntityKey = "";
			ssHighlightingHash = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssModuleKey = r.ReadText(index++, "DALEntityHighlightingHash.ModuleKey", "");
			ssEntityKey = r.ReadText(index++, "DALEntityHighlightingHash.EntityKey", "");
			ssHighlightingHash = r.ReadText(index++, "DALEntityHighlightingHash.HighlightingHash", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDALEntityHighlightingHashStructure r) {
			this = r;
		}


		public static bool operator == (STDALEntityHighlightingHashStructure a, STDALEntityHighlightingHashStructure b) {
			if (a.ssModuleKey != b.ssModuleKey) return false;
			if (a.ssEntityKey != b.ssEntityKey) return false;
			if (a.ssHighlightingHash != b.ssHighlightingHash) return false;
			return true;
		}

		public static bool operator != (STDALEntityHighlightingHashStructure a, STDALEntityHighlightingHashStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDALEntityHighlightingHashStructure)) return false;
			return (this == (STDALEntityHighlightingHashStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssModuleKey.GetHashCode()
				^ ssEntityKey.GetHashCode()
				^ ssHighlightingHash.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDALEntityHighlightingHashStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssModuleKey = "";
			ssEntityKey = "";
			ssHighlightingHash = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssModuleKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssModuleKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssModuleKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEntityKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEntityKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEntityKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHighlightingHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHighlightingHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHighlightingHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDALEntityHighlightingHashStructure Duplicate() {
			STDALEntityHighlightingHashStructure t;
			t.ssModuleKey = this.ssModuleKey;
			t.ssEntityKey = this.ssEntityKey;
			t.ssHighlightingHash = this.ssHighlightingHash;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ModuleKey")) VarValue.AppendAttribute(recordElem, "ModuleKey", ssModuleKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ModuleKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EntityKey")) VarValue.AppendAttribute(recordElem, "EntityKey", ssEntityKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EntityKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HighlightingHash")) VarValue.AppendAttribute(recordElem, "HighlightingHash", ssHighlightingHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HighlightingHash");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "modulekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ModuleKey")) variable.Value = ssModuleKey; else variable.Optimized = true;
			} else if (head == "entitykey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EntityKey")) variable.Value = ssEntityKey; else variable.Optimized = true;
			} else if (head == "highlightinghash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HighlightingHash")) variable.Value = ssHighlightingHash; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdModuleKey) {
				return ssModuleKey;
			} else if (key == IdEntityKey) {
				return ssEntityKey;
			} else if (key == IdHighlightingHash) {
				return ssHighlightingHash;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssModuleKey = (string) other.AttributeGet(IdModuleKey);
			ssEntityKey = (string) other.AttributeGet(IdEntityKey);
			ssHighlightingHash = (string) other.AttributeGet(IdHighlightingHash);
		}
		public bool IsDefault() {
			STDALEntityHighlightingHashStructure defaultStruct = new STDALEntityHighlightingHashStructure(null);
			if (this.ssModuleKey != defaultStruct.ssModuleKey) return false;
			if (this.ssEntityKey != defaultStruct.ssEntityKey) return false;
			if (this.ssHighlightingHash != defaultStruct.ssHighlightingHash) return false;
			return true;
		}
	} // STDALEntityHighlightingHashStructure

	/// <summary>
	/// Structure <code>STDALHighlightingDefinitionStructure</code> that represents the Service Studio
	///  structure <code>DALHighlightingDefinition</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDALHighlightingDefinitionStructure: ISerializable, ITypedRecord<STDALHighlightingDefinitionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*miNLyeuhcEahdW0855D8OQ");
		internal static readonly GlobalObjectKey IdKeywords = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uRpKLvu6+UyipMvhDEchNA");
		internal static readonly GlobalObjectKey IdFunctions = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3PfmWg7KTECZRen0lBb8sA");
		internal static readonly GlobalObjectKey IdOperators = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1ESYO36rlEuSkpve3Q4TFw");
		internal static readonly GlobalObjectKey IdDataTypes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pdlR7sMu70SVE2Pfiqwd7w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Hash")]
		public string ssHash;

		[System.Xml.Serialization.XmlElement("Keywords")]
		public RLTextRecordList ssKeywords;

		[System.Xml.Serialization.XmlElement("Functions")]
		public RLTextRecordList ssFunctions;

		[System.Xml.Serialization.XmlElement("Operators")]
		public RLTextRecordList ssOperators;

		[System.Xml.Serialization.XmlElement("DataTypes")]
		public RLTextRecordList ssDataTypes;


		public BitArray OptimizedAttributes;

		public STDALHighlightingDefinitionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssHash = "";
			ssKeywords = new RLTextRecordList();
			ssFunctions = new RLTextRecordList();
			ssOperators = new RLTextRecordList();
			ssDataTypes = new RLTextRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssHash = r.ReadText(index++, "DALHighlightingDefinition.Hash", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDALHighlightingDefinitionStructure r) {
			this = r;
		}


		public static bool operator == (STDALHighlightingDefinitionStructure a, STDALHighlightingDefinitionStructure b) {
			if (a.ssHash != b.ssHash) return false;
			if (a.ssKeywords != b.ssKeywords) return false;
			if (a.ssFunctions != b.ssFunctions) return false;
			if (a.ssOperators != b.ssOperators) return false;
			if (a.ssDataTypes != b.ssDataTypes) return false;
			return true;
		}

		public static bool operator != (STDALHighlightingDefinitionStructure a, STDALHighlightingDefinitionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDALHighlightingDefinitionStructure)) return false;
			return (this == (STDALHighlightingDefinitionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssHash.GetHashCode()
				^ ssKeywords.GetHashCode()
				^ ssFunctions.GetHashCode()
				^ ssOperators.GetHashCode()
				^ ssDataTypes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDALHighlightingDefinitionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssHash = "";
			ssKeywords = new RLTextRecordList();
			ssFunctions = new RLTextRecordList();
			ssOperators = new RLTextRecordList();
			ssDataTypes = new RLTextRecordList();
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKeywords", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKeywords' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKeywords = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFunctions", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFunctions' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFunctions = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOperators", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOperators' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOperators = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDataTypes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataTypes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataTypes = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssKeywords.RecursiveReset();
			ssFunctions.RecursiveReset();
			ssOperators.RecursiveReset();
			ssDataTypes.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssKeywords.InternalRecursiveSave();
			ssFunctions.InternalRecursiveSave();
			ssOperators.InternalRecursiveSave();
			ssDataTypes.InternalRecursiveSave();
		}


		public STDALHighlightingDefinitionStructure Duplicate() {
			STDALHighlightingDefinitionStructure t;
			t.ssHash = this.ssHash;
			t.ssKeywords = (RLTextRecordList) this.ssKeywords.Duplicate();
			t.ssFunctions = (RLTextRecordList) this.ssFunctions.Duplicate();
			t.ssOperators = (RLTextRecordList) this.ssOperators.Duplicate();
			t.ssDataTypes = (RLTextRecordList) this.ssDataTypes.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Hash")) VarValue.AppendAttribute(recordElem, "Hash", ssHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Hash");
				ssKeywords.ToXml(this, recordElem, "Keywords", detailLevel - 1);
				ssFunctions.ToXml(this, recordElem, "Functions", detailLevel - 1);
				ssOperators.ToXml(this, recordElem, "Operators", detailLevel - 1);
				ssDataTypes.ToXml(this, recordElem, "DataTypes", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "hash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Hash")) variable.Value = ssHash; else variable.Optimized = true;
			} else if (head == "keywords") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Keywords")) variable.Value = ssKeywords; else variable.Optimized = true;
				variable.SetFieldName("keywords");
			} else if (head == "functions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Functions")) variable.Value = ssFunctions; else variable.Optimized = true;
				variable.SetFieldName("functions");
			} else if (head == "operators") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Operators")) variable.Value = ssOperators; else variable.Optimized = true;
				variable.SetFieldName("operators");
			} else if (head == "datatypes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataTypes")) variable.Value = ssDataTypes; else variable.Optimized = true;
				variable.SetFieldName("datatypes");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdHash) {
				return ssHash;
			} else if (key == IdKeywords) {
				return ssKeywords;
			} else if (key == IdFunctions) {
				return ssFunctions;
			} else if (key == IdOperators) {
				return ssOperators;
			} else if (key == IdDataTypes) {
				return ssDataTypes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssHash = (string) other.AttributeGet(IdHash);
			ssKeywords = new RLTextRecordList();
			ssKeywords.FillFromOther((IOSList) other.AttributeGet(IdKeywords));
			ssFunctions = new RLTextRecordList();
			ssFunctions.FillFromOther((IOSList) other.AttributeGet(IdFunctions));
			ssOperators = new RLTextRecordList();
			ssOperators.FillFromOther((IOSList) other.AttributeGet(IdOperators));
			ssDataTypes = new RLTextRecordList();
			ssDataTypes.FillFromOther((IOSList) other.AttributeGet(IdDataTypes));
		}
		public bool IsDefault() {
			STDALHighlightingDefinitionStructure defaultStruct = new STDALHighlightingDefinitionStructure(null);
			if (this.ssHash != defaultStruct.ssHash) return false;
			if (this.ssKeywords != null && this.ssKeywords.Length != 0) return false;
			if (this.ssFunctions != null && this.ssFunctions.Length != 0) return false;
			if (this.ssOperators != null && this.ssOperators.Length != 0) return false;
			if (this.ssDataTypes != null && this.ssDataTypes.Length != 0) return false;
			return true;
		}
	} // STDALHighlightingDefinitionStructure

	/// <summary>
	/// Structure <code>STModuleDefinitionStructure</code> that represents the Service Studio structure
	///  <code>ModuleDefinition</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STModuleDefinitionStructure: ISerializable, ITypedRecord<STModuleDefinitionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey Idid = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*fxeO8KaSTkek+4xdjjQxxg");
		internal static readonly GlobalObjectKey Idname = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oLQAb33800+UxQTbe_armg");
		internal static readonly GlobalObjectKey IdisActive = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*t51BXKkda0KuSl1oPIdwJA");
		internal static readonly GlobalObjectKey IdmoduleType = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*XPfbF7sgY0qcXtS8b7dEbA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("id")]
		public int ssid;

		[System.Xml.Serialization.XmlElement("name")]
		public string ssname;

		[System.Xml.Serialization.XmlElement("isActive")]
		public bool ssisActive;

		[System.Xml.Serialization.XmlElement("moduleType")]
		public string ssmoduleType;


		public BitArray OptimizedAttributes;

		public STModuleDefinitionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssmoduleType = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssid = r.ReadInteger(index++, "ModuleDefinition.id", 0);
			ssname = r.ReadText(index++, "ModuleDefinition.name", "");
			ssisActive = r.ReadBoolean(index++, "ModuleDefinition.isActive", false);
			ssmoduleType = r.ReadText(index++, "ModuleDefinition.moduleType", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STModuleDefinitionStructure r) {
			this = r;
		}


		public static bool operator == (STModuleDefinitionStructure a, STModuleDefinitionStructure b) {
			if (a.ssid != b.ssid) return false;
			if (a.ssname != b.ssname) return false;
			if (a.ssisActive != b.ssisActive) return false;
			if (a.ssmoduleType != b.ssmoduleType) return false;
			return true;
		}

		public static bool operator != (STModuleDefinitionStructure a, STModuleDefinitionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STModuleDefinitionStructure)) return false;
			return (this == (STModuleDefinitionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssid.GetHashCode()
				^ ssname.GetHashCode()
				^ ssisActive.GetHashCode()
				^ ssmoduleType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STModuleDefinitionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssmoduleType = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssid = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssname", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssname' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssname = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssisActive", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssisActive' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssisActive = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssmoduleType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssmoduleType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssmoduleType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STModuleDefinitionStructure Duplicate() {
			STModuleDefinitionStructure t;
			t.ssid = this.ssid;
			t.ssname = this.ssname;
			t.ssisActive = this.ssisActive;
			t.ssmoduleType = this.ssmoduleType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".id")) VarValue.AppendAttribute(recordElem, "id", ssid, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".name")) VarValue.AppendAttribute(recordElem, "name", ssname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".isActive")) VarValue.AppendAttribute(recordElem, "isActive", ssisActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "isActive");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".moduleType")) VarValue.AppendAttribute(recordElem, "moduleType", ssmoduleType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "moduleType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".id")) variable.Value = ssid; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".name")) variable.Value = ssname; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".isActive")) variable.Value = ssisActive; else variable.Optimized = true;
			} else if (head == "moduletype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".moduleType")) variable.Value = ssmoduleType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Idid) {
				return ssid;
			} else if (key == Idname) {
				return ssname;
			} else if (key == IdisActive) {
				return ssisActive;
			} else if (key == IdmoduleType) {
				return ssmoduleType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssid = (int) other.AttributeGet(Idid);
			ssname = (string) other.AttributeGet(Idname);
			ssisActive = (bool) other.AttributeGet(IdisActive);
			ssmoduleType = (string) other.AttributeGet(IdmoduleType);
		}
		public bool IsDefault() {
			STModuleDefinitionStructure defaultStruct = new STModuleDefinitionStructure(null);
			if (this.ssid != defaultStruct.ssid) return false;
			if (this.ssname != defaultStruct.ssname) return false;
			if (this.ssisActive != defaultStruct.ssisActive) return false;
			if (this.ssmoduleType != defaultStruct.ssmoduleType) return false;
			return true;
		}
	} // STModuleDefinitionStructure

	/// <summary>
	/// Structure <code>STEntityDefinitionStructure</code> that represents the Service Studio structure
	///  <code>EntityDefinition</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEntityDefinitionStructure: ISerializable, ITypedRecord<STEntityDefinitionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey Idid = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*joJEqOliU0SKJXtd9B8wwA");
		internal static readonly GlobalObjectKey Idname = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oBnuknw1ZEiEmCn1mlXP2w");
		internal static readonly GlobalObjectKey IdisActive = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2zyvoemvv02IuP2bbmjEsA");
		internal static readonly GlobalObjectKey Idowner = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9NM_uIVOL0uqLxejbAv+ow");
		internal static readonly GlobalObjectKey IdphysicalTableName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*OIFlQUYXt0SwnnoPRroM7A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("id")]
		public int ssid;

		[System.Xml.Serialization.XmlElement("name")]
		public string ssname;

		[System.Xml.Serialization.XmlElement("isActive")]
		public bool ssisActive;

		[System.Xml.Serialization.XmlElement("owner")]
		public RCModuleDefinitionRecord ssowner;

		[System.Xml.Serialization.XmlElement("physicalTableName")]
		public string ssphysicalTableName;


		public BitArray OptimizedAttributes;

		public STEntityDefinitionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssowner = new RCModuleDefinitionRecord(null);
			ssphysicalTableName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssowner.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssid = r.ReadInteger(index++, "EntityDefinition.id", 0);
			ssname = r.ReadText(index++, "EntityDefinition.name", "");
			ssisActive = r.ReadBoolean(index++, "EntityDefinition.isActive", false);
			ssphysicalTableName = r.ReadText(index++, "EntityDefinition.physicalTableName", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEntityDefinitionStructure r) {
			this = r;
		}


		public static bool operator == (STEntityDefinitionStructure a, STEntityDefinitionStructure b) {
			if (a.ssid != b.ssid) return false;
			if (a.ssname != b.ssname) return false;
			if (a.ssisActive != b.ssisActive) return false;
			if (a.ssowner != b.ssowner) return false;
			if (a.ssphysicalTableName != b.ssphysicalTableName) return false;
			return true;
		}

		public static bool operator != (STEntityDefinitionStructure a, STEntityDefinitionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEntityDefinitionStructure)) return false;
			return (this == (STEntityDefinitionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssid.GetHashCode()
				^ ssname.GetHashCode()
				^ ssisActive.GetHashCode()
				^ ssowner.GetHashCode()
				^ ssphysicalTableName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEntityDefinitionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssowner = new RCModuleDefinitionRecord(null);
			ssphysicalTableName = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssid = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssname", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssname' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssname = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssisActive", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssisActive' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssisActive = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssowner", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssowner' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssowner = (RCModuleDefinitionRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssphysicalTableName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssphysicalTableName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssphysicalTableName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssowner.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssowner.InternalRecursiveSave();
		}


		public STEntityDefinitionStructure Duplicate() {
			STEntityDefinitionStructure t;
			t.ssid = this.ssid;
			t.ssname = this.ssname;
			t.ssisActive = this.ssisActive;
			t.ssowner = (RCModuleDefinitionRecord) this.ssowner.Duplicate();
			t.ssphysicalTableName = this.ssphysicalTableName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".id")) VarValue.AppendAttribute(recordElem, "id", ssid, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".name")) VarValue.AppendAttribute(recordElem, "name", ssname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".isActive")) VarValue.AppendAttribute(recordElem, "isActive", ssisActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "isActive");
				ssowner.ToXml(this, recordElem, "owner", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".physicalTableName")) VarValue.AppendAttribute(recordElem, "physicalTableName", ssphysicalTableName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "physicalTableName");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".id")) variable.Value = ssid; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".name")) variable.Value = ssname; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".isActive")) variable.Value = ssisActive; else variable.Optimized = true;
			} else if (head == "owner") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".owner")) variable.Value = ssowner; else variable.Optimized = true;
				variable.SetFieldName("owner");
			} else if (head == "physicaltablename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".physicalTableName")) variable.Value = ssphysicalTableName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Idid) {
				return ssid;
			} else if (key == Idname) {
				return ssname;
			} else if (key == IdisActive) {
				return ssisActive;
			} else if (key == Idowner) {
				return ssowner;
			} else if (key == IdphysicalTableName) {
				return ssphysicalTableName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssid = (int) other.AttributeGet(Idid);
			ssname = (string) other.AttributeGet(Idname);
			ssisActive = (bool) other.AttributeGet(IdisActive);
			ssowner.FillFromOther((IRecord) other.AttributeGet(Idowner));
			ssphysicalTableName = (string) other.AttributeGet(IdphysicalTableName);
		}
		public bool IsDefault() {
			STEntityDefinitionStructure defaultStruct = new STEntityDefinitionStructure(null);
			if (this.ssid != defaultStruct.ssid) return false;
			if (this.ssname != defaultStruct.ssname) return false;
			if (this.ssisActive != defaultStruct.ssisActive) return false;
			if (this.ssowner != defaultStruct.ssowner) return false;
			if (this.ssphysicalTableName != defaultStruct.ssphysicalTableName) return false;
			return true;
		}
	} // STEntityDefinitionStructure

	/// <summary>
	/// Structure <code>STAttributeDefinitionStructure</code> that represents the Service Studio structure
	///  <code>AttributeDefinition</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STAttributeDefinitionStructure: ISerializable, ITypedRecord<STAttributeDefinitionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey Idid = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Oy6OnaBG1k2jjKc2xmvFbQ");
		internal static readonly GlobalObjectKey Idname = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WwjVx8sOp0SspTdtFHg+rQ");
		internal static readonly GlobalObjectKey IdisActive = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1oGtSw4QhECcrCD4so7+wQ");
		internal static readonly GlobalObjectKey Idowner = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KXgHgzba1k+QFJe6D8uTaQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("id")]
		public int ssid;

		[System.Xml.Serialization.XmlElement("name")]
		public string ssname;

		[System.Xml.Serialization.XmlElement("isActive")]
		public bool ssisActive;

		[System.Xml.Serialization.XmlElement("owner")]
		public RCEntityDefinitionRecord ssowner;


		public BitArray OptimizedAttributes;

		public STAttributeDefinitionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssowner = new RCEntityDefinitionRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssowner.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssid = r.ReadInteger(index++, "AttributeDefinition.id", 0);
			ssname = r.ReadText(index++, "AttributeDefinition.name", "");
			ssisActive = r.ReadBoolean(index++, "AttributeDefinition.isActive", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAttributeDefinitionStructure r) {
			this = r;
		}


		public static bool operator == (STAttributeDefinitionStructure a, STAttributeDefinitionStructure b) {
			if (a.ssid != b.ssid) return false;
			if (a.ssname != b.ssname) return false;
			if (a.ssisActive != b.ssisActive) return false;
			if (a.ssowner != b.ssowner) return false;
			return true;
		}

		public static bool operator != (STAttributeDefinitionStructure a, STAttributeDefinitionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAttributeDefinitionStructure)) return false;
			return (this == (STAttributeDefinitionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssid.GetHashCode()
				^ ssname.GetHashCode()
				^ ssisActive.GetHashCode()
				^ ssowner.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAttributeDefinitionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssid = 0;
			ssname = "";
			ssisActive = false;
			ssowner = new RCEntityDefinitionRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssid = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssname", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssname' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssname = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssisActive", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssisActive' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssisActive = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssowner", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssowner' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssowner = (RCEntityDefinitionRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssowner.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssowner.InternalRecursiveSave();
		}


		public STAttributeDefinitionStructure Duplicate() {
			STAttributeDefinitionStructure t;
			t.ssid = this.ssid;
			t.ssname = this.ssname;
			t.ssisActive = this.ssisActive;
			t.ssowner = (RCEntityDefinitionRecord) this.ssowner.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".id")) VarValue.AppendAttribute(recordElem, "id", ssid, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".name")) VarValue.AppendAttribute(recordElem, "name", ssname, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".isActive")) VarValue.AppendAttribute(recordElem, "isActive", ssisActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "isActive");
				ssowner.ToXml(this, recordElem, "owner", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".id")) variable.Value = ssid; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".name")) variable.Value = ssname; else variable.Optimized = true;
			} else if (head == "isactive") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".isActive")) variable.Value = ssisActive; else variable.Optimized = true;
			} else if (head == "owner") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".owner")) variable.Value = ssowner; else variable.Optimized = true;
				variable.SetFieldName("owner");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Idid) {
				return ssid;
			} else if (key == Idname) {
				return ssname;
			} else if (key == IdisActive) {
				return ssisActive;
			} else if (key == Idowner) {
				return ssowner;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssid = (int) other.AttributeGet(Idid);
			ssname = (string) other.AttributeGet(Idname);
			ssisActive = (bool) other.AttributeGet(IdisActive);
			ssowner.FillFromOther((IRecord) other.AttributeGet(Idowner));
		}
		public bool IsDefault() {
			STAttributeDefinitionStructure defaultStruct = new STAttributeDefinitionStructure(null);
			if (this.ssid != defaultStruct.ssid) return false;
			if (this.ssname != defaultStruct.ssname) return false;
			if (this.ssisActive != defaultStruct.ssisActive) return false;
			if (this.ssowner != defaultStruct.ssowner) return false;
			return true;
		}
	} // STAttributeDefinitionStructure

	/// <summary>
	/// Structure <code>STModuleVersionDefinitionStructure</code> that represents the Service Studio
	///  structure <code>ModuleVersionDefinition</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STModuleVersionDefinitionStructure: ISerializable, ITypedRecord<STModuleVersionDefinitionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey Idid = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*JdoismxFFEOowansA9bcgw");
		internal static readonly GlobalObjectKey Idowner = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9oqc_WFgqUyXsQZMMSaY6g");
		internal static readonly GlobalObjectKey Idversion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GB6rRUFiL0edKAbyYs6wuw");
		internal static readonly GlobalObjectKey IduploadedDate = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gVQmSJ+BEUiyiXXcqWfiKQ");
		internal static readonly GlobalObjectKey IdlastModified = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BlBayrG7506yjG5EK9fXIQ");
		internal static readonly GlobalObjectKey IdlastPublishedDate = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QI_B1mwKDkOERNkI48AEqA");
		internal static readonly GlobalObjectKey IdpublishedBy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WHKv_ri+D0+f8ItixiyPrA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("id")]
		public int ssid;

		[System.Xml.Serialization.XmlElement("owner")]
		public RCModuleDefinitionRecord ssowner;

		[System.Xml.Serialization.XmlElement("version")]
		public int ssversion;

		[System.Xml.Serialization.XmlElement("uploadedDate")]
		public DateTime ssuploadedDate;

		[System.Xml.Serialization.XmlElement("lastModified")]
		public DateTime sslastModified;

		[System.Xml.Serialization.XmlElement("lastPublishedDate")]
		public DateTime sslastPublishedDate;

		[System.Xml.Serialization.XmlElement("publishedBy")]
		public string sspublishedBy;


		public BitArray OptimizedAttributes;

		public STModuleVersionDefinitionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssid = 0;
			ssowner = new RCModuleDefinitionRecord(null);
			ssversion = 0;
			ssuploadedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			sslastModified = new DateTime(1900, 1, 1, 0, 0, 0);
			sslastPublishedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			sspublishedBy = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssowner.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssid = r.ReadInteger(index++, "ModuleVersionDefinition.id", 0);
			ssversion = r.ReadInteger(index++, "ModuleVersionDefinition.version", 0);
			ssuploadedDate = r.ReadDateTime(index++, "ModuleVersionDefinition.uploadedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			sslastModified = r.ReadDateTime(index++, "ModuleVersionDefinition.lastModified", new DateTime(1900, 1, 1, 0, 0, 0));
			sslastPublishedDate = r.ReadDateTime(index++, "ModuleVersionDefinition.lastPublishedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			sspublishedBy = r.ReadText(index++, "ModuleVersionDefinition.publishedBy", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STModuleVersionDefinitionStructure r) {
			this = r;
		}


		public static bool operator == (STModuleVersionDefinitionStructure a, STModuleVersionDefinitionStructure b) {
			if (a.ssid != b.ssid) return false;
			if (a.ssowner != b.ssowner) return false;
			if (a.ssversion != b.ssversion) return false;
			if (a.ssuploadedDate != b.ssuploadedDate) return false;
			if (a.sslastModified != b.sslastModified) return false;
			if (a.sslastPublishedDate != b.sslastPublishedDate) return false;
			if (a.sspublishedBy != b.sspublishedBy) return false;
			return true;
		}

		public static bool operator != (STModuleVersionDefinitionStructure a, STModuleVersionDefinitionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STModuleVersionDefinitionStructure)) return false;
			return (this == (STModuleVersionDefinitionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssid.GetHashCode()
				^ ssowner.GetHashCode()
				^ ssversion.GetHashCode()
				^ ssuploadedDate.GetHashCode()
				^ sslastModified.GetHashCode()
				^ sslastPublishedDate.GetHashCode()
				^ sspublishedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STModuleVersionDefinitionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssid = 0;
			ssowner = new RCModuleDefinitionRecord(null);
			ssversion = 0;
			ssuploadedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			sslastModified = new DateTime(1900, 1, 1, 0, 0, 0);
			sslastPublishedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			sspublishedBy = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssid = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssowner", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssowner' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssowner = (RCModuleDefinitionRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssversion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssversion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssversion = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssuploadedDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssuploadedDate' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssuploadedDate = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sslastModified", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sslastModified' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sslastModified = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sslastPublishedDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sslastPublishedDate' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sslastPublishedDate = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sspublishedBy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sspublishedBy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sspublishedBy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssowner.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssowner.InternalRecursiveSave();
		}


		public STModuleVersionDefinitionStructure Duplicate() {
			STModuleVersionDefinitionStructure t;
			t.ssid = this.ssid;
			t.ssowner = (RCModuleDefinitionRecord) this.ssowner.Duplicate();
			t.ssversion = this.ssversion;
			t.ssuploadedDate = this.ssuploadedDate;
			t.sslastModified = this.sslastModified;
			t.sslastPublishedDate = this.sslastPublishedDate;
			t.sspublishedBy = this.sspublishedBy;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".id")) VarValue.AppendAttribute(recordElem, "id", ssid, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "id");
				ssowner.ToXml(this, recordElem, "owner", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".version")) VarValue.AppendAttribute(recordElem, "version", ssversion, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".uploadedDate")) VarValue.AppendAttribute(recordElem, "uploadedDate", ssuploadedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "uploadedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".lastModified")) VarValue.AppendAttribute(recordElem, "lastModified", sslastModified, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "lastModified");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".lastPublishedDate")) VarValue.AppendAttribute(recordElem, "lastPublishedDate", sslastPublishedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "lastPublishedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".publishedBy")) VarValue.AppendAttribute(recordElem, "publishedBy", sspublishedBy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "publishedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".id")) variable.Value = ssid; else variable.Optimized = true;
			} else if (head == "owner") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".owner")) variable.Value = ssowner; else variable.Optimized = true;
				variable.SetFieldName("owner");
			} else if (head == "version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".version")) variable.Value = ssversion; else variable.Optimized = true;
			} else if (head == "uploadeddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".uploadedDate")) variable.Value = ssuploadedDate; else variable.Optimized = true;
			} else if (head == "lastmodified") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".lastModified")) variable.Value = sslastModified; else variable.Optimized = true;
			} else if (head == "lastpublisheddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".lastPublishedDate")) variable.Value = sslastPublishedDate; else variable.Optimized = true;
			} else if (head == "publishedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".publishedBy")) variable.Value = sspublishedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == Idid) {
				return ssid;
			} else if (key == Idowner) {
				return ssowner;
			} else if (key == Idversion) {
				return ssversion;
			} else if (key == IduploadedDate) {
				return ssuploadedDate;
			} else if (key == IdlastModified) {
				return sslastModified;
			} else if (key == IdlastPublishedDate) {
				return sslastPublishedDate;
			} else if (key == IdpublishedBy) {
				return sspublishedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssid = (int) other.AttributeGet(Idid);
			ssowner.FillFromOther((IRecord) other.AttributeGet(Idowner));
			ssversion = (int) other.AttributeGet(Idversion);
			ssuploadedDate = (DateTime) other.AttributeGet(IduploadedDate);
			sslastModified = (DateTime) other.AttributeGet(IdlastModified);
			sslastPublishedDate = (DateTime) other.AttributeGet(IdlastPublishedDate);
			sspublishedBy = (string) other.AttributeGet(IdpublishedBy);
		}
		public bool IsDefault() {
			STModuleVersionDefinitionStructure defaultStruct = new STModuleVersionDefinitionStructure(null);
			if (this.ssid != defaultStruct.ssid) return false;
			if (this.ssowner != defaultStruct.ssowner) return false;
			if (this.ssversion != defaultStruct.ssversion) return false;
			if (this.ssuploadedDate != defaultStruct.ssuploadedDate) return false;
			if (this.sslastModified != defaultStruct.sslastModified) return false;
			if (this.sslastPublishedDate != defaultStruct.sslastPublishedDate) return false;
			if (this.sspublishedBy != defaultStruct.sspublishedBy) return false;
			return true;
		}
	} // STModuleVersionDefinitionStructure

	/// <summary>
	/// Structure <code>STExternalAuthentication_PluginAPIStatusStructure</code> that represents the
	///  Service Studio structure <code>ExternalAuthentication_PluginAPIStatus</code> <p> Description
	/// : Provides information about the execution of an external authentication plug-in's operation.</p>
	/// </summary>
	[Serializable()]
	public partial struct STExternalAuthentication_PluginAPIStatusStructure: ISerializable, ITypedRecord<STExternalAuthentication_PluginAPIStatusStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdSuccess = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*X648r0wuv0mRMJPO9FW9VQ");
		internal static readonly GlobalObjectKey IdResponseId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*MvCvcNIJkk6ovr3uBIbfYA");
		internal static readonly GlobalObjectKey IdResponseMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1x1Up6euTEeVHvAaI6bT7w");
		internal static readonly GlobalObjectKey IdResponseAdditionalInfo = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*jzZwbijRpkSy2tY9fXfipg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Success")]
		public bool ssSuccess;

		[System.Xml.Serialization.XmlElement("ResponseId")]
		public int ssResponseId;

		[System.Xml.Serialization.XmlElement("ResponseMessage")]
		public string ssResponseMessage;

		[System.Xml.Serialization.XmlElement("ResponseAdditionalInfo")]
		public string ssResponseAdditionalInfo;


		public BitArray OptimizedAttributes;

		public STExternalAuthentication_PluginAPIStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSuccess = false;
			ssResponseId = 0;
			ssResponseMessage = "";
			ssResponseAdditionalInfo = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSuccess = r.ReadBoolean(index++, "ExternalAuthentication_PluginAPIStatus.Success", false);
			ssResponseId = r.ReadInteger(index++, "ExternalAuthentication_PluginAPIStatus.ResponseId", 0);
			ssResponseMessage = r.ReadText(index++, "ExternalAuthentication_PluginAPIStatus.ResponseMessage", "");
			ssResponseAdditionalInfo = r.ReadText(index++, "ExternalAuthentication_PluginAPIStatus.ResponseAdditionalInfo", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STExternalAuthentication_PluginAPIStatusStructure r) {
			this = r;
		}


		public static bool operator == (STExternalAuthentication_PluginAPIStatusStructure a, STExternalAuthentication_PluginAPIStatusStructure b) {
			if (a.ssSuccess != b.ssSuccess) return false;
			if (a.ssResponseId != b.ssResponseId) return false;
			if (a.ssResponseMessage != b.ssResponseMessage) return false;
			if (a.ssResponseAdditionalInfo != b.ssResponseAdditionalInfo) return false;
			return true;
		}

		public static bool operator != (STExternalAuthentication_PluginAPIStatusStructure a, STExternalAuthentication_PluginAPIStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STExternalAuthentication_PluginAPIStatusStructure)) return false;
			return (this == (STExternalAuthentication_PluginAPIStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSuccess.GetHashCode()
				^ ssResponseId.GetHashCode()
				^ ssResponseMessage.GetHashCode()
				^ ssResponseAdditionalInfo.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STExternalAuthentication_PluginAPIStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSuccess = false;
			ssResponseId = 0;
			ssResponseMessage = "";
			ssResponseAdditionalInfo = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSuccess", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSuccess' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSuccess = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssResponseId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResponseId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResponseId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssResponseMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResponseMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResponseMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssResponseAdditionalInfo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResponseAdditionalInfo' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResponseAdditionalInfo = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STExternalAuthentication_PluginAPIStatusStructure Duplicate() {
			STExternalAuthentication_PluginAPIStatusStructure t;
			t.ssSuccess = this.ssSuccess;
			t.ssResponseId = this.ssResponseId;
			t.ssResponseMessage = this.ssResponseMessage;
			t.ssResponseAdditionalInfo = this.ssResponseAdditionalInfo;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Success")) VarValue.AppendAttribute(recordElem, "Success", ssSuccess, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Success");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResponseId")) VarValue.AppendAttribute(recordElem, "ResponseId", ssResponseId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ResponseId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResponseMessage")) VarValue.AppendAttribute(recordElem, "ResponseMessage", ssResponseMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResponseMessage");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResponseAdditionalInfo")) VarValue.AppendAttribute(recordElem, "ResponseAdditionalInfo", ssResponseAdditionalInfo, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResponseAdditionalInfo");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "success") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Success")) variable.Value = ssSuccess; else variable.Optimized = true;
			} else if (head == "responseid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResponseId")) variable.Value = ssResponseId; else variable.Optimized = true;
			} else if (head == "responsemessage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResponseMessage")) variable.Value = ssResponseMessage; else variable.Optimized = true;
			} else if (head == "responseadditionalinfo") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResponseAdditionalInfo")) variable.Value = ssResponseAdditionalInfo; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSuccess) {
				return ssSuccess;
			} else if (key == IdResponseId) {
				return ssResponseId;
			} else if (key == IdResponseMessage) {
				return ssResponseMessage;
			} else if (key == IdResponseAdditionalInfo) {
				return ssResponseAdditionalInfo;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSuccess = (bool) other.AttributeGet(IdSuccess);
			ssResponseId = (int) other.AttributeGet(IdResponseId);
			ssResponseMessage = (string) other.AttributeGet(IdResponseMessage);
			ssResponseAdditionalInfo = (string) other.AttributeGet(IdResponseAdditionalInfo);
		}
		public bool IsDefault() {
			STExternalAuthentication_PluginAPIStatusStructure defaultStruct = new STExternalAuthentication_PluginAPIStatusStructure(null);
			if (this.ssSuccess != defaultStruct.ssSuccess) return false;
			if (this.ssResponseId != defaultStruct.ssResponseId) return false;
			if (this.ssResponseMessage != defaultStruct.ssResponseMessage) return false;
			if (this.ssResponseAdditionalInfo != defaultStruct.ssResponseAdditionalInfo) return false;
			return true;
		}
	} // STExternalAuthentication_PluginAPIStatusStructure

	/// <summary>
	/// Structure <code>STIntegrationPluginInfoStructure</code> that represents the Service Studio
	///  structure <code>IntegrationPluginInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STIntegrationPluginInfoStructure: ISerializable, ITypedRecord<STIntegrationPluginInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5xTFU3ppSk+iM4KKYQNtQg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RLucJESk_0S9uU0k+G166g");
		internal static readonly GlobalObjectKey IdIsExpose = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2munv6AKp0CWIQhgd5bENg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("IsExpose")]
		public bool ssIsExpose;


		public BitArray OptimizedAttributes;

		public STIntegrationPluginInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssIsExpose = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "IntegrationPluginInfo.Name", "");
			ssKey = r.ReadText(index++, "IntegrationPluginInfo.Key", "");
			ssIsExpose = r.ReadBoolean(index++, "IntegrationPluginInfo.IsExpose", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STIntegrationPluginInfoStructure r) {
			this = r;
		}


		public static bool operator == (STIntegrationPluginInfoStructure a, STIntegrationPluginInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssIsExpose != b.ssIsExpose) return false;
			return true;
		}

		public static bool operator != (STIntegrationPluginInfoStructure a, STIntegrationPluginInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STIntegrationPluginInfoStructure)) return false;
			return (this == (STIntegrationPluginInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssIsExpose.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STIntegrationPluginInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssIsExpose = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsExpose", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsExpose' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsExpose = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STIntegrationPluginInfoStructure Duplicate() {
			STIntegrationPluginInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssIsExpose = this.ssIsExpose;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsExpose")) VarValue.AppendAttribute(recordElem, "IsExpose", ssIsExpose, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsExpose");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "isexpose") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsExpose")) variable.Value = ssIsExpose; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdIsExpose) {
				return ssIsExpose;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssIsExpose = (bool) other.AttributeGet(IdIsExpose);
		}
		public bool IsDefault() {
			STIntegrationPluginInfoStructure defaultStruct = new STIntegrationPluginInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssIsExpose != defaultStruct.ssIsExpose) return false;
			return true;
		}
	} // STIntegrationPluginInfoStructure

	/// <summary>
	/// Structure <code>STFileStructure</code> that represents the Service Studio structure
	///  <code>File</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STFileStructure: ISerializable, ITypedRecord<STFileStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdFilename = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3YDExFaqm0aCwtuiolIQDA");
		internal static readonly GlobalObjectKey IdContent = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*LS79ligirU6VW4iptn6c9A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Filename")]
		public string ssFilename;

		[System.Xml.Serialization.XmlElement("Content")]
		public byte[] ssContent;


		public BitArray OptimizedAttributes;

		public STFileStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFilename = "";
			ssContent = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssFilename = r.ReadText(index++, "File.Filename", "");
			ssContent = r.ReadBinaryData(index++, "File.Content", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STFileStructure r) {
			this = r;
		}


		public static bool operator == (STFileStructure a, STFileStructure b) {
			if (a.ssFilename != b.ssFilename) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssContent, b.ssContent)) return false;
			return true;
		}

		public static bool operator != (STFileStructure a, STFileStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STFileStructure)) return false;
			return (this == (STFileStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFilename.GetHashCode()
				^ ssContent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STFileStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFilename = "";
			ssContent = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssFilename", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFilename' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFilename = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContent = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STFileStructure Duplicate() {
			STFileStructure t;
			t.ssFilename = this.ssFilename;
			if (this.ssContent != null) {
				t.ssContent = (byte[]) this.ssContent.Clone();
			} else {
				t.ssContent = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filename")) VarValue.AppendAttribute(recordElem, "Filename", ssFilename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Content")) VarValue.AppendAttribute(recordElem, "Content", ssContent, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Content");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "filename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filename")) variable.Value = ssFilename; else variable.Optimized = true;
			} else if (head == "content") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Content")) variable.Value = ssContent; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFilename) {
				return ssFilename;
			} else if (key == IdContent) {
				return ssContent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFilename = (string) other.AttributeGet(IdFilename);
			ssContent = (byte[]) other.AttributeGet(IdContent);
		}
		public bool IsDefault() {
			STFileStructure defaultStruct = new STFileStructure(null);
			if (this.ssFilename != defaultStruct.ssFilename) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssContent, defaultStruct.ssContent)) return false;
			return true;
		}
	} // STFileStructure

	/// <summary>
	/// Structure <code>STLoginAttemptStructure</code> that represents the Service Studio structure
	///  <code>LoginAttempt</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STLoginAttemptStructure: ISerializable, ITypedRecord<STLoginAttemptStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*JWicWxS7ckCYUireF8yOJw");
		internal static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Jr0hprgBa0ixRSh+6f5PUw");
		internal static readonly GlobalObjectKey IdUsername = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vYWYk0c2REibwqEHBa1j8w");
		internal static readonly GlobalObjectKey IdSuccess = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3+++QnH43kqjxX+aB5iRfw");
		internal static readonly GlobalObjectKey IdInstant = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*X3HqK69md0GU0brBgVsMsA");
		internal static readonly GlobalObjectKey IdIPAddress = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*cRxkaZ8aw0a7BymSVoSe3w");
		internal static readonly GlobalObjectKey IdUsernameFailureCount = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Zedlg+FnxE2zPRYvFczXKA");
		internal static readonly GlobalObjectKey IdOriginAddressFailureCount = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7gDw_DSW7EiFod9HyXIA1g");
		internal static readonly GlobalObjectKey IdUserAgent = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*a0fIY_oa9U+WBUVXBhLsyg");
		internal static readonly GlobalObjectKey IdVisitor = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dL2tqIFZbUecMeRYdzsTRg");
		internal static readonly GlobalObjectKey IdRequestKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4RlbVST0ckKAkdoTSkV2+g");
		internal static readonly GlobalObjectKey IdResult = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QJ7YgXNFFE2xC89suyXE+w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public long ssId;

		[System.Xml.Serialization.XmlElement("UserId")]
		public int ssUserId;

		[System.Xml.Serialization.XmlElement("Username")]
		public string ssUsername;

		[System.Xml.Serialization.XmlElement("Success")]
		public bool ssSuccess;

		[System.Xml.Serialization.XmlElement("Instant")]
		public DateTime ssInstant;

		[System.Xml.Serialization.XmlElement("IPAddress")]
		public string ssIPAddress;

		[System.Xml.Serialization.XmlElement("UsernameFailureCount")]
		public int ssUsernameFailureCount;

		[System.Xml.Serialization.XmlElement("OriginAddressFailureCount")]
		public int ssOriginAddressFailureCount;

		[System.Xml.Serialization.XmlElement("UserAgent")]
		public string ssUserAgent;

		[System.Xml.Serialization.XmlElement("Visitor")]
		public string ssVisitor;

		[System.Xml.Serialization.XmlElement("RequestKey")]
		public string ssRequestKey;

		[System.Xml.Serialization.XmlElement("Result")]
		public string ssResult;


		public BitArray OptimizedAttributes;

		public STLoginAttemptStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = 0L;
			ssUserId = 0;
			ssUsername = "";
			ssSuccess = false;
			ssInstant = new DateTime(1900, 1, 1, 0, 0, 0);
			ssIPAddress = "";
			ssUsernameFailureCount = 0;
			ssOriginAddressFailureCount = 0;
			ssUserAgent = "";
			ssVisitor = "";
			ssRequestKey = "";
			ssResult = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadLongInteger(index++, "LoginAttempt.Id", 0L);
			ssUserId = r.ReadInteger(index++, "LoginAttempt.UserId", 0);
			ssUsername = r.ReadText(index++, "LoginAttempt.Username", "");
			ssSuccess = r.ReadBoolean(index++, "LoginAttempt.Success", false);
			ssInstant = r.ReadDateTime(index++, "LoginAttempt.Instant", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIPAddress = r.ReadText(index++, "LoginAttempt.IPAddress", "");
			ssUsernameFailureCount = r.ReadInteger(index++, "LoginAttempt.UsernameFailureCount", 0);
			ssOriginAddressFailureCount = r.ReadInteger(index++, "LoginAttempt.OriginAddressFailureCount", 0);
			ssUserAgent = r.ReadText(index++, "LoginAttempt.UserAgent", "");
			ssVisitor = r.ReadText(index++, "LoginAttempt.Visitor", "");
			ssRequestKey = r.ReadText(index++, "LoginAttempt.RequestKey", "");
			ssResult = r.ReadText(index++, "LoginAttempt.Result", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STLoginAttemptStructure r) {
			this = r;
		}


		public static bool operator == (STLoginAttemptStructure a, STLoginAttemptStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssUserId != b.ssUserId) return false;
			if (a.ssUsername != b.ssUsername) return false;
			if (a.ssSuccess != b.ssSuccess) return false;
			if (a.ssInstant != b.ssInstant) return false;
			if (a.ssIPAddress != b.ssIPAddress) return false;
			if (a.ssUsernameFailureCount != b.ssUsernameFailureCount) return false;
			if (a.ssOriginAddressFailureCount != b.ssOriginAddressFailureCount) return false;
			if (a.ssUserAgent != b.ssUserAgent) return false;
			if (a.ssVisitor != b.ssVisitor) return false;
			if (a.ssRequestKey != b.ssRequestKey) return false;
			if (a.ssResult != b.ssResult) return false;
			return true;
		}

		public static bool operator != (STLoginAttemptStructure a, STLoginAttemptStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STLoginAttemptStructure)) return false;
			return (this == (STLoginAttemptStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssUserId.GetHashCode()
				^ ssUsername.GetHashCode()
				^ ssSuccess.GetHashCode()
				^ ssInstant.GetHashCode()
				^ ssIPAddress.GetHashCode()
				^ ssUsernameFailureCount.GetHashCode()
				^ ssOriginAddressFailureCount.GetHashCode()
				^ ssUserAgent.GetHashCode()
				^ ssVisitor.GetHashCode()
				^ ssRequestKey.GetHashCode()
				^ ssResult.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STLoginAttemptStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = 0L;
			ssUserId = 0;
			ssUsername = "";
			ssSuccess = false;
			ssInstant = new DateTime(1900, 1, 1, 0, 0, 0);
			ssIPAddress = "";
			ssUsernameFailureCount = 0;
			ssOriginAddressFailureCount = 0;
			ssUserAgent = "";
			ssVisitor = "";
			ssRequestKey = "";
			ssResult = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (long) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUserId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUserId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUserId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUsername", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUsername' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUsername = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSuccess", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSuccess' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSuccess = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInstant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInstant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInstant = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIPAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIPAddress' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIPAddress = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUsernameFailureCount", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUsernameFailureCount' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUsernameFailureCount = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOriginAddressFailureCount", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOriginAddressFailureCount' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOriginAddressFailureCount = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUserAgent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUserAgent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUserAgent = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVisitor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVisitor' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVisitor = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRequestKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRequestKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRequestKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssResult", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResult' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResult = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STLoginAttemptStructure Duplicate() {
			STLoginAttemptStructure t;
			t.ssId = this.ssId;
			t.ssUserId = this.ssUserId;
			t.ssUsername = this.ssUsername;
			t.ssSuccess = this.ssSuccess;
			t.ssInstant = this.ssInstant;
			t.ssIPAddress = this.ssIPAddress;
			t.ssUsernameFailureCount = this.ssUsernameFailureCount;
			t.ssOriginAddressFailureCount = this.ssOriginAddressFailureCount;
			t.ssUserAgent = this.ssUserAgent;
			t.ssVisitor = this.ssVisitor;
			t.ssRequestKey = this.ssRequestKey;
			t.ssResult = this.ssResult;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Username")) VarValue.AppendAttribute(recordElem, "Username", ssUsername, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Username");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Success")) VarValue.AppendAttribute(recordElem, "Success", ssSuccess, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Success");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Instant")) VarValue.AppendAttribute(recordElem, "Instant", ssInstant, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Instant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IPAddress")) VarValue.AppendAttribute(recordElem, "IPAddress", ssIPAddress, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IPAddress");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UsernameFailureCount")) VarValue.AppendAttribute(recordElem, "UsernameFailureCount", ssUsernameFailureCount, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UsernameFailureCount");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OriginAddressFailureCount")) VarValue.AppendAttribute(recordElem, "OriginAddressFailureCount", ssOriginAddressFailureCount, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "OriginAddressFailureCount");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserAgent")) VarValue.AppendAttribute(recordElem, "UserAgent", ssUserAgent, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UserAgent");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Visitor")) VarValue.AppendAttribute(recordElem, "Visitor", ssVisitor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Visitor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RequestKey")) VarValue.AppendAttribute(recordElem, "RequestKey", ssRequestKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RequestKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Result")) VarValue.AppendAttribute(recordElem, "Result", ssResult, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Result");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			} else if (head == "username") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Username")) variable.Value = ssUsername; else variable.Optimized = true;
			} else if (head == "success") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Success")) variable.Value = ssSuccess; else variable.Optimized = true;
			} else if (head == "instant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Instant")) variable.Value = ssInstant; else variable.Optimized = true;
			} else if (head == "ipaddress") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IPAddress")) variable.Value = ssIPAddress; else variable.Optimized = true;
			} else if (head == "usernamefailurecount") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UsernameFailureCount")) variable.Value = ssUsernameFailureCount; else variable.Optimized = true;
			} else if (head == "originaddressfailurecount") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OriginAddressFailureCount")) variable.Value = ssOriginAddressFailureCount; else variable.Optimized = true;
			} else if (head == "useragent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserAgent")) variable.Value = ssUserAgent; else variable.Optimized = true;
			} else if (head == "visitor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Visitor")) variable.Value = ssVisitor; else variable.Optimized = true;
			} else if (head == "requestkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RequestKey")) variable.Value = ssRequestKey; else variable.Optimized = true;
			} else if (head == "result") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Result")) variable.Value = ssResult; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdUserId) {
				return ssUserId;
			} else if (key == IdUsername) {
				return ssUsername;
			} else if (key == IdSuccess) {
				return ssSuccess;
			} else if (key == IdInstant) {
				return ssInstant;
			} else if (key == IdIPAddress) {
				return ssIPAddress;
			} else if (key == IdUsernameFailureCount) {
				return ssUsernameFailureCount;
			} else if (key == IdOriginAddressFailureCount) {
				return ssOriginAddressFailureCount;
			} else if (key == IdUserAgent) {
				return ssUserAgent;
			} else if (key == IdVisitor) {
				return ssVisitor;
			} else if (key == IdRequestKey) {
				return ssRequestKey;
			} else if (key == IdResult) {
				return ssResult;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (long) other.AttributeGet(IdId);
			ssUserId = (int) other.AttributeGet(IdUserId);
			ssUsername = (string) other.AttributeGet(IdUsername);
			ssSuccess = (bool) other.AttributeGet(IdSuccess);
			ssInstant = (DateTime) other.AttributeGet(IdInstant);
			ssIPAddress = (string) other.AttributeGet(IdIPAddress);
			ssUsernameFailureCount = (int) other.AttributeGet(IdUsernameFailureCount);
			ssOriginAddressFailureCount = (int) other.AttributeGet(IdOriginAddressFailureCount);
			ssUserAgent = (string) other.AttributeGet(IdUserAgent);
			ssVisitor = (string) other.AttributeGet(IdVisitor);
			ssRequestKey = (string) other.AttributeGet(IdRequestKey);
			ssResult = (string) other.AttributeGet(IdResult);
		}
		public bool IsDefault() {
			STLoginAttemptStructure defaultStruct = new STLoginAttemptStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssUserId != defaultStruct.ssUserId) return false;
			if (this.ssUsername != defaultStruct.ssUsername) return false;
			if (this.ssSuccess != defaultStruct.ssSuccess) return false;
			if (this.ssInstant != defaultStruct.ssInstant) return false;
			if (this.ssIPAddress != defaultStruct.ssIPAddress) return false;
			if (this.ssUsernameFailureCount != defaultStruct.ssUsernameFailureCount) return false;
			if (this.ssOriginAddressFailureCount != defaultStruct.ssOriginAddressFailureCount) return false;
			if (this.ssUserAgent != defaultStruct.ssUserAgent) return false;
			if (this.ssVisitor != defaultStruct.ssVisitor) return false;
			if (this.ssRequestKey != defaultStruct.ssRequestKey) return false;
			if (this.ssResult != defaultStruct.ssResult) return false;
			return true;
		}
	} // STLoginAttemptStructure

	/// <summary>
	/// Structure <code>STJWTClaimsStructure</code> that represents the Service Studio structure
	///  <code>JWTClaims</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STJWTClaimsStructure: ISerializable, ITypedRecord<STJWTClaimsStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdIssuer = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*TDBINYkH3ECP1p0FQTiDLQ");
		internal static readonly GlobalObjectKey IdSubject = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wlsGZ4+PC0WPKkDFa4NwcA");
		internal static readonly GlobalObjectKey IdAudience = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*liaEZbkGE0CkYu2tDMV6VA");
		internal static readonly GlobalObjectKey IdIssuedAt = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zkOPD6RKrEKsKqKPi_QYDQ");
		internal static readonly GlobalObjectKey IdJWTID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vaUfEelJfUWxPE5F9PRXWQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Issuer")]
		public string ssIssuer;

		[System.Xml.Serialization.XmlElement("Subject")]
		public string ssSubject;

		[System.Xml.Serialization.XmlElement("Audience")]
		public string ssAudience;

		[System.Xml.Serialization.XmlElement("IssuedAt")]
		public long ssIssuedAt;

		[System.Xml.Serialization.XmlElement("JWTID")]
		public string ssJWTID;


		public BitArray OptimizedAttributes;

		public STJWTClaimsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssIssuer = "";
			ssSubject = "";
			ssAudience = "";
			ssIssuedAt = 0L;
			ssJWTID = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssIssuer = r.ReadText(index++, "JWTClaims.Issuer", "");
			ssSubject = r.ReadText(index++, "JWTClaims.Subject", "");
			ssAudience = r.ReadText(index++, "JWTClaims.Audience", "");
			ssIssuedAt = r.ReadLongInteger(index++, "JWTClaims.IssuedAt", 0L);
			ssJWTID = r.ReadText(index++, "JWTClaims.JWTID", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STJWTClaimsStructure r) {
			this = r;
		}


		public static bool operator == (STJWTClaimsStructure a, STJWTClaimsStructure b) {
			if (a.ssIssuer != b.ssIssuer) return false;
			if (a.ssSubject != b.ssSubject) return false;
			if (a.ssAudience != b.ssAudience) return false;
			if (a.ssIssuedAt != b.ssIssuedAt) return false;
			if (a.ssJWTID != b.ssJWTID) return false;
			return true;
		}

		public static bool operator != (STJWTClaimsStructure a, STJWTClaimsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STJWTClaimsStructure)) return false;
			return (this == (STJWTClaimsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssIssuer.GetHashCode()
				^ ssSubject.GetHashCode()
				^ ssAudience.GetHashCode()
				^ ssIssuedAt.GetHashCode()
				^ ssJWTID.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STJWTClaimsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssIssuer = "";
			ssSubject = "";
			ssAudience = "";
			ssIssuedAt = 0L;
			ssJWTID = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssIssuer", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIssuer' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIssuer = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSubject", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSubject' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSubject = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAudience", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAudience' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAudience = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIssuedAt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIssuedAt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIssuedAt = (long) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssJWTID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssJWTID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssJWTID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STJWTClaimsStructure Duplicate() {
			STJWTClaimsStructure t;
			t.ssIssuer = this.ssIssuer;
			t.ssSubject = this.ssSubject;
			t.ssAudience = this.ssAudience;
			t.ssIssuedAt = this.ssIssuedAt;
			t.ssJWTID = this.ssJWTID;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Issuer")) VarValue.AppendAttribute(recordElem, "Issuer", ssIssuer, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Issuer");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Subject")) VarValue.AppendAttribute(recordElem, "Subject", ssSubject, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Subject");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Audience")) VarValue.AppendAttribute(recordElem, "Audience", ssAudience, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Audience");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IssuedAt")) VarValue.AppendAttribute(recordElem, "IssuedAt", ssIssuedAt, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "IssuedAt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".JWTID")) VarValue.AppendAttribute(recordElem, "JWTID", ssJWTID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "JWTID");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "issuer") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Issuer")) variable.Value = ssIssuer; else variable.Optimized = true;
			} else if (head == "subject") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Subject")) variable.Value = ssSubject; else variable.Optimized = true;
			} else if (head == "audience") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Audience")) variable.Value = ssAudience; else variable.Optimized = true;
			} else if (head == "issuedat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IssuedAt")) variable.Value = ssIssuedAt; else variable.Optimized = true;
			} else if (head == "jwtid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".JWTID")) variable.Value = ssJWTID; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdIssuer) {
				return ssIssuer;
			} else if (key == IdSubject) {
				return ssSubject;
			} else if (key == IdAudience) {
				return ssAudience;
			} else if (key == IdIssuedAt) {
				return ssIssuedAt;
			} else if (key == IdJWTID) {
				return ssJWTID;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssIssuer = (string) other.AttributeGet(IdIssuer);
			ssSubject = (string) other.AttributeGet(IdSubject);
			ssAudience = (string) other.AttributeGet(IdAudience);
			ssIssuedAt = (long) other.AttributeGet(IdIssuedAt);
			ssJWTID = (string) other.AttributeGet(IdJWTID);
		}
		public bool IsDefault() {
			STJWTClaimsStructure defaultStruct = new STJWTClaimsStructure(null);
			if (this.ssIssuer != defaultStruct.ssIssuer) return false;
			if (this.ssSubject != defaultStruct.ssSubject) return false;
			if (this.ssAudience != defaultStruct.ssAudience) return false;
			if (this.ssIssuedAt != defaultStruct.ssIssuedAt) return false;
			if (this.ssJWTID != defaultStruct.ssJWTID) return false;
			return true;
		}
	} // STJWTClaimsStructure

	/// <summary>
	/// Structure <code>STQueuedNativeBuildResultStructure</code> that represents the Service Studio
	///  structure <code>QueuedNativeBuildResult</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STQueuedNativeBuildResultStructure: ISerializable, ITypedRecord<STQueuedNativeBuildResultStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdSuccess = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ILzbNxsVE0KTSTe7emBkZQ");
		internal static readonly GlobalObjectKey IdMobilePlatformId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*T9EA1x9KyUKpsDrJ+GMKOw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Success")]
		public bool ssSuccess;

		[System.Xml.Serialization.XmlElement("MobilePlatformId")]
		public int ssMobilePlatformId;


		public BitArray OptimizedAttributes;

		public STQueuedNativeBuildResultStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSuccess = false;
			ssMobilePlatformId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSuccess = r.ReadBoolean(index++, "QueuedNativeBuildResult.Success", false);
			ssMobilePlatformId = r.ReadEntityReference(index++, "QueuedNativeBuildResult.MobilePlatformId", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STQueuedNativeBuildResultStructure r) {
			this = r;
		}


		public static bool operator == (STQueuedNativeBuildResultStructure a, STQueuedNativeBuildResultStructure b) {
			if (a.ssSuccess != b.ssSuccess) return false;
			if (a.ssMobilePlatformId != b.ssMobilePlatformId) return false;
			return true;
		}

		public static bool operator != (STQueuedNativeBuildResultStructure a, STQueuedNativeBuildResultStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STQueuedNativeBuildResultStructure)) return false;
			return (this == (STQueuedNativeBuildResultStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSuccess.GetHashCode()
				^ ssMobilePlatformId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STQueuedNativeBuildResultStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSuccess = false;
			ssMobilePlatformId = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSuccess", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSuccess' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSuccess = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMobilePlatformId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMobilePlatformId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMobilePlatformId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STQueuedNativeBuildResultStructure Duplicate() {
			STQueuedNativeBuildResultStructure t;
			t.ssSuccess = this.ssSuccess;
			t.ssMobilePlatformId = this.ssMobilePlatformId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Success")) VarValue.AppendAttribute(recordElem, "Success", ssSuccess, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Success");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MobilePlatformId")) VarValue.AppendAttribute(recordElem, "MobilePlatformId", ssMobilePlatformId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MobilePlatformId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "success") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Success")) variable.Value = ssSuccess; else variable.Optimized = true;
			} else if (head == "mobileplatformid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MobilePlatformId")) variable.Value = ssMobilePlatformId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSuccess) {
				return ssSuccess;
			} else if (key == IdMobilePlatformId) {
				return ssMobilePlatformId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSuccess = (bool) other.AttributeGet(IdSuccess);
			ssMobilePlatformId = (int) other.AttributeGet(IdMobilePlatformId);
		}
		public bool IsDefault() {
			STQueuedNativeBuildResultStructure defaultStruct = new STQueuedNativeBuildResultStructure(null);
			if (this.ssSuccess != defaultStruct.ssSuccess) return false;
			if (this.ssMobilePlatformId != defaultStruct.ssMobilePlatformId) return false;
			return true;
		}
	} // STQueuedNativeBuildResultStructure

	/// <summary>
	/// Structure <code>STNativePluginConfigurationStructure</code> that represents the Service Studio
	///  structure <code>NativePluginConfiguration</code> <p> Description: Used to represent the lin
	/// k between Application and Native plugin</p>
	/// </summary>
	[Serializable()]
	public partial struct STNativePluginConfigurationStructure: ISerializable, ITypedRecord<STNativePluginConfigurationStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdApplicationKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*U3wsQpHurEeFg5WChc1UXQ");
		internal static readonly GlobalObjectKey IdPluginModuleKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uybQ5HpqaEmPR1Debv2fvg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ApplicationKey")]
		public string ssApplicationKey;

		[System.Xml.Serialization.XmlElement("PluginModuleKey")]
		public string ssPluginModuleKey;


		public BitArray OptimizedAttributes;

		public STNativePluginConfigurationStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssApplicationKey = "";
			ssPluginModuleKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssApplicationKey = r.ReadText(index++, "NativePluginConfiguration.ApplicationKey", "");
			ssPluginModuleKey = r.ReadText(index++, "NativePluginConfiguration.PluginModuleKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STNativePluginConfigurationStructure r) {
			this = r;
		}


		public static bool operator == (STNativePluginConfigurationStructure a, STNativePluginConfigurationStructure b) {
			if (a.ssApplicationKey != b.ssApplicationKey) return false;
			if (a.ssPluginModuleKey != b.ssPluginModuleKey) return false;
			return true;
		}

		public static bool operator != (STNativePluginConfigurationStructure a, STNativePluginConfigurationStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STNativePluginConfigurationStructure)) return false;
			return (this == (STNativePluginConfigurationStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssApplicationKey.GetHashCode()
				^ ssPluginModuleKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STNativePluginConfigurationStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssApplicationKey = "";
			ssPluginModuleKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssApplicationKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPluginModuleKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPluginModuleKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPluginModuleKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STNativePluginConfigurationStructure Duplicate() {
			STNativePluginConfigurationStructure t;
			t.ssApplicationKey = this.ssApplicationKey;
			t.ssPluginModuleKey = this.ssPluginModuleKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKey")) VarValue.AppendAttribute(recordElem, "ApplicationKey", ssApplicationKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PluginModuleKey")) VarValue.AppendAttribute(recordElem, "PluginModuleKey", ssPluginModuleKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PluginModuleKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "applicationkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKey")) variable.Value = ssApplicationKey; else variable.Optimized = true;
			} else if (head == "pluginmodulekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PluginModuleKey")) variable.Value = ssPluginModuleKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdApplicationKey) {
				return ssApplicationKey;
			} else if (key == IdPluginModuleKey) {
				return ssPluginModuleKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssApplicationKey = (string) other.AttributeGet(IdApplicationKey);
			ssPluginModuleKey = (string) other.AttributeGet(IdPluginModuleKey);
		}
		public bool IsDefault() {
			STNativePluginConfigurationStructure defaultStruct = new STNativePluginConfigurationStructure(null);
			if (this.ssApplicationKey != defaultStruct.ssApplicationKey) return false;
			if (this.ssPluginModuleKey != defaultStruct.ssPluginModuleKey) return false;
			return true;
		}
	} // STNativePluginConfigurationStructure

	/// <summary>
	/// Structure <code>STUserWithUserPoolStructure</code> that represents the Service Studio structure
	///  <code>UserWithUserPool</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STUserWithUserPoolStructure: ISerializable, ITypedRecord<STUserWithUserPoolStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_9+Tq5BhZEW2x0eF7F+s+w");
		internal static readonly GlobalObjectKey IdUserPoolKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*g1udqs8gBU6kEo11YKQfKg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UserId")]
		public long ssUserId;

		[System.Xml.Serialization.XmlElement("UserPoolKey")]
		public string ssUserPoolKey;


		public BitArray OptimizedAttributes;

		public STUserWithUserPoolStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUserId = 0L;
			ssUserPoolKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUserId = r.ReadEntityReferenceLongInteger(index++, "UserWithUserPool.UserId", 0L);
			ssUserPoolKey = r.ReadText(index++, "UserWithUserPool.UserPoolKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STUserWithUserPoolStructure r) {
			this = r;
		}


		public static bool operator == (STUserWithUserPoolStructure a, STUserWithUserPoolStructure b) {
			if (a.ssUserId != b.ssUserId) return false;
			if (a.ssUserPoolKey != b.ssUserPoolKey) return false;
			return true;
		}

		public static bool operator != (STUserWithUserPoolStructure a, STUserWithUserPoolStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STUserWithUserPoolStructure)) return false;
			return (this == (STUserWithUserPoolStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUserId.GetHashCode()
				^ ssUserPoolKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STUserWithUserPoolStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUserId = 0L;
			ssUserPoolKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUserId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUserId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUserId = (long) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUserPoolKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUserPoolKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUserPoolKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STUserWithUserPoolStructure Duplicate() {
			STUserWithUserPoolStructure t;
			t.ssUserId = this.ssUserId;
			t.ssUserPoolKey = this.ssUserPoolKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReferenceLongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserPoolKey")) VarValue.AppendAttribute(recordElem, "UserPoolKey", ssUserPoolKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UserPoolKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			} else if (head == "userpoolkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserPoolKey")) variable.Value = ssUserPoolKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUserId) {
				return ssUserId;
			} else if (key == IdUserPoolKey) {
				return ssUserPoolKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUserId = (long) other.AttributeGet(IdUserId);
			ssUserPoolKey = (string) other.AttributeGet(IdUserPoolKey);
		}
		public bool IsDefault() {
			STUserWithUserPoolStructure defaultStruct = new STUserWithUserPoolStructure(null);
			if (this.ssUserId != defaultStruct.ssUserId) return false;
			if (this.ssUserPoolKey != defaultStruct.ssUserPoolKey) return false;
			return true;
		}
	} // STUserWithUserPoolStructure

	/// <summary>
	/// Structure <code>STDeploymentDetailsStructure</code> that represents the Service Studio structure
	///  <code>DeploymentDetails</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentDetailsStructure: ISerializable, ITypedRecord<STDeploymentDetailsStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdEspaceVersiondId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*otWIEBBkJkGOHIJOI2PI6A");
		internal static readonly GlobalObjectKey IdDeploymentId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uoe34oh3U0mX73EK8J7mhg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("EspaceVersiondId")]
		public int ssEspaceVersiondId;

		[System.Xml.Serialization.XmlElement("DeploymentId")]
		public string ssDeploymentId;


		public BitArray OptimizedAttributes;

		public STDeploymentDetailsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssEspaceVersiondId = 0;
			ssDeploymentId = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssEspaceVersiondId = r.ReadInteger(index++, "DeploymentDetails.EspaceVersiondId", 0);
			ssDeploymentId = r.ReadEntityReferenceText(index++, "DeploymentDetails.DeploymentId", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentDetailsStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentDetailsStructure a, STDeploymentDetailsStructure b) {
			if (a.ssEspaceVersiondId != b.ssEspaceVersiondId) return false;
			if (a.ssDeploymentId != b.ssDeploymentId) return false;
			return true;
		}

		public static bool operator != (STDeploymentDetailsStructure a, STDeploymentDetailsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentDetailsStructure)) return false;
			return (this == (STDeploymentDetailsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssEspaceVersiondId.GetHashCode()
				^ ssDeploymentId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentDetailsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssEspaceVersiondId = 0;
			ssDeploymentId = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssEspaceVersiondId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceVersiondId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceVersiondId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDeploymentId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDeploymentId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDeploymentId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentDetailsStructure Duplicate() {
			STDeploymentDetailsStructure t;
			t.ssEspaceVersiondId = this.ssEspaceVersiondId;
			t.ssDeploymentId = this.ssDeploymentId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspaceVersiondId")) VarValue.AppendAttribute(recordElem, "EspaceVersiondId", ssEspaceVersiondId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EspaceVersiondId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DeploymentId")) VarValue.AppendAttribute(recordElem, "DeploymentId", ssDeploymentId, detailLevel, TypeKind.EntityReferenceText); else VarValue.AppendOptimizedAttribute(recordElem, "DeploymentId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "espaceversiondid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceVersiondId")) variable.Value = ssEspaceVersiondId; else variable.Optimized = true;
			} else if (head == "deploymentid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DeploymentId")) variable.Value = ssDeploymentId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdEspaceVersiondId) {
				return ssEspaceVersiondId;
			} else if (key == IdDeploymentId) {
				return ssDeploymentId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssEspaceVersiondId = (int) other.AttributeGet(IdEspaceVersiondId);
			ssDeploymentId = (string) other.AttributeGet(IdDeploymentId);
		}
		public bool IsDefault() {
			STDeploymentDetailsStructure defaultStruct = new STDeploymentDetailsStructure(null);
			if (this.ssEspaceVersiondId != defaultStruct.ssEspaceVersiondId) return false;
			if (this.ssDeploymentId != defaultStruct.ssDeploymentId) return false;
			return true;
		}
	} // STDeploymentDetailsStructure

	/// <summary>
	/// Structure <code>STEntityRecordStructure</code> that represents the Service Studio structure
	///  <code>EntityRecord</code> <p> Description: Static entity record metadata</p>
	/// </summary>
	[Serializable()]
	public partial struct STEntityRecordStructure: ISerializable, ITypedRecord<STEntityRecordStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AgisOpfvb0SB4SmSGYOVMg");
		internal static readonly GlobalObjectKey IdData_Id = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+ApR8KHZh0me0w4Sn2lz7A");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zAdi5VQrGkepDTomEG4rXw");
		internal static readonly GlobalObjectKey IdSS_Key = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ALO3kTC4NEuhDERWpI5zhQ");
		internal static readonly GlobalObjectKey IdEntity_SS_Key = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qjm2JgPMLE68M1bx4ebWwQ");
		internal static readonly GlobalObjectKey IdEspace_Id = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5MaS6NYrv0y+xSTQZ0M5Ng");
		internal static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*iK+ilWIA4EGylpzuYgEccQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public int ssId;

		[System.Xml.Serialization.XmlElement("Data_Id")]
		public string ssData_Id;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("SS_Key")]
		public string ssSS_Key;

		[System.Xml.Serialization.XmlElement("Entity_SS_Key")]
		public string ssEntity_SS_Key;

		[System.Xml.Serialization.XmlElement("Espace_Id")]
		public int ssEspace_Id;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool ssIs_Active;


		public BitArray OptimizedAttributes;

		public STEntityRecordStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = 0;
			ssData_Id = "";
			ssName = "";
			ssSS_Key = "";
			ssEntity_SS_Key = "";
			ssEspace_Id = 0;
			ssIs_Active = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "EntityRecord.Id", 0);
			ssData_Id = r.ReadText(index++, "EntityRecord.Data_Id", "");
			ssName = r.ReadText(index++, "EntityRecord.Name", "");
			ssSS_Key = r.ReadText(index++, "EntityRecord.SS_Key", "");
			ssEntity_SS_Key = r.ReadText(index++, "EntityRecord.Entity_SS_Key", "");
			ssEspace_Id = r.ReadInteger(index++, "EntityRecord.Espace_Id", 0);
			ssIs_Active = r.ReadBoolean(index++, "EntityRecord.Is_Active", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEntityRecordStructure r) {
			this = r;
		}


		public static bool operator == (STEntityRecordStructure a, STEntityRecordStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssData_Id != b.ssData_Id) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssSS_Key != b.ssSS_Key) return false;
			if (a.ssEntity_SS_Key != b.ssEntity_SS_Key) return false;
			if (a.ssEspace_Id != b.ssEspace_Id) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			return true;
		}

		public static bool operator != (STEntityRecordStructure a, STEntityRecordStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEntityRecordStructure)) return false;
			return (this == (STEntityRecordStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssData_Id.GetHashCode()
				^ ssName.GetHashCode()
				^ ssSS_Key.GetHashCode()
				^ ssEntity_SS_Key.GetHashCode()
				^ ssEspace_Id.GetHashCode()
				^ ssIs_Active.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEntityRecordStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = 0;
			ssData_Id = "";
			ssName = "";
			ssSS_Key = "";
			ssEntity_SS_Key = "";
			ssEspace_Id = 0;
			ssIs_Active = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssData_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssData_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssData_Id = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSS_Key", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSS_Key' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSS_Key = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEntity_SS_Key", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEntity_SS_Key' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEntity_SS_Key = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspace_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspace_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspace_Id = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIs_Active", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIs_Active' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIs_Active = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEntityRecordStructure Duplicate() {
			STEntityRecordStructure t;
			t.ssId = this.ssId;
			t.ssData_Id = this.ssData_Id;
			t.ssName = this.ssName;
			t.ssSS_Key = this.ssSS_Key;
			t.ssEntity_SS_Key = this.ssEntity_SS_Key;
			t.ssEspace_Id = this.ssEspace_Id;
			t.ssIs_Active = this.ssIs_Active;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Data_Id")) VarValue.AppendAttribute(recordElem, "Data_Id", ssData_Id, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Data_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SS_Key")) VarValue.AppendAttribute(recordElem, "SS_Key", ssSS_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SS_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Entity_SS_Key")) VarValue.AppendAttribute(recordElem, "Entity_SS_Key", ssEntity_SS_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Entity_SS_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Espace_Id")) VarValue.AppendAttribute(recordElem, "Espace_Id", ssEspace_Id, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Espace_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "data_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Data_Id")) variable.Value = ssData_Id; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "ss_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SS_Key")) variable.Value = ssSS_Key; else variable.Optimized = true;
			} else if (head == "entity_ss_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Entity_SS_Key")) variable.Value = ssEntity_SS_Key; else variable.Optimized = true;
			} else if (head == "espace_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Espace_Id")) variable.Value = ssEspace_Id; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdData_Id) {
				return ssData_Id;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdSS_Key) {
				return ssSS_Key;
			} else if (key == IdEntity_SS_Key) {
				return ssEntity_SS_Key;
			} else if (key == IdEspace_Id) {
				return ssEspace_Id;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ssData_Id = (string) other.AttributeGet(IdData_Id);
			ssName = (string) other.AttributeGet(IdName);
			ssSS_Key = (string) other.AttributeGet(IdSS_Key);
			ssEntity_SS_Key = (string) other.AttributeGet(IdEntity_SS_Key);
			ssEspace_Id = (int) other.AttributeGet(IdEspace_Id);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
		}
		public bool IsDefault() {
			STEntityRecordStructure defaultStruct = new STEntityRecordStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssData_Id != defaultStruct.ssData_Id) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssSS_Key != defaultStruct.ssSS_Key) return false;
			if (this.ssEntity_SS_Key != defaultStruct.ssEntity_SS_Key) return false;
			if (this.ssEspace_Id != defaultStruct.ssEspace_Id) return false;
			if (this.ssIs_Active != defaultStruct.ssIs_Active) return false;
			return true;
		}
	} // STEntityRecordStructure

	/// <summary>
	/// Structure <code>STDeploymentTechnologyStructure</code> that represents the Service Studio structure
	///  <code>DeploymentTechnology</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentTechnologyStructure: ISerializable, ITypedRecord<STDeploymentTechnologyStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QqD7eow0KECGO6dXwRz+lQ");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*cHYADlf2RUWzb_LKnlpDlw");
		internal static readonly GlobalObjectKey IdLogo = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UtojbIGfH0m8r8TjvPbRIA");
		internal static readonly GlobalObjectKey IdAmazonECSConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uuN9hM2MHEKtmEyf2MTH7Q");
		internal static readonly GlobalObjectKey IdAmazonEKSConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*6xvotOTbokudQpt5Wiuucw");
		internal static readonly GlobalObjectKey IdAzureContainerServiceConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1cPazE+gP0u+JSA5dzu8CA");
		internal static readonly GlobalObjectKey IdDockerConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*VkFhuv5XukSf5gFiNI_qvg");
		internal static readonly GlobalObjectKey IdPivotalConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hbn+2QPB1k+mgxIgSsvGlA");
		internal static readonly GlobalObjectKey IdVMConfig_Default = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*W4vkDvu4kk286LLc31ociQ");
		internal static readonly GlobalObjectKey IdIsLicensed = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WNtiffwR80uF_mefvhekkw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Logo")]
		public byte[] ssLogo;

		[System.Xml.Serialization.XmlElement("AmazonECSConfig_Default")]
		public RCDeploymentZone_AmazonECSRecord ssAmazonECSConfig_Default;

		[System.Xml.Serialization.XmlElement("AmazonEKSConfig_Default")]
		public RCDeploymentZone_AmazonEKSRecord ssAmazonEKSConfig_Default;

		[System.Xml.Serialization.XmlElement("AzureContainerServiceConfig_Default")]
		public RCDeploymentZone_AzureContainerServiceRecord ssAzureContainerServiceConfig_Default;

		[System.Xml.Serialization.XmlElement("DockerConfig_Default")]
		public RCDeploymentZone_DockerRecord ssDockerConfig_Default;

		[System.Xml.Serialization.XmlElement("PivotalConfig_Default")]
		public RCDeploymentZone_PivotalRecord ssPivotalConfig_Default;

		[System.Xml.Serialization.XmlElement("VMConfig_Default")]
		public RCDeploymentZone_VMRecord ssVMConfig_Default;

		[System.Xml.Serialization.XmlElement("IsLicensed")]
		public bool ssIsLicensed;


		public BitArray OptimizedAttributes;

		public STDeploymentTechnologyStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssLogo = new byte[] {};
			ssAmazonECSConfig_Default = new RCDeploymentZone_AmazonECSRecord(null);
			ssAmazonEKSConfig_Default = new RCDeploymentZone_AmazonEKSRecord(null);
			ssAzureContainerServiceConfig_Default = new RCDeploymentZone_AzureContainerServiceRecord(null);
			ssDockerConfig_Default = new RCDeploymentZone_DockerRecord(null);
			ssPivotalConfig_Default = new RCDeploymentZone_PivotalRecord(null);
			ssVMConfig_Default = new RCDeploymentZone_VMRecord(null);
			ssIsLicensed = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = null;
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = null;
			all[5] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssAmazonECSConfig_Default.OptimizedAttributes = value[0];
					ssAmazonEKSConfig_Default.OptimizedAttributes = value[1];
					ssAzureContainerServiceConfig_Default.OptimizedAttributes = value[2];
					ssDockerConfig_Default.OptimizedAttributes = value[3];
					ssPivotalConfig_Default.OptimizedAttributes = value[4];
					ssVMConfig_Default.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = null;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = null;
				all[5] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "DeploymentTechnology.Key", "");
			ssName = r.ReadText(index++, "DeploymentTechnology.Name", "");
			ssLogo = r.ReadBinaryData(index++, "DeploymentTechnology.Logo", new byte[] {});
			ssIsLicensed = r.ReadBoolean(index++, "DeploymentTechnology.IsLicensed", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentTechnologyStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentTechnologyStructure a, STDeploymentTechnologyStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssName != b.ssName) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssLogo, b.ssLogo)) return false;
			if (a.ssAmazonECSConfig_Default != b.ssAmazonECSConfig_Default) return false;
			if (a.ssAmazonEKSConfig_Default != b.ssAmazonEKSConfig_Default) return false;
			if (a.ssAzureContainerServiceConfig_Default != b.ssAzureContainerServiceConfig_Default) return false;
			if (a.ssDockerConfig_Default != b.ssDockerConfig_Default) return false;
			if (a.ssPivotalConfig_Default != b.ssPivotalConfig_Default) return false;
			if (a.ssVMConfig_Default != b.ssVMConfig_Default) return false;
			if (a.ssIsLicensed != b.ssIsLicensed) return false;
			return true;
		}

		public static bool operator != (STDeploymentTechnologyStructure a, STDeploymentTechnologyStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentTechnologyStructure)) return false;
			return (this == (STDeploymentTechnologyStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssName.GetHashCode()
				^ ssLogo.GetHashCode()
				^ ssAmazonECSConfig_Default.GetHashCode()
				^ ssAmazonEKSConfig_Default.GetHashCode()
				^ ssAzureContainerServiceConfig_Default.GetHashCode()
				^ ssDockerConfig_Default.GetHashCode()
				^ ssPivotalConfig_Default.GetHashCode()
				^ ssVMConfig_Default.GetHashCode()
				^ ssIsLicensed.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentTechnologyStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssLogo = new byte[] {};
			ssAmazonECSConfig_Default = new RCDeploymentZone_AmazonECSRecord(null);
			ssAmazonEKSConfig_Default = new RCDeploymentZone_AmazonEKSRecord(null);
			ssAzureContainerServiceConfig_Default = new RCDeploymentZone_AzureContainerServiceRecord(null);
			ssDockerConfig_Default = new RCDeploymentZone_DockerRecord(null);
			ssPivotalConfig_Default = new RCDeploymentZone_PivotalRecord(null);
			ssVMConfig_Default = new RCDeploymentZone_VMRecord(null);
			ssIsLicensed = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogo' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogo = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAmazonECSConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAmazonECSConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAmazonECSConfig_Default = (RCDeploymentZone_AmazonECSRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAmazonEKSConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAmazonEKSConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAmazonEKSConfig_Default = (RCDeploymentZone_AmazonEKSRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAzureContainerServiceConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAzureContainerServiceConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAzureContainerServiceConfig_Default = (RCDeploymentZone_AzureContainerServiceRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDockerConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDockerConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDockerConfig_Default = (RCDeploymentZone_DockerRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPivotalConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPivotalConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPivotalConfig_Default = (RCDeploymentZone_PivotalRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVMConfig_Default", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVMConfig_Default' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVMConfig_Default = (RCDeploymentZone_VMRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsLicensed", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsLicensed' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsLicensed = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssAmazonECSConfig_Default.RecursiveReset();
			ssAmazonEKSConfig_Default.RecursiveReset();
			ssAzureContainerServiceConfig_Default.RecursiveReset();
			ssDockerConfig_Default.RecursiveReset();
			ssPivotalConfig_Default.RecursiveReset();
			ssVMConfig_Default.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssAmazonECSConfig_Default.InternalRecursiveSave();
			ssAmazonEKSConfig_Default.InternalRecursiveSave();
			ssAzureContainerServiceConfig_Default.InternalRecursiveSave();
			ssDockerConfig_Default.InternalRecursiveSave();
			ssPivotalConfig_Default.InternalRecursiveSave();
			ssVMConfig_Default.InternalRecursiveSave();
		}


		public STDeploymentTechnologyStructure Duplicate() {
			STDeploymentTechnologyStructure t;
			t.ssKey = this.ssKey;
			t.ssName = this.ssName;
			if (this.ssLogo != null) {
				t.ssLogo = (byte[]) this.ssLogo.Clone();
			} else {
				t.ssLogo = null;
			}
			t.ssAmazonECSConfig_Default = (RCDeploymentZone_AmazonECSRecord) this.ssAmazonECSConfig_Default.Duplicate();
			t.ssAmazonEKSConfig_Default = (RCDeploymentZone_AmazonEKSRecord) this.ssAmazonEKSConfig_Default.Duplicate();
			t.ssAzureContainerServiceConfig_Default = (RCDeploymentZone_AzureContainerServiceRecord) this.ssAzureContainerServiceConfig_Default.Duplicate();
			t.ssDockerConfig_Default = (RCDeploymentZone_DockerRecord) this.ssDockerConfig_Default.Duplicate();
			t.ssPivotalConfig_Default = (RCDeploymentZone_PivotalRecord) this.ssPivotalConfig_Default.Duplicate();
			t.ssVMConfig_Default = (RCDeploymentZone_VMRecord) this.ssVMConfig_Default.Duplicate();
			t.ssIsLicensed = this.ssIsLicensed;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Logo")) VarValue.AppendAttribute(recordElem, "Logo", ssLogo, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Logo");
				ssAmazonECSConfig_Default.ToXml(this, recordElem, "AmazonECSConfig_Default", detailLevel - 1);
				ssAmazonEKSConfig_Default.ToXml(this, recordElem, "AmazonEKSConfig_Default", detailLevel - 1);
				ssAzureContainerServiceConfig_Default.ToXml(this, recordElem, "AzureContainerServiceConfig_Default", detailLevel - 1);
				ssDockerConfig_Default.ToXml(this, recordElem, "DockerConfig_Default", detailLevel - 1);
				ssPivotalConfig_Default.ToXml(this, recordElem, "PivotalConfig_Default", detailLevel - 1);
				ssVMConfig_Default.ToXml(this, recordElem, "VMConfig_Default", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsLicensed")) VarValue.AppendAttribute(recordElem, "IsLicensed", ssIsLicensed, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsLicensed");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "logo") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Logo")) variable.Value = ssLogo; else variable.Optimized = true;
			} else if (head == "amazonecsconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AmazonECSConfig_Default")) variable.Value = ssAmazonECSConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("amazonecsconfig_default");
			} else if (head == "amazoneksconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AmazonEKSConfig_Default")) variable.Value = ssAmazonEKSConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("amazoneksconfig_default");
			} else if (head == "azurecontainerserviceconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AzureContainerServiceConfig_Default")) variable.Value = ssAzureContainerServiceConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("azurecontainerserviceconfig_default");
			} else if (head == "dockerconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DockerConfig_Default")) variable.Value = ssDockerConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("dockerconfig_default");
			} else if (head == "pivotalconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PivotalConfig_Default")) variable.Value = ssPivotalConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("pivotalconfig_default");
			} else if (head == "vmconfig_default") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VMConfig_Default")) variable.Value = ssVMConfig_Default; else variable.Optimized = true;
				variable.SetFieldName("vmconfig_default");
			} else if (head == "islicensed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsLicensed")) variable.Value = ssIsLicensed; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdLogo) {
				return ssLogo;
			} else if (key == IdAmazonECSConfig_Default) {
				return ssAmazonECSConfig_Default;
			} else if (key == IdAmazonEKSConfig_Default) {
				return ssAmazonEKSConfig_Default;
			} else if (key == IdAzureContainerServiceConfig_Default) {
				return ssAzureContainerServiceConfig_Default;
			} else if (key == IdDockerConfig_Default) {
				return ssDockerConfig_Default;
			} else if (key == IdPivotalConfig_Default) {
				return ssPivotalConfig_Default;
			} else if (key == IdVMConfig_Default) {
				return ssVMConfig_Default;
			} else if (key == IdIsLicensed) {
				return ssIsLicensed;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssName = (string) other.AttributeGet(IdName);
			ssLogo = (byte[]) other.AttributeGet(IdLogo);
			ssAmazonECSConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdAmazonECSConfig_Default));
			ssAmazonEKSConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdAmazonEKSConfig_Default));
			ssAzureContainerServiceConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdAzureContainerServiceConfig_Default));
			ssDockerConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdDockerConfig_Default));
			ssPivotalConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdPivotalConfig_Default));
			ssVMConfig_Default.FillFromOther((IRecord) other.AttributeGet(IdVMConfig_Default));
			ssIsLicensed = (bool) other.AttributeGet(IdIsLicensed);
		}
		public bool IsDefault() {
			STDeploymentTechnologyStructure defaultStruct = new STDeploymentTechnologyStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssLogo, defaultStruct.ssLogo)) return false;
			if (this.ssAmazonECSConfig_Default != defaultStruct.ssAmazonECSConfig_Default) return false;
			if (this.ssAmazonEKSConfig_Default != defaultStruct.ssAmazonEKSConfig_Default) return false;
			if (this.ssAzureContainerServiceConfig_Default != defaultStruct.ssAzureContainerServiceConfig_Default) return false;
			if (this.ssDockerConfig_Default != defaultStruct.ssDockerConfig_Default) return false;
			if (this.ssPivotalConfig_Default != defaultStruct.ssPivotalConfig_Default) return false;
			if (this.ssVMConfig_Default != defaultStruct.ssVMConfig_Default) return false;
			if (this.ssIsLicensed != defaultStruct.ssIsLicensed) return false;
			return true;
		}
	} // STDeploymentTechnologyStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_VMStructure</code> that represents the Service Studio structure
	///  <code>DeploymentZone_VM</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_VMStructure: ISerializable, ITypedRecord<STDeploymentZone_VMStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdFEServerIds = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kpKwKEKH9UO6YIZcYIWGIw");
		internal static readonly GlobalObjectKey IdIncludesAllServers = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*iLbpJgYWaUO1O68DxlV5+A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("FEServerIds")]
		public RLTextRecordList ssFEServerIds;

		[System.Xml.Serialization.XmlElement("IncludesAllServers")]
		public bool ssIncludesAllServers;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_VMStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssFEServerIds = new RLTextRecordList();
			ssIncludesAllServers = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssIncludesAllServers = r.ReadBoolean(index++, "DeploymentZone_VM.IncludesAllServers", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_VMStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_VMStructure a, STDeploymentZone_VMStructure b) {
			if (a.ssFEServerIds != b.ssFEServerIds) return false;
			if (a.ssIncludesAllServers != b.ssIncludesAllServers) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_VMStructure a, STDeploymentZone_VMStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_VMStructure)) return false;
			return (this == (STDeploymentZone_VMStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssFEServerIds.GetHashCode()
				^ ssIncludesAllServers.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_VMStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssFEServerIds = new RLTextRecordList();
			ssIncludesAllServers = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssFEServerIds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFEServerIds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFEServerIds = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIncludesAllServers", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIncludesAllServers' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIncludesAllServers = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssFEServerIds.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssFEServerIds.InternalRecursiveSave();
		}


		public STDeploymentZone_VMStructure Duplicate() {
			STDeploymentZone_VMStructure t;
			t.ssFEServerIds = (RLTextRecordList) this.ssFEServerIds.Duplicate();
			t.ssIncludesAllServers = this.ssIncludesAllServers;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssFEServerIds.ToXml(this, recordElem, "FEServerIds", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IncludesAllServers")) VarValue.AppendAttribute(recordElem, "IncludesAllServers", ssIncludesAllServers, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IncludesAllServers");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "feserverids") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FEServerIds")) variable.Value = ssFEServerIds; else variable.Optimized = true;
				variable.SetFieldName("feserverids");
			} else if (head == "includesallservers") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IncludesAllServers")) variable.Value = ssIncludesAllServers; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFEServerIds) {
				return ssFEServerIds;
			} else if (key == IdIncludesAllServers) {
				return ssIncludesAllServers;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssFEServerIds = new RLTextRecordList();
			ssFEServerIds.FillFromOther((IOSList) other.AttributeGet(IdFEServerIds));
			ssIncludesAllServers = (bool) other.AttributeGet(IdIncludesAllServers);
		}
		public bool IsDefault() {
			STDeploymentZone_VMStructure defaultStruct = new STDeploymentZone_VMStructure(null);
			if (this.ssFEServerIds != null && this.ssFEServerIds.Length != 0) return false;
			if (this.ssIncludesAllServers != defaultStruct.ssIncludesAllServers) return false;
			return true;
		}
	} // STDeploymentZone_VMStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_DockerStructure</code> that represents the Service Studio
	///  structure <code>DeploymentZone_Docker</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_DockerStructure: ISerializable, ITypedRecord<STDeploymentZone_DockerStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdResultPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3r2LU8lVokK1XrhYaXQDyg");
		internal static readonly GlobalObjectKey IdTargetPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*OqXWVBW68kavlSu7enNMRQ");
		internal static readonly GlobalObjectKey IdFromImageReference = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5xEY+c5_i067puNu4jE8ig");
		internal static readonly GlobalObjectKey IdConfigPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*f1jMCq7N7kGonXFm2LFQ6w");
		internal static readonly GlobalObjectKey IdOnPrepareDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*F2Lr24QS1kazvv343dEtvA");
		internal static readonly GlobalObjectKey IdOnDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0VJdVMzhQkq+b9HZn5a5pQ");
		internal static readonly GlobalObjectKey IdOnUndeploy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bAf4mRS7Kk+D+K8+tIu6vw");
		internal static readonly GlobalObjectKey IdOnUpdateConfigurations = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ryJ+Hyo_Q0iSCCv3l+Gt4g");
		internal static readonly GlobalObjectKey IdManualDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aUo70QOQNEycGoCw7r1rbg");
		internal static readonly GlobalObjectKey IdAutomaticDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WhT_rnaoY0GFUMm0icBTag");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ResultPath")]
		public string ssResultPath;

		[System.Xml.Serialization.XmlElement("TargetPath")]
		public string ssTargetPath;

		[System.Xml.Serialization.XmlElement("FromImageReference")]
		public string ssFromImageReference;

		[System.Xml.Serialization.XmlElement("ConfigPath")]
		public string ssConfigPath;

		[System.Xml.Serialization.XmlElement("OnPrepareDeployDone")]
		public string ssOnPrepareDeployDone;

		[System.Xml.Serialization.XmlElement("OnDeployDone")]
		public string ssOnDeployDone;

		[System.Xml.Serialization.XmlElement("OnUndeploy")]
		public string ssOnUndeploy;

		[System.Xml.Serialization.XmlElement("OnUpdateConfigurations")]
		public string ssOnUpdateConfigurations;

		[System.Xml.Serialization.XmlElement("ManualDeployTimeoutInMinutes")]
		public int ssManualDeployTimeoutInMinutes;

		[System.Xml.Serialization.XmlElement("AutomaticDeployTimeoutInMinutes")]
		public int ssAutomaticDeployTimeoutInMinutes;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_DockerStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssResultPath = r.ReadText(index++, "DeploymentZone_Docker.ResultPath", "");
			ssTargetPath = r.ReadText(index++, "DeploymentZone_Docker.TargetPath", "");
			ssFromImageReference = r.ReadText(index++, "DeploymentZone_Docker.FromImageReference", "");
			ssConfigPath = r.ReadText(index++, "DeploymentZone_Docker.ConfigPath", "");
			ssOnPrepareDeployDone = r.ReadText(index++, "DeploymentZone_Docker.OnPrepareDeployDone", "");
			ssOnDeployDone = r.ReadText(index++, "DeploymentZone_Docker.OnDeployDone", "");
			ssOnUndeploy = r.ReadText(index++, "DeploymentZone_Docker.OnUndeploy", "");
			ssOnUpdateConfigurations = r.ReadText(index++, "DeploymentZone_Docker.OnUpdateConfigurations", "");
			ssManualDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_Docker.ManualDeployTimeoutInMinutes", 0);
			ssAutomaticDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_Docker.AutomaticDeployTimeoutInMinutes", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_DockerStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_DockerStructure a, STDeploymentZone_DockerStructure b) {
			if (a.ssResultPath != b.ssResultPath) return false;
			if (a.ssTargetPath != b.ssTargetPath) return false;
			if (a.ssFromImageReference != b.ssFromImageReference) return false;
			if (a.ssConfigPath != b.ssConfigPath) return false;
			if (a.ssOnPrepareDeployDone != b.ssOnPrepareDeployDone) return false;
			if (a.ssOnDeployDone != b.ssOnDeployDone) return false;
			if (a.ssOnUndeploy != b.ssOnUndeploy) return false;
			if (a.ssOnUpdateConfigurations != b.ssOnUpdateConfigurations) return false;
			if (a.ssManualDeployTimeoutInMinutes != b.ssManualDeployTimeoutInMinutes) return false;
			if (a.ssAutomaticDeployTimeoutInMinutes != b.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_DockerStructure a, STDeploymentZone_DockerStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_DockerStructure)) return false;
			return (this == (STDeploymentZone_DockerStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssResultPath.GetHashCode()
				^ ssTargetPath.GetHashCode()
				^ ssFromImageReference.GetHashCode()
				^ ssConfigPath.GetHashCode()
				^ ssOnPrepareDeployDone.GetHashCode()
				^ ssOnDeployDone.GetHashCode()
				^ ssOnUndeploy.GetHashCode()
				^ ssOnUpdateConfigurations.GetHashCode()
				^ ssManualDeployTimeoutInMinutes.GetHashCode()
				^ ssAutomaticDeployTimeoutInMinutes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_DockerStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssResultPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResultPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResultPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTargetPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTargetPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTargetPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFromImageReference", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFromImageReference' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFromImageReference = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnPrepareDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnPrepareDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnPrepareDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUndeploy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUndeploy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUndeploy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUpdateConfigurations", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUpdateConfigurations' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUpdateConfigurations = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManualDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManualDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManualDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAutomaticDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAutomaticDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAutomaticDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentZone_DockerStructure Duplicate() {
			STDeploymentZone_DockerStructure t;
			t.ssResultPath = this.ssResultPath;
			t.ssTargetPath = this.ssTargetPath;
			t.ssFromImageReference = this.ssFromImageReference;
			t.ssConfigPath = this.ssConfigPath;
			t.ssOnPrepareDeployDone = this.ssOnPrepareDeployDone;
			t.ssOnDeployDone = this.ssOnDeployDone;
			t.ssOnUndeploy = this.ssOnUndeploy;
			t.ssOnUpdateConfigurations = this.ssOnUpdateConfigurations;
			t.ssManualDeployTimeoutInMinutes = this.ssManualDeployTimeoutInMinutes;
			t.ssAutomaticDeployTimeoutInMinutes = this.ssAutomaticDeployTimeoutInMinutes;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResultPath")) VarValue.AppendAttribute(recordElem, "ResultPath", ssResultPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResultPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetPath")) VarValue.AppendAttribute(recordElem, "TargetPath", ssTargetPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FromImageReference")) VarValue.AppendAttribute(recordElem, "FromImageReference", ssFromImageReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FromImageReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ConfigPath")) VarValue.AppendAttribute(recordElem, "ConfigPath", ssConfigPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ConfigPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnPrepareDeployDone")) VarValue.AppendAttribute(recordElem, "OnPrepareDeployDone", ssOnPrepareDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnPrepareDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnDeployDone")) VarValue.AppendAttribute(recordElem, "OnDeployDone", ssOnDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUndeploy")) VarValue.AppendAttribute(recordElem, "OnUndeploy", ssOnUndeploy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUndeploy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUpdateConfigurations")) VarValue.AppendAttribute(recordElem, "OnUpdateConfigurations", ssOnUpdateConfigurations, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUpdateConfigurations");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ManualDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "ManualDeployTimeoutInMinutes", ssManualDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ManualDeployTimeoutInMinutes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutomaticDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "AutomaticDeployTimeoutInMinutes", ssAutomaticDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AutomaticDeployTimeoutInMinutes");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "resultpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResultPath")) variable.Value = ssResultPath; else variable.Optimized = true;
			} else if (head == "targetpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetPath")) variable.Value = ssTargetPath; else variable.Optimized = true;
			} else if (head == "fromimagereference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FromImageReference")) variable.Value = ssFromImageReference; else variable.Optimized = true;
			} else if (head == "configpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfigPath")) variable.Value = ssConfigPath; else variable.Optimized = true;
			} else if (head == "onpreparedeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnPrepareDeployDone")) variable.Value = ssOnPrepareDeployDone; else variable.Optimized = true;
			} else if (head == "ondeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnDeployDone")) variable.Value = ssOnDeployDone; else variable.Optimized = true;
			} else if (head == "onundeploy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUndeploy")) variable.Value = ssOnUndeploy; else variable.Optimized = true;
			} else if (head == "onupdateconfigurations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUpdateConfigurations")) variable.Value = ssOnUpdateConfigurations; else variable.Optimized = true;
			} else if (head == "manualdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ManualDeployTimeoutInMinutes")) variable.Value = ssManualDeployTimeoutInMinutes; else variable.Optimized = true;
			} else if (head == "automaticdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutomaticDeployTimeoutInMinutes")) variable.Value = ssAutomaticDeployTimeoutInMinutes; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdResultPath) {
				return ssResultPath;
			} else if (key == IdTargetPath) {
				return ssTargetPath;
			} else if (key == IdFromImageReference) {
				return ssFromImageReference;
			} else if (key == IdConfigPath) {
				return ssConfigPath;
			} else if (key == IdOnPrepareDeployDone) {
				return ssOnPrepareDeployDone;
			} else if (key == IdOnDeployDone) {
				return ssOnDeployDone;
			} else if (key == IdOnUndeploy) {
				return ssOnUndeploy;
			} else if (key == IdOnUpdateConfigurations) {
				return ssOnUpdateConfigurations;
			} else if (key == IdManualDeployTimeoutInMinutes) {
				return ssManualDeployTimeoutInMinutes;
			} else if (key == IdAutomaticDeployTimeoutInMinutes) {
				return ssAutomaticDeployTimeoutInMinutes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssResultPath = (string) other.AttributeGet(IdResultPath);
			ssTargetPath = (string) other.AttributeGet(IdTargetPath);
			ssFromImageReference = (string) other.AttributeGet(IdFromImageReference);
			ssConfigPath = (string) other.AttributeGet(IdConfigPath);
			ssOnPrepareDeployDone = (string) other.AttributeGet(IdOnPrepareDeployDone);
			ssOnDeployDone = (string) other.AttributeGet(IdOnDeployDone);
			ssOnUndeploy = (string) other.AttributeGet(IdOnUndeploy);
			ssOnUpdateConfigurations = (string) other.AttributeGet(IdOnUpdateConfigurations);
			ssManualDeployTimeoutInMinutes = (int) other.AttributeGet(IdManualDeployTimeoutInMinutes);
			ssAutomaticDeployTimeoutInMinutes = (int) other.AttributeGet(IdAutomaticDeployTimeoutInMinutes);
		}
		public bool IsDefault() {
			STDeploymentZone_DockerStructure defaultStruct = new STDeploymentZone_DockerStructure(null);
			if (this.ssResultPath != defaultStruct.ssResultPath) return false;
			if (this.ssTargetPath != defaultStruct.ssTargetPath) return false;
			if (this.ssFromImageReference != defaultStruct.ssFromImageReference) return false;
			if (this.ssConfigPath != defaultStruct.ssConfigPath) return false;
			if (this.ssOnPrepareDeployDone != defaultStruct.ssOnPrepareDeployDone) return false;
			if (this.ssOnDeployDone != defaultStruct.ssOnDeployDone) return false;
			if (this.ssOnUndeploy != defaultStruct.ssOnUndeploy) return false;
			if (this.ssOnUpdateConfigurations != defaultStruct.ssOnUpdateConfigurations) return false;
			if (this.ssManualDeployTimeoutInMinutes != defaultStruct.ssManualDeployTimeoutInMinutes) return false;
			if (this.ssAutomaticDeployTimeoutInMinutes != defaultStruct.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}
	} // STDeploymentZone_DockerStructure

	/// <summary>
	/// Structure <code>STDeploymentZoneStructure</code> that represents the Service Studio structure
	///  <code>DeploymentZone</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZoneStructure: ISerializable, ITypedRecord<STDeploymentZoneStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0D65g54Qy0miN1HNs8tLVQ");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UyMrKzNA+Uq9bgURoYoxow");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Xm61SmtryUSZEETG1spZ2w");
		internal static readonly GlobalObjectKey IdAddress = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*giWjWqghUUCJ+uw9DFQa3Q");
		internal static readonly GlobalObjectKey IdEnableHttps = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*95mKFMpn2keUkcYEZNl1fQ");
		internal static readonly GlobalObjectKey IdDeploymentTechKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*sJ1aXCoxOkmHqM7XPcr1kw");
		internal static readonly GlobalObjectKey IdIsDefault = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*yuUFNkFnVk6uilBfRdp2bw");
		internal static readonly GlobalObjectKey IdAmazonECSConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GeFuh8v1xEWD8acswqVO4w");
		internal static readonly GlobalObjectKey IdAzureContainerServiceConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*EB67EP+D3UaM0lPSjoSmuA");
		internal static readonly GlobalObjectKey IdDockerConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*cKRTUOOgSEGaTFjhgiIrWw");
		internal static readonly GlobalObjectKey IdPivotalConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Jusm4A+EkUufn+jC1VsSVw");
		internal static readonly GlobalObjectKey IdVMConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*FA7fVXeFnkSWF9gLYM4w4g");
		internal static readonly GlobalObjectKey IdEspaceKeys = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ea02pjNUhUugrCRGSfN_8g");
		internal static readonly GlobalObjectKey IdAmazonEKSConfig = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ofCDmTVmU0qwxSuPXX7UfQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("Address")]
		public string ssAddress;

		[System.Xml.Serialization.XmlElement("EnableHttps")]
		public bool ssEnableHttps;

		[System.Xml.Serialization.XmlElement("DeploymentTechKey")]
		public string ssDeploymentTechKey;

		[System.Xml.Serialization.XmlElement("IsDefault")]
		public bool ssIsDefault;

		[System.Xml.Serialization.XmlElement("AmazonECSConfig")]
		public RCDeploymentZone_AmazonECSRecord ssAmazonECSConfig;

		[System.Xml.Serialization.XmlElement("AzureContainerServiceConfig")]
		public RCDeploymentZone_AzureContainerServiceRecord ssAzureContainerServiceConfig;

		[System.Xml.Serialization.XmlElement("DockerConfig")]
		public RCDeploymentZone_DockerRecord ssDockerConfig;

		[System.Xml.Serialization.XmlElement("PivotalConfig")]
		public RCDeploymentZone_PivotalRecord ssPivotalConfig;

		[System.Xml.Serialization.XmlElement("VMConfig")]
		public RCDeploymentZone_VMRecord ssVMConfig;

		[System.Xml.Serialization.XmlElement("EspaceKeys")]
		public RLGenericRecordDescriptionRecordList ssEspaceKeys;

		[System.Xml.Serialization.XmlElement("AmazonEKSConfig")]
		public RCDeploymentZone_AmazonEKSRecord ssAmazonEKSConfig;


		public BitArray OptimizedAttributes;

		public STDeploymentZoneStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssDescription = "";
			ssAddress = "";
			ssEnableHttps = false;
			ssDeploymentTechKey = "";
			ssIsDefault = false;
			ssAmazonECSConfig = new RCDeploymentZone_AmazonECSRecord(null);
			ssAzureContainerServiceConfig = new RCDeploymentZone_AzureContainerServiceRecord(null);
			ssDockerConfig = new RCDeploymentZone_DockerRecord(null);
			ssPivotalConfig = new RCDeploymentZone_PivotalRecord(null);
			ssVMConfig = new RCDeploymentZone_VMRecord(null);
			ssEspaceKeys = new RLGenericRecordDescriptionRecordList();
			ssAmazonEKSConfig = new RCDeploymentZone_AmazonEKSRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[6];
			all[0] = null;
			all[1] = null;
			all[2] = null;
			all[3] = null;
			all[4] = null;
			all[5] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssAmazonECSConfig.OptimizedAttributes = value[0];
					ssAzureContainerServiceConfig.OptimizedAttributes = value[1];
					ssDockerConfig.OptimizedAttributes = value[2];
					ssPivotalConfig.OptimizedAttributes = value[3];
					ssVMConfig.OptimizedAttributes = value[4];
					ssAmazonEKSConfig.OptimizedAttributes = value[5];
				}
			}
			get {
				BitArray[] all = new BitArray[6];
				all[0] = null;
				all[1] = null;
				all[2] = null;
				all[3] = null;
				all[4] = null;
				all[5] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "DeploymentZone.Key", "");
			ssName = r.ReadText(index++, "DeploymentZone.Name", "");
			ssDescription = r.ReadText(index++, "DeploymentZone.Description", "");
			ssAddress = r.ReadText(index++, "DeploymentZone.Address", "");
			ssEnableHttps = r.ReadBoolean(index++, "DeploymentZone.EnableHttps", false);
			ssDeploymentTechKey = r.ReadText(index++, "DeploymentZone.DeploymentTechKey", "");
			ssIsDefault = r.ReadBoolean(index++, "DeploymentZone.IsDefault", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZoneStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZoneStructure a, STDeploymentZoneStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssAddress != b.ssAddress) return false;
			if (a.ssEnableHttps != b.ssEnableHttps) return false;
			if (a.ssDeploymentTechKey != b.ssDeploymentTechKey) return false;
			if (a.ssIsDefault != b.ssIsDefault) return false;
			if (a.ssAmazonECSConfig != b.ssAmazonECSConfig) return false;
			if (a.ssAzureContainerServiceConfig != b.ssAzureContainerServiceConfig) return false;
			if (a.ssDockerConfig != b.ssDockerConfig) return false;
			if (a.ssPivotalConfig != b.ssPivotalConfig) return false;
			if (a.ssVMConfig != b.ssVMConfig) return false;
			if (a.ssEspaceKeys != b.ssEspaceKeys) return false;
			if (a.ssAmazonEKSConfig != b.ssAmazonEKSConfig) return false;
			return true;
		}

		public static bool operator != (STDeploymentZoneStructure a, STDeploymentZoneStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZoneStructure)) return false;
			return (this == (STDeploymentZoneStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssAddress.GetHashCode()
				^ ssEnableHttps.GetHashCode()
				^ ssDeploymentTechKey.GetHashCode()
				^ ssIsDefault.GetHashCode()
				^ ssAmazonECSConfig.GetHashCode()
				^ ssAzureContainerServiceConfig.GetHashCode()
				^ ssDockerConfig.GetHashCode()
				^ ssPivotalConfig.GetHashCode()
				^ ssVMConfig.GetHashCode()
				^ ssEspaceKeys.GetHashCode()
				^ ssAmazonEKSConfig.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZoneStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssDescription = "";
			ssAddress = "";
			ssEnableHttps = false;
			ssDeploymentTechKey = "";
			ssIsDefault = false;
			ssAmazonECSConfig = new RCDeploymentZone_AmazonECSRecord(null);
			ssAzureContainerServiceConfig = new RCDeploymentZone_AzureContainerServiceRecord(null);
			ssDockerConfig = new RCDeploymentZone_DockerRecord(null);
			ssPivotalConfig = new RCDeploymentZone_PivotalRecord(null);
			ssVMConfig = new RCDeploymentZone_VMRecord(null);
			ssEspaceKeys = new RLGenericRecordDescriptionRecordList();
			ssAmazonEKSConfig = new RCDeploymentZone_AmazonEKSRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAddress' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAddress = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEnableHttps", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEnableHttps' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEnableHttps = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDeploymentTechKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDeploymentTechKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDeploymentTechKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsDefault", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsDefault' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsDefault = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAmazonECSConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAmazonECSConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAmazonECSConfig = (RCDeploymentZone_AmazonECSRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAzureContainerServiceConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAzureContainerServiceConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAzureContainerServiceConfig = (RCDeploymentZone_AzureContainerServiceRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDockerConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDockerConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDockerConfig = (RCDeploymentZone_DockerRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPivotalConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPivotalConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPivotalConfig = (RCDeploymentZone_PivotalRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVMConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVMConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVMConfig = (RCDeploymentZone_VMRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspaceKeys", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceKeys' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceKeys = (RLGenericRecordDescriptionRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAmazonEKSConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAmazonEKSConfig' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAmazonEKSConfig = (RCDeploymentZone_AmazonEKSRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssAmazonECSConfig.RecursiveReset();
			ssAzureContainerServiceConfig.RecursiveReset();
			ssDockerConfig.RecursiveReset();
			ssPivotalConfig.RecursiveReset();
			ssVMConfig.RecursiveReset();
			ssEspaceKeys.RecursiveReset();
			ssAmazonEKSConfig.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssAmazonECSConfig.InternalRecursiveSave();
			ssAzureContainerServiceConfig.InternalRecursiveSave();
			ssDockerConfig.InternalRecursiveSave();
			ssPivotalConfig.InternalRecursiveSave();
			ssVMConfig.InternalRecursiveSave();
			ssEspaceKeys.InternalRecursiveSave();
			ssAmazonEKSConfig.InternalRecursiveSave();
		}


		public STDeploymentZoneStructure Duplicate() {
			STDeploymentZoneStructure t;
			t.ssKey = this.ssKey;
			t.ssName = this.ssName;
			t.ssDescription = this.ssDescription;
			t.ssAddress = this.ssAddress;
			t.ssEnableHttps = this.ssEnableHttps;
			t.ssDeploymentTechKey = this.ssDeploymentTechKey;
			t.ssIsDefault = this.ssIsDefault;
			t.ssAmazonECSConfig = (RCDeploymentZone_AmazonECSRecord) this.ssAmazonECSConfig.Duplicate();
			t.ssAzureContainerServiceConfig = (RCDeploymentZone_AzureContainerServiceRecord) this.ssAzureContainerServiceConfig.Duplicate();
			t.ssDockerConfig = (RCDeploymentZone_DockerRecord) this.ssDockerConfig.Duplicate();
			t.ssPivotalConfig = (RCDeploymentZone_PivotalRecord) this.ssPivotalConfig.Duplicate();
			t.ssVMConfig = (RCDeploymentZone_VMRecord) this.ssVMConfig.Duplicate();
			t.ssEspaceKeys = (RLGenericRecordDescriptionRecordList) this.ssEspaceKeys.Duplicate();
			t.ssAmazonEKSConfig = (RCDeploymentZone_AmazonEKSRecord) this.ssAmazonEKSConfig.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Address")) VarValue.AppendAttribute(recordElem, "Address", ssAddress, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Address");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EnableHttps")) VarValue.AppendAttribute(recordElem, "EnableHttps", ssEnableHttps, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "EnableHttps");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DeploymentTechKey")) VarValue.AppendAttribute(recordElem, "DeploymentTechKey", ssDeploymentTechKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DeploymentTechKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsDefault")) VarValue.AppendAttribute(recordElem, "IsDefault", ssIsDefault, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsDefault");
				ssAmazonECSConfig.ToXml(this, recordElem, "AmazonECSConfig", detailLevel - 1);
				ssAzureContainerServiceConfig.ToXml(this, recordElem, "AzureContainerServiceConfig", detailLevel - 1);
				ssDockerConfig.ToXml(this, recordElem, "DockerConfig", detailLevel - 1);
				ssPivotalConfig.ToXml(this, recordElem, "PivotalConfig", detailLevel - 1);
				ssVMConfig.ToXml(this, recordElem, "VMConfig", detailLevel - 1);
				ssEspaceKeys.ToXml(this, recordElem, "EspaceKeys", detailLevel - 1);
				ssAmazonEKSConfig.ToXml(this, recordElem, "AmazonEKSConfig", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "address") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Address")) variable.Value = ssAddress; else variable.Optimized = true;
			} else if (head == "enablehttps") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EnableHttps")) variable.Value = ssEnableHttps; else variable.Optimized = true;
			} else if (head == "deploymenttechkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DeploymentTechKey")) variable.Value = ssDeploymentTechKey; else variable.Optimized = true;
			} else if (head == "isdefault") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsDefault")) variable.Value = ssIsDefault; else variable.Optimized = true;
			} else if (head == "amazonecsconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AmazonECSConfig")) variable.Value = ssAmazonECSConfig; else variable.Optimized = true;
				variable.SetFieldName("amazonecsconfig");
			} else if (head == "azurecontainerserviceconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AzureContainerServiceConfig")) variable.Value = ssAzureContainerServiceConfig; else variable.Optimized = true;
				variable.SetFieldName("azurecontainerserviceconfig");
			} else if (head == "dockerconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DockerConfig")) variable.Value = ssDockerConfig; else variable.Optimized = true;
				variable.SetFieldName("dockerconfig");
			} else if (head == "pivotalconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PivotalConfig")) variable.Value = ssPivotalConfig; else variable.Optimized = true;
				variable.SetFieldName("pivotalconfig");
			} else if (head == "vmconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VMConfig")) variable.Value = ssVMConfig; else variable.Optimized = true;
				variable.SetFieldName("vmconfig");
			} else if (head == "espacekeys") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceKeys")) variable.Value = ssEspaceKeys; else variable.Optimized = true;
				variable.SetFieldName("espacekeys");
			} else if (head == "amazoneksconfig") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AmazonEKSConfig")) variable.Value = ssAmazonEKSConfig; else variable.Optimized = true;
				variable.SetFieldName("amazoneksconfig");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdAddress) {
				return ssAddress;
			} else if (key == IdEnableHttps) {
				return ssEnableHttps;
			} else if (key == IdDeploymentTechKey) {
				return ssDeploymentTechKey;
			} else if (key == IdIsDefault) {
				return ssIsDefault;
			} else if (key == IdAmazonECSConfig) {
				return ssAmazonECSConfig;
			} else if (key == IdAzureContainerServiceConfig) {
				return ssAzureContainerServiceConfig;
			} else if (key == IdDockerConfig) {
				return ssDockerConfig;
			} else if (key == IdPivotalConfig) {
				return ssPivotalConfig;
			} else if (key == IdVMConfig) {
				return ssVMConfig;
			} else if (key == IdEspaceKeys) {
				return ssEspaceKeys;
			} else if (key == IdAmazonEKSConfig) {
				return ssAmazonEKSConfig;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssName = (string) other.AttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssAddress = (string) other.AttributeGet(IdAddress);
			ssEnableHttps = (bool) other.AttributeGet(IdEnableHttps);
			ssDeploymentTechKey = (string) other.AttributeGet(IdDeploymentTechKey);
			ssIsDefault = (bool) other.AttributeGet(IdIsDefault);
			ssAmazonECSConfig.FillFromOther((IRecord) other.AttributeGet(IdAmazonECSConfig));
			ssAzureContainerServiceConfig.FillFromOther((IRecord) other.AttributeGet(IdAzureContainerServiceConfig));
			ssDockerConfig.FillFromOther((IRecord) other.AttributeGet(IdDockerConfig));
			ssPivotalConfig.FillFromOther((IRecord) other.AttributeGet(IdPivotalConfig));
			ssVMConfig.FillFromOther((IRecord) other.AttributeGet(IdVMConfig));
			ssEspaceKeys = new RLGenericRecordDescriptionRecordList();
			ssEspaceKeys.FillFromOther((IOSList) other.AttributeGet(IdEspaceKeys));
			ssAmazonEKSConfig.FillFromOther((IRecord) other.AttributeGet(IdAmazonEKSConfig));
		}
		public bool IsDefault() {
			STDeploymentZoneStructure defaultStruct = new STDeploymentZoneStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssAddress != defaultStruct.ssAddress) return false;
			if (this.ssEnableHttps != defaultStruct.ssEnableHttps) return false;
			if (this.ssDeploymentTechKey != defaultStruct.ssDeploymentTechKey) return false;
			if (this.ssIsDefault != defaultStruct.ssIsDefault) return false;
			if (this.ssAmazonECSConfig != defaultStruct.ssAmazonECSConfig) return false;
			if (this.ssAzureContainerServiceConfig != defaultStruct.ssAzureContainerServiceConfig) return false;
			if (this.ssDockerConfig != defaultStruct.ssDockerConfig) return false;
			if (this.ssPivotalConfig != defaultStruct.ssPivotalConfig) return false;
			if (this.ssVMConfig != defaultStruct.ssVMConfig) return false;
			if (this.ssEspaceKeys != null && this.ssEspaceKeys.Length != 0) return false;
			if (this.ssAmazonEKSConfig != defaultStruct.ssAmazonEKSConfig) return false;
			return true;
		}
	} // STDeploymentZoneStructure

	/// <summary>
	/// Structure <code>STApplicationModuleDetailsStructure</code> that represents the Service Studio
	///  structure <code>ApplicationModuleDetails</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STApplicationModuleDetailsStructure: ISerializable, ITypedRecord<STApplicationModuleDetailsStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdModuleKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vlJuxABM9E6QnyfOQbsh4A");
		internal static readonly GlobalObjectKey IdModuleName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*CVceKX9p9kGemD1TCvSITQ");
		internal static readonly GlobalObjectKey IdApplicationName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*I8EjfPXRL0G6XcZePQ5FDA");
		internal static readonly GlobalObjectKey IdApplicationKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+0OIXnkTlEO4Rv44IDHw+A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ModuleKey")]
		public string ssModuleKey;

		[System.Xml.Serialization.XmlElement("ModuleName")]
		public string ssModuleName;

		[System.Xml.Serialization.XmlElement("ApplicationName")]
		public string ssApplicationName;

		[System.Xml.Serialization.XmlElement("ApplicationKey")]
		public string ssApplicationKey;


		public BitArray OptimizedAttributes;

		public STApplicationModuleDetailsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssModuleKey = "";
			ssModuleName = "";
			ssApplicationName = "";
			ssApplicationKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssModuleKey = r.ReadText(index++, "ApplicationModuleDetails.ModuleKey", "");
			ssModuleName = r.ReadText(index++, "ApplicationModuleDetails.ModuleName", "");
			ssApplicationName = r.ReadText(index++, "ApplicationModuleDetails.ApplicationName", "");
			ssApplicationKey = r.ReadText(index++, "ApplicationModuleDetails.ApplicationKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STApplicationModuleDetailsStructure r) {
			this = r;
		}


		public static bool operator == (STApplicationModuleDetailsStructure a, STApplicationModuleDetailsStructure b) {
			if (a.ssModuleKey != b.ssModuleKey) return false;
			if (a.ssModuleName != b.ssModuleName) return false;
			if (a.ssApplicationName != b.ssApplicationName) return false;
			if (a.ssApplicationKey != b.ssApplicationKey) return false;
			return true;
		}

		public static bool operator != (STApplicationModuleDetailsStructure a, STApplicationModuleDetailsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STApplicationModuleDetailsStructure)) return false;
			return (this == (STApplicationModuleDetailsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssModuleKey.GetHashCode()
				^ ssModuleName.GetHashCode()
				^ ssApplicationName.GetHashCode()
				^ ssApplicationKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STApplicationModuleDetailsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssModuleKey = "";
			ssModuleName = "";
			ssApplicationName = "";
			ssApplicationKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssModuleKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssModuleKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssModuleKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssModuleName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssModuleName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssModuleName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STApplicationModuleDetailsStructure Duplicate() {
			STApplicationModuleDetailsStructure t;
			t.ssModuleKey = this.ssModuleKey;
			t.ssModuleName = this.ssModuleName;
			t.ssApplicationName = this.ssApplicationName;
			t.ssApplicationKey = this.ssApplicationKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ModuleKey")) VarValue.AppendAttribute(recordElem, "ModuleKey", ssModuleKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ModuleKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ModuleName")) VarValue.AppendAttribute(recordElem, "ModuleName", ssModuleName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ModuleName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationName")) VarValue.AppendAttribute(recordElem, "ApplicationName", ssApplicationName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKey")) VarValue.AppendAttribute(recordElem, "ApplicationKey", ssApplicationKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "modulekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ModuleKey")) variable.Value = ssModuleKey; else variable.Optimized = true;
			} else if (head == "modulename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ModuleName")) variable.Value = ssModuleName; else variable.Optimized = true;
			} else if (head == "applicationname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationName")) variable.Value = ssApplicationName; else variable.Optimized = true;
			} else if (head == "applicationkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKey")) variable.Value = ssApplicationKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdModuleKey) {
				return ssModuleKey;
			} else if (key == IdModuleName) {
				return ssModuleName;
			} else if (key == IdApplicationName) {
				return ssApplicationName;
			} else if (key == IdApplicationKey) {
				return ssApplicationKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssModuleKey = (string) other.AttributeGet(IdModuleKey);
			ssModuleName = (string) other.AttributeGet(IdModuleName);
			ssApplicationName = (string) other.AttributeGet(IdApplicationName);
			ssApplicationKey = (string) other.AttributeGet(IdApplicationKey);
		}
		public bool IsDefault() {
			STApplicationModuleDetailsStructure defaultStruct = new STApplicationModuleDetailsStructure(null);
			if (this.ssModuleKey != defaultStruct.ssModuleKey) return false;
			if (this.ssModuleName != defaultStruct.ssModuleName) return false;
			if (this.ssApplicationName != defaultStruct.ssApplicationName) return false;
			if (this.ssApplicationKey != defaultStruct.ssApplicationKey) return false;
			return true;
		}
	} // STApplicationModuleDetailsStructure

	/// <summary>
	/// Structure <code>STGenericRecordDescriptionStructure</code> that represents the Service Studio
	///  structure <code>GenericRecordDescription</code> <p> Description: Used to describe a record in
	/// a generic form</p>
	/// </summary>
	[Serializable()]
	public partial struct STGenericRecordDescriptionStructure: ISerializable, ITypedRecord<STGenericRecordDescriptionStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Ix38uWsivUCPrEg3BER7Ag");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*M5hhIV2hskCyGuNLKbTg6w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;


		public BitArray OptimizedAttributes;

		public STGenericRecordDescriptionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "GenericRecordDescription.Key", "");
			ssName = r.ReadText(index++, "GenericRecordDescription.Name", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STGenericRecordDescriptionStructure r) {
			this = r;
		}


		public static bool operator == (STGenericRecordDescriptionStructure a, STGenericRecordDescriptionStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssName != b.ssName) return false;
			return true;
		}

		public static bool operator != (STGenericRecordDescriptionStructure a, STGenericRecordDescriptionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STGenericRecordDescriptionStructure)) return false;
			return (this == (STGenericRecordDescriptionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STGenericRecordDescriptionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STGenericRecordDescriptionStructure Duplicate() {
			STGenericRecordDescriptionStructure t;
			t.ssKey = this.ssKey;
			t.ssName = this.ssName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdName) {
				return ssName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssName = (string) other.AttributeGet(IdName);
		}
		public bool IsDefault() {
			STGenericRecordDescriptionStructure defaultStruct = new STGenericRecordDescriptionStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			return true;
		}
	} // STGenericRecordDescriptionStructure

	/// <summary>
	/// Structure <code>STESpaceDetailedInfoStructure</code> that represents the Service Studio structure
	///  <code>ESpaceDetailedInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STESpaceDetailedInfoStructure: ISerializable, ITypedRecord<STESpaceDetailedInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdeSpace_name = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pn2mOjX2XE+XSpHoZdoYkg");
		internal static readonly GlobalObjectKey IdeSpace_UID = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gTNPcNs92Uycdrcd5aXgQA");
		internal static readonly GlobalObjectKey IdeSpace_system = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8KIRGneqgkmNK4sjK4Tmxw");
		internal static readonly GlobalObjectKey IdeSpace_multitenant = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qaPAcMyzlEmjV_vB8_5smg");
		internal static readonly GlobalObjectKey IdeSpace_versionHistory = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PLhxtFV+90CC5jozUNRuzw");
		internal static readonly GlobalObjectKey IdeSpace_valid = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*yZ3Zh9nG50GDqf2d+10BuQ");
		internal static readonly GlobalObjectKey IdeSpace_UserEntity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7Ztt0igc_UuW0LP0yOJd0A");
		internal static readonly GlobalObjectKey IdeSpace_ServiceStudioVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*guRMLEXCTU2iveGM3yoaBQ");
		internal static readonly GlobalObjectKey IdeSpace_LastUpgradeVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*iP7agWOqL0eEcsWgvFcJxw");
		internal static readonly GlobalObjectKey IdeSpace_Description = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_Jt4MmymP0qbptqkjhJhUA");
		internal static readonly GlobalObjectKey IdeSpace_Hash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zGL4X4qs_k2XEEoM9SUv7w");
		internal static readonly GlobalObjectKey IdeSpace_LastModified = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9GzNEN8cS0WPRo8USDJV+A");
		internal static readonly GlobalObjectKey IdExternalEntities = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kRXRHAv2V0a0M9P3TcPrVQ");
		internal static readonly GlobalObjectKey IdExtensions = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RQWW1KqxGEWWxbQ8Ejx0fQ");
		internal static readonly GlobalObjectKey IdESpaces = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9qJWtVkQVECB1VV7Mys52A");
		internal static readonly GlobalObjectKey IdeSpace_Is_User_Provider = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NgoRG9Kxm0+X5Imn9CNkqQ");
		internal static readonly GlobalObjectKey IdeSpace_User_Provider_Name = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+gK+7wEnjEqcucGIac5Cig");
		internal static readonly GlobalObjectKey IdeSpace_User_Provider_Key = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gCgK+YOp8kiGTTRpQHgjnA");
		internal static readonly GlobalObjectKey IdHas_HTTPS = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3IBtZraai0e5x5trsyaSRg");
		internal static readonly GlobalObjectKey IdHas_HTTPSWithClientCertificates = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*sT5rARRob0iu3R2zBNTL4A");
		internal static readonly GlobalObjectKey IdHas_IntegratedAuthentication = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qQc9kDa3N0yqjuSbIupMlA");
		internal static readonly GlobalObjectKey IdHas_SMS = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*T79M6oLmaUKU5xBgqLx8SA");
		internal static readonly GlobalObjectKey IdActivationCode = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9JbLuPNox022h3XO5ZT3nQ");
		internal static readonly GlobalObjectKey IdProductId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*yoJE0q4hX0SfyaqYxOA2nA");
		internal static readonly GlobalObjectKey IdProductName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5+AkqCQK60+SHiA_1WuX0g");
		internal static readonly GlobalObjectKey IdHas_WebServices = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RwfIVNVQ8UW9Gczi8bJN5Q");
		internal static readonly GlobalObjectKey IdHas_PublicElements = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*8L44iY_9OU6E7oeOoy2BOg");
		internal static readonly GlobalObjectKey IdDefault_Theme_Is_Mobile = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*CTLP+dp97EeQk33Snxdi8A");
		internal static readonly GlobalObjectKey IdDefault_Theme_Global_Key = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BAtbCEV0v0yGQ51t5+xOEw");
		internal static readonly GlobalObjectKey IdeSpace_DirectUpgradeFrom = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vbs42jJsckOCxvjWzdk6sA");
		internal static readonly GlobalObjectKey IdeSpace_GeneralHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9LGqverCzESSLBY9UgSc4Q");
		internal static readonly GlobalObjectKey IdeSpace_jQueryVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rPepVLaNZk+jRVM83oKOVA");
		internal static readonly GlobalObjectKey IdeSpace_Icon = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zTPsKxKziUaFWa7WSyPvBQ");
		internal static readonly GlobalObjectKey IdeSpace_Kind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*X8C+MXqi7EeHRHfC_Dxi1g");
		internal static readonly GlobalObjectKey IdeSpace_Complexity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*haPHBYjI20eDOFFVCTJlaA");
		internal static readonly GlobalObjectKey IdeSpace_Configurations = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WXnE_QGu00edoOaiBOUiFg");
		internal static readonly GlobalObjectKey IdeSpace_IsTemplateBundle = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kIOS8nztjEeTX2xjHLPG5w");
		internal static readonly GlobalObjectKey IdeSpace_UseCase = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RdTbeLD5bkilbqNuSo4NBA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("eSpace_name")]
		public string sseSpace_name;

		[System.Xml.Serialization.XmlElement("eSpace_UID")]
		public string sseSpace_UID;

		[System.Xml.Serialization.XmlElement("eSpace_system")]
		public bool sseSpace_system;

		[System.Xml.Serialization.XmlElement("eSpace_multitenant")]
		public bool sseSpace_multitenant;

		[System.Xml.Serialization.XmlElement("eSpace_versionHistory")]
		public byte[] sseSpace_versionHistory;

		[System.Xml.Serialization.XmlElement("eSpace_valid")]
		public bool sseSpace_valid;

		[System.Xml.Serialization.XmlElement("eSpace_UserEntity")]
		public bool sseSpace_UserEntity;

		[System.Xml.Serialization.XmlElement("eSpace_ServiceStudioVersion")]
		public string sseSpace_ServiceStudioVersion;

		[System.Xml.Serialization.XmlElement("eSpace_LastUpgradeVersion")]
		public string sseSpace_LastUpgradeVersion;

		[System.Xml.Serialization.XmlElement("eSpace_Description")]
		public string sseSpace_Description;

		[System.Xml.Serialization.XmlElement("eSpace_Hash")]
		public string sseSpace_Hash;

		[System.Xml.Serialization.XmlElement("eSpace_LastModified")]
		public DateTime sseSpace_LastModified;

		[System.Xml.Serialization.XmlElement("ExternalEntities")]
		public RLEntityInfoRecordList ssExternalEntities;

		[System.Xml.Serialization.XmlElement("Extensions")]
		public RLExtensionInfoRecordList ssExtensions;

		[System.Xml.Serialization.XmlElement("ESpaces")]
		public RLEspaceInfoRecordList ssESpaces;

		[System.Xml.Serialization.XmlElement("eSpace_Is_User_Provider")]
		public bool sseSpace_Is_User_Provider;

		[System.Xml.Serialization.XmlElement("eSpace_User_Provider_Name")]
		public string sseSpace_User_Provider_Name;

		[System.Xml.Serialization.XmlElement("eSpace_User_Provider_Key")]
		public string sseSpace_User_Provider_Key;

		[System.Xml.Serialization.XmlElement("Has_HTTPS")]
		public bool ssHas_HTTPS;

		[System.Xml.Serialization.XmlElement("Has_HTTPSWithClientCertificates")]
		public bool ssHas_HTTPSWithClientCertificates;

		[System.Xml.Serialization.XmlElement("Has_IntegratedAuthentication")]
		public bool ssHas_IntegratedAuthentication;

		[System.Xml.Serialization.XmlElement("Has_SMS")]
		public bool ssHas_SMS;

		[System.Xml.Serialization.XmlElement("ActivationCode")]
		public string ssActivationCode;

		[System.Xml.Serialization.XmlElement("ProductId")]
		public string ssProductId;

		[System.Xml.Serialization.XmlElement("ProductName")]
		public string ssProductName;

		[System.Xml.Serialization.XmlElement("Has_WebServices")]
		public bool ssHas_WebServices;

		[System.Xml.Serialization.XmlElement("Has_PublicElements")]
		public bool ssHas_PublicElements;

		[System.Xml.Serialization.XmlElement("Default_Theme_Is_Mobile")]
		public bool ssDefault_Theme_Is_Mobile;

		[System.Xml.Serialization.XmlElement("Default_Theme_Global_Key")]
		public string ssDefault_Theme_Global_Key;

		[System.Xml.Serialization.XmlElement("eSpace_DirectUpgradeFrom")]
		public string sseSpace_DirectUpgradeFrom;

		[System.Xml.Serialization.XmlElement("eSpace_GeneralHash")]
		public string sseSpace_GeneralHash;

		[System.Xml.Serialization.XmlElement("eSpace_jQueryVersion")]
		public string sseSpace_jQueryVersion;

		[System.Xml.Serialization.XmlElement("eSpace_Icon")]
		public byte[] sseSpace_Icon;

		[System.Xml.Serialization.XmlElement("eSpace_Kind")]
		public string sseSpace_Kind;

		[System.Xml.Serialization.XmlElement("eSpace_Complexity")]
		public int sseSpace_Complexity;

		[System.Xml.Serialization.XmlElement("eSpace_Configurations")]
		public string sseSpace_Configurations;

		[System.Xml.Serialization.XmlElement("eSpace_IsTemplateBundle")]
		public bool sseSpace_IsTemplateBundle;

		[System.Xml.Serialization.XmlElement("eSpace_UseCase")]
		public string sseSpace_UseCase;


		public BitArray OptimizedAttributes;

		public STESpaceDetailedInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			sseSpace_name = "";
			sseSpace_UID = "";
			sseSpace_system = false;
			sseSpace_multitenant = false;
			sseSpace_versionHistory = new byte[] {};
			sseSpace_valid = false;
			sseSpace_UserEntity = false;
			sseSpace_ServiceStudioVersion = "";
			sseSpace_LastUpgradeVersion = "";
			sseSpace_Description = "";
			sseSpace_Hash = "";
			sseSpace_LastModified = new DateTime(1900, 1, 1, 0, 0, 0);
			ssExternalEntities = new RLEntityInfoRecordList();
			ssExtensions = new RLExtensionInfoRecordList();
			ssESpaces = new RLEspaceInfoRecordList();
			sseSpace_Is_User_Provider = false;
			sseSpace_User_Provider_Name = "";
			sseSpace_User_Provider_Key = "";
			ssHas_HTTPS = false;
			ssHas_HTTPSWithClientCertificates = false;
			ssHas_IntegratedAuthentication = false;
			ssHas_SMS = false;
			ssActivationCode = "";
			ssProductId = "";
			ssProductName = "";
			ssHas_WebServices = false;
			ssHas_PublicElements = false;
			ssDefault_Theme_Is_Mobile = false;
			ssDefault_Theme_Global_Key = "";
			sseSpace_DirectUpgradeFrom = "";
			sseSpace_GeneralHash = "";
			sseSpace_jQueryVersion = "";
			sseSpace_Icon = new byte[] {};
			sseSpace_Kind = "";
			sseSpace_Complexity = 0;
			sseSpace_Configurations = "";
			sseSpace_IsTemplateBundle = false;
			sseSpace_UseCase = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			sseSpace_name = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_name", "");
			sseSpace_UID = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_UID", "");
			sseSpace_system = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_system", false);
			sseSpace_multitenant = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_multitenant", false);
			sseSpace_versionHistory = r.ReadBinaryData(index++, "ESpaceDetailedInfo.eSpace_versionHistory", new byte[] {});
			sseSpace_valid = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_valid", false);
			sseSpace_UserEntity = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_UserEntity", false);
			sseSpace_ServiceStudioVersion = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_ServiceStudioVersion", "");
			sseSpace_LastUpgradeVersion = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_LastUpgradeVersion", "");
			sseSpace_Description = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_Description", "");
			sseSpace_Hash = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_Hash", "");
			sseSpace_LastModified = r.ReadDateTime(index++, "ESpaceDetailedInfo.eSpace_LastModified", new DateTime(1900, 1, 1, 0, 0, 0));
			sseSpace_Is_User_Provider = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_Is_User_Provider", false);
			sseSpace_User_Provider_Name = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_User_Provider_Name", "");
			sseSpace_User_Provider_Key = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_User_Provider_Key", "");
			ssHas_HTTPS = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_HTTPS", false);
			ssHas_HTTPSWithClientCertificates = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_HTTPSWithClientCertificates", false);
			ssHas_IntegratedAuthentication = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_IntegratedAuthentication", false);
			ssHas_SMS = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_SMS", false);
			ssActivationCode = r.ReadText(index++, "ESpaceDetailedInfo.ActivationCode", "");
			ssProductId = r.ReadText(index++, "ESpaceDetailedInfo.ProductId", "");
			ssProductName = r.ReadText(index++, "ESpaceDetailedInfo.ProductName", "");
			ssHas_WebServices = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_WebServices", false);
			ssHas_PublicElements = r.ReadBoolean(index++, "ESpaceDetailedInfo.Has_PublicElements", false);
			ssDefault_Theme_Is_Mobile = r.ReadBoolean(index++, "ESpaceDetailedInfo.Default_Theme_Is_Mobile", false);
			ssDefault_Theme_Global_Key = r.ReadText(index++, "ESpaceDetailedInfo.Default_Theme_Global_Key", "");
			sseSpace_DirectUpgradeFrom = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_DirectUpgradeFrom", "");
			sseSpace_GeneralHash = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_GeneralHash", "");
			sseSpace_jQueryVersion = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_jQueryVersion", "");
			sseSpace_Icon = r.ReadBinaryData(index++, "ESpaceDetailedInfo.eSpace_Icon", new byte[] {});
			sseSpace_Kind = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_Kind", "");
			sseSpace_Complexity = r.ReadInteger(index++, "ESpaceDetailedInfo.eSpace_Complexity", 0);
			sseSpace_Configurations = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_Configurations", "");
			sseSpace_IsTemplateBundle = r.ReadBoolean(index++, "ESpaceDetailedInfo.eSpace_IsTemplateBundle", false);
			sseSpace_UseCase = r.ReadText(index++, "ESpaceDetailedInfo.eSpace_UseCase", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STESpaceDetailedInfoStructure r) {
			this = r;
		}


		public static bool operator == (STESpaceDetailedInfoStructure a, STESpaceDetailedInfoStructure b) {
			if (a.sseSpace_name != b.sseSpace_name) return false;
			if (a.sseSpace_UID != b.sseSpace_UID) return false;
			if (a.sseSpace_system != b.sseSpace_system) return false;
			if (a.sseSpace_multitenant != b.sseSpace_multitenant) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.sseSpace_versionHistory, b.sseSpace_versionHistory)) return false;
			if (a.sseSpace_valid != b.sseSpace_valid) return false;
			if (a.sseSpace_UserEntity != b.sseSpace_UserEntity) return false;
			if (a.sseSpace_ServiceStudioVersion != b.sseSpace_ServiceStudioVersion) return false;
			if (a.sseSpace_LastUpgradeVersion != b.sseSpace_LastUpgradeVersion) return false;
			if (a.sseSpace_Description != b.sseSpace_Description) return false;
			if (a.sseSpace_Hash != b.sseSpace_Hash) return false;
			if (a.sseSpace_LastModified != b.sseSpace_LastModified) return false;
			if (a.ssExternalEntities != b.ssExternalEntities) return false;
			if (a.ssExtensions != b.ssExtensions) return false;
			if (a.ssESpaces != b.ssESpaces) return false;
			if (a.sseSpace_Is_User_Provider != b.sseSpace_Is_User_Provider) return false;
			if (a.sseSpace_User_Provider_Name != b.sseSpace_User_Provider_Name) return false;
			if (a.sseSpace_User_Provider_Key != b.sseSpace_User_Provider_Key) return false;
			if (a.ssHas_HTTPS != b.ssHas_HTTPS) return false;
			if (a.ssHas_HTTPSWithClientCertificates != b.ssHas_HTTPSWithClientCertificates) return false;
			if (a.ssHas_IntegratedAuthentication != b.ssHas_IntegratedAuthentication) return false;
			if (a.ssHas_SMS != b.ssHas_SMS) return false;
			if (a.ssActivationCode != b.ssActivationCode) return false;
			if (a.ssProductId != b.ssProductId) return false;
			if (a.ssProductName != b.ssProductName) return false;
			if (a.ssHas_WebServices != b.ssHas_WebServices) return false;
			if (a.ssHas_PublicElements != b.ssHas_PublicElements) return false;
			if (a.ssDefault_Theme_Is_Mobile != b.ssDefault_Theme_Is_Mobile) return false;
			if (a.ssDefault_Theme_Global_Key != b.ssDefault_Theme_Global_Key) return false;
			if (a.sseSpace_DirectUpgradeFrom != b.sseSpace_DirectUpgradeFrom) return false;
			if (a.sseSpace_GeneralHash != b.sseSpace_GeneralHash) return false;
			if (a.sseSpace_jQueryVersion != b.sseSpace_jQueryVersion) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.sseSpace_Icon, b.sseSpace_Icon)) return false;
			if (a.sseSpace_Kind != b.sseSpace_Kind) return false;
			if (a.sseSpace_Complexity != b.sseSpace_Complexity) return false;
			if (a.sseSpace_Configurations != b.sseSpace_Configurations) return false;
			if (a.sseSpace_IsTemplateBundle != b.sseSpace_IsTemplateBundle) return false;
			if (a.sseSpace_UseCase != b.sseSpace_UseCase) return false;
			return true;
		}

		public static bool operator != (STESpaceDetailedInfoStructure a, STESpaceDetailedInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STESpaceDetailedInfoStructure)) return false;
			return (this == (STESpaceDetailedInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ sseSpace_name.GetHashCode()
				^ sseSpace_UID.GetHashCode()
				^ sseSpace_system.GetHashCode()
				^ sseSpace_multitenant.GetHashCode()
				^ sseSpace_versionHistory.GetHashCode()
				^ sseSpace_valid.GetHashCode()
				^ sseSpace_UserEntity.GetHashCode()
				^ sseSpace_ServiceStudioVersion.GetHashCode()
				^ sseSpace_LastUpgradeVersion.GetHashCode()
				^ sseSpace_Description.GetHashCode()
				^ sseSpace_Hash.GetHashCode()
				^ sseSpace_LastModified.GetHashCode()
				^ ssExternalEntities.GetHashCode()
				^ ssExtensions.GetHashCode()
				^ ssESpaces.GetHashCode()
				^ sseSpace_Is_User_Provider.GetHashCode()
				^ sseSpace_User_Provider_Name.GetHashCode()
				^ sseSpace_User_Provider_Key.GetHashCode()
				^ ssHas_HTTPS.GetHashCode()
				^ ssHas_HTTPSWithClientCertificates.GetHashCode()
				^ ssHas_IntegratedAuthentication.GetHashCode()
				^ ssHas_SMS.GetHashCode()
				^ ssActivationCode.GetHashCode()
				^ ssProductId.GetHashCode()
				^ ssProductName.GetHashCode()
				^ ssHas_WebServices.GetHashCode()
				^ ssHas_PublicElements.GetHashCode()
				^ ssDefault_Theme_Is_Mobile.GetHashCode()
				^ ssDefault_Theme_Global_Key.GetHashCode()
				^ sseSpace_DirectUpgradeFrom.GetHashCode()
				^ sseSpace_GeneralHash.GetHashCode()
				^ sseSpace_jQueryVersion.GetHashCode()
				^ sseSpace_Icon.GetHashCode()
				^ sseSpace_Kind.GetHashCode()
				^ sseSpace_Complexity.GetHashCode()
				^ sseSpace_Configurations.GetHashCode()
				^ sseSpace_IsTemplateBundle.GetHashCode()
				^ sseSpace_UseCase.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STESpaceDetailedInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			sseSpace_name = "";
			sseSpace_UID = "";
			sseSpace_system = false;
			sseSpace_multitenant = false;
			sseSpace_versionHistory = new byte[] {};
			sseSpace_valid = false;
			sseSpace_UserEntity = false;
			sseSpace_ServiceStudioVersion = "";
			sseSpace_LastUpgradeVersion = "";
			sseSpace_Description = "";
			sseSpace_Hash = "";
			sseSpace_LastModified = new DateTime(1900, 1, 1, 0, 0, 0);
			ssExternalEntities = new RLEntityInfoRecordList();
			ssExtensions = new RLExtensionInfoRecordList();
			ssESpaces = new RLEspaceInfoRecordList();
			sseSpace_Is_User_Provider = false;
			sseSpace_User_Provider_Name = "";
			sseSpace_User_Provider_Key = "";
			ssHas_HTTPS = false;
			ssHas_HTTPSWithClientCertificates = false;
			ssHas_IntegratedAuthentication = false;
			ssHas_SMS = false;
			ssActivationCode = "";
			ssProductId = "";
			ssProductName = "";
			ssHas_WebServices = false;
			ssHas_PublicElements = false;
			ssDefault_Theme_Is_Mobile = false;
			ssDefault_Theme_Global_Key = "";
			sseSpace_DirectUpgradeFrom = "";
			sseSpace_GeneralHash = "";
			sseSpace_jQueryVersion = "";
			sseSpace_Icon = new byte[] {};
			sseSpace_Kind = "";
			sseSpace_Complexity = 0;
			sseSpace_Configurations = "";
			sseSpace_IsTemplateBundle = false;
			sseSpace_UseCase = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("sseSpace_name", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_name' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_name = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_UID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_UID' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_UID = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_system", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_system' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_system = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_multitenant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_multitenant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_multitenant = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_versionHistory", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_versionHistory' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_versionHistory = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_valid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_valid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_valid = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_UserEntity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_UserEntity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_UserEntity = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_ServiceStudioVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_ServiceStudioVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_ServiceStudioVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_LastUpgradeVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_LastUpgradeVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_LastUpgradeVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Description", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Description' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Description = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Hash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Hash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Hash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_LastModified", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_LastModified' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_LastModified = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExternalEntities", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExternalEntities' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExternalEntities = (RLEntityInfoRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtensions", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtensions' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtensions = (RLExtensionInfoRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssESpaces", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssESpaces' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssESpaces = (RLEspaceInfoRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Is_User_Provider", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Is_User_Provider' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Is_User_Provider = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_User_Provider_Name", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_User_Provider_Name' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_User_Provider_Name = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_User_Provider_Key", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_User_Provider_Key' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_User_Provider_Key = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_HTTPS", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_HTTPS' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_HTTPS = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_HTTPSWithClientCertificates", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_HTTPSWithClientCertificates' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_HTTPSWithClientCertificates = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_IntegratedAuthentication", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_IntegratedAuthentication' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_IntegratedAuthentication = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_SMS", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_SMS' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_SMS = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssActivationCode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssActivationCode' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssActivationCode = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProductId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProductId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProductId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProductName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProductName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProductName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_WebServices", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_WebServices' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_WebServices = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHas_PublicElements", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHas_PublicElements' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHas_PublicElements = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDefault_Theme_Is_Mobile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDefault_Theme_Is_Mobile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDefault_Theme_Is_Mobile = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDefault_Theme_Global_Key", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDefault_Theme_Global_Key' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDefault_Theme_Global_Key = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_DirectUpgradeFrom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_DirectUpgradeFrom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_DirectUpgradeFrom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_GeneralHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_GeneralHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_GeneralHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_jQueryVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_jQueryVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_jQueryVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Icon", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Icon' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Icon = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Kind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Kind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Kind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Complexity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Complexity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Complexity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_Configurations", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_Configurations' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_Configurations = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_IsTemplateBundle", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_IsTemplateBundle' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_IsTemplateBundle = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("sseSpace_UseCase", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'sseSpace_UseCase' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				sseSpace_UseCase = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssExternalEntities.RecursiveReset();
			ssExtensions.RecursiveReset();
			ssESpaces.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssExternalEntities.InternalRecursiveSave();
			ssExtensions.InternalRecursiveSave();
			ssESpaces.InternalRecursiveSave();
		}


		public STESpaceDetailedInfoStructure Duplicate() {
			STESpaceDetailedInfoStructure t;
			t.sseSpace_name = this.sseSpace_name;
			t.sseSpace_UID = this.sseSpace_UID;
			t.sseSpace_system = this.sseSpace_system;
			t.sseSpace_multitenant = this.sseSpace_multitenant;
			if (this.sseSpace_versionHistory != null) {
				t.sseSpace_versionHistory = (byte[]) this.sseSpace_versionHistory.Clone();
			} else {
				t.sseSpace_versionHistory = null;
			}
			t.sseSpace_valid = this.sseSpace_valid;
			t.sseSpace_UserEntity = this.sseSpace_UserEntity;
			t.sseSpace_ServiceStudioVersion = this.sseSpace_ServiceStudioVersion;
			t.sseSpace_LastUpgradeVersion = this.sseSpace_LastUpgradeVersion;
			t.sseSpace_Description = this.sseSpace_Description;
			t.sseSpace_Hash = this.sseSpace_Hash;
			t.sseSpace_LastModified = this.sseSpace_LastModified;
			t.ssExternalEntities = (RLEntityInfoRecordList) this.ssExternalEntities.Duplicate();
			t.ssExtensions = (RLExtensionInfoRecordList) this.ssExtensions.Duplicate();
			t.ssESpaces = (RLEspaceInfoRecordList) this.ssESpaces.Duplicate();
			t.sseSpace_Is_User_Provider = this.sseSpace_Is_User_Provider;
			t.sseSpace_User_Provider_Name = this.sseSpace_User_Provider_Name;
			t.sseSpace_User_Provider_Key = this.sseSpace_User_Provider_Key;
			t.ssHas_HTTPS = this.ssHas_HTTPS;
			t.ssHas_HTTPSWithClientCertificates = this.ssHas_HTTPSWithClientCertificates;
			t.ssHas_IntegratedAuthentication = this.ssHas_IntegratedAuthentication;
			t.ssHas_SMS = this.ssHas_SMS;
			t.ssActivationCode = this.ssActivationCode;
			t.ssProductId = this.ssProductId;
			t.ssProductName = this.ssProductName;
			t.ssHas_WebServices = this.ssHas_WebServices;
			t.ssHas_PublicElements = this.ssHas_PublicElements;
			t.ssDefault_Theme_Is_Mobile = this.ssDefault_Theme_Is_Mobile;
			t.ssDefault_Theme_Global_Key = this.ssDefault_Theme_Global_Key;
			t.sseSpace_DirectUpgradeFrom = this.sseSpace_DirectUpgradeFrom;
			t.sseSpace_GeneralHash = this.sseSpace_GeneralHash;
			t.sseSpace_jQueryVersion = this.sseSpace_jQueryVersion;
			if (this.sseSpace_Icon != null) {
				t.sseSpace_Icon = (byte[]) this.sseSpace_Icon.Clone();
			} else {
				t.sseSpace_Icon = null;
			}
			t.sseSpace_Kind = this.sseSpace_Kind;
			t.sseSpace_Complexity = this.sseSpace_Complexity;
			t.sseSpace_Configurations = this.sseSpace_Configurations;
			t.sseSpace_IsTemplateBundle = this.sseSpace_IsTemplateBundle;
			t.sseSpace_UseCase = this.sseSpace_UseCase;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_name")) VarValue.AppendAttribute(recordElem, "eSpace_name", sseSpace_name, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_UID")) VarValue.AppendAttribute(recordElem, "eSpace_UID", sseSpace_UID, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_UID");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_system")) VarValue.AppendAttribute(recordElem, "eSpace_system", sseSpace_system, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_system");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_multitenant")) VarValue.AppendAttribute(recordElem, "eSpace_multitenant", sseSpace_multitenant, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_multitenant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_versionHistory")) VarValue.AppendAttribute(recordElem, "eSpace_versionHistory", sseSpace_versionHistory, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_versionHistory");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_valid")) VarValue.AppendAttribute(recordElem, "eSpace_valid", sseSpace_valid, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_valid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_UserEntity")) VarValue.AppendAttribute(recordElem, "eSpace_UserEntity", sseSpace_UserEntity, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_UserEntity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_ServiceStudioVersion")) VarValue.AppendAttribute(recordElem, "eSpace_ServiceStudioVersion", sseSpace_ServiceStudioVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_ServiceStudioVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_LastUpgradeVersion")) VarValue.AppendAttribute(recordElem, "eSpace_LastUpgradeVersion", sseSpace_LastUpgradeVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_LastUpgradeVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Description")) VarValue.AppendAttribute(recordElem, "eSpace_Description", sseSpace_Description, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Hash")) VarValue.AppendAttribute(recordElem, "eSpace_Hash", sseSpace_Hash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Hash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_LastModified")) VarValue.AppendAttribute(recordElem, "eSpace_LastModified", sseSpace_LastModified, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_LastModified");
				ssExternalEntities.ToXml(this, recordElem, "ExternalEntities", detailLevel - 1);
				ssExtensions.ToXml(this, recordElem, "Extensions", detailLevel - 1);
				ssESpaces.ToXml(this, recordElem, "ESpaces", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Is_User_Provider")) VarValue.AppendAttribute(recordElem, "eSpace_Is_User_Provider", sseSpace_Is_User_Provider, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Is_User_Provider");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_User_Provider_Name")) VarValue.AppendAttribute(recordElem, "eSpace_User_Provider_Name", sseSpace_User_Provider_Name, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_User_Provider_Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_User_Provider_Key")) VarValue.AppendAttribute(recordElem, "eSpace_User_Provider_Key", sseSpace_User_Provider_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_User_Provider_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_HTTPS")) VarValue.AppendAttribute(recordElem, "Has_HTTPS", ssHas_HTTPS, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_HTTPS");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_HTTPSWithClientCertificates")) VarValue.AppendAttribute(recordElem, "Has_HTTPSWithClientCertificates", ssHas_HTTPSWithClientCertificates, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_HTTPSWithClientCertificates");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_IntegratedAuthentication")) VarValue.AppendAttribute(recordElem, "Has_IntegratedAuthentication", ssHas_IntegratedAuthentication, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_IntegratedAuthentication");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_SMS")) VarValue.AppendAttribute(recordElem, "Has_SMS", ssHas_SMS, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_SMS");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ActivationCode")) VarValue.AppendAttribute(recordElem, "ActivationCode", ssActivationCode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ActivationCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProductId")) VarValue.AppendAttribute(recordElem, "ProductId", ssProductId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProductId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProductName")) VarValue.AppendAttribute(recordElem, "ProductName", ssProductName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProductName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_WebServices")) VarValue.AppendAttribute(recordElem, "Has_WebServices", ssHas_WebServices, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_WebServices");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Has_PublicElements")) VarValue.AppendAttribute(recordElem, "Has_PublicElements", ssHas_PublicElements, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Has_PublicElements");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Default_Theme_Is_Mobile")) VarValue.AppendAttribute(recordElem, "Default_Theme_Is_Mobile", ssDefault_Theme_Is_Mobile, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Default_Theme_Is_Mobile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Default_Theme_Global_Key")) VarValue.AppendAttribute(recordElem, "Default_Theme_Global_Key", ssDefault_Theme_Global_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Default_Theme_Global_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_DirectUpgradeFrom")) VarValue.AppendAttribute(recordElem, "eSpace_DirectUpgradeFrom", sseSpace_DirectUpgradeFrom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_DirectUpgradeFrom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_GeneralHash")) VarValue.AppendAttribute(recordElem, "eSpace_GeneralHash", sseSpace_GeneralHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_GeneralHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_jQueryVersion")) VarValue.AppendAttribute(recordElem, "eSpace_jQueryVersion", sseSpace_jQueryVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_jQueryVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Icon")) VarValue.AppendAttribute(recordElem, "eSpace_Icon", sseSpace_Icon, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Icon");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Kind")) VarValue.AppendAttribute(recordElem, "eSpace_Kind", sseSpace_Kind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Complexity")) VarValue.AppendAttribute(recordElem, "eSpace_Complexity", sseSpace_Complexity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Complexity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_Configurations")) VarValue.AppendAttribute(recordElem, "eSpace_Configurations", sseSpace_Configurations, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_Configurations");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_IsTemplateBundle")) VarValue.AppendAttribute(recordElem, "eSpace_IsTemplateBundle", sseSpace_IsTemplateBundle, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_IsTemplateBundle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".eSpace_UseCase")) VarValue.AppendAttribute(recordElem, "eSpace_UseCase", sseSpace_UseCase, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "eSpace_UseCase");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "espace_name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_name")) variable.Value = sseSpace_name; else variable.Optimized = true;
			} else if (head == "espace_uid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_UID")) variable.Value = sseSpace_UID; else variable.Optimized = true;
			} else if (head == "espace_system") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_system")) variable.Value = sseSpace_system; else variable.Optimized = true;
			} else if (head == "espace_multitenant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_multitenant")) variable.Value = sseSpace_multitenant; else variable.Optimized = true;
			} else if (head == "espace_versionhistory") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_versionHistory")) variable.Value = sseSpace_versionHistory; else variable.Optimized = true;
			} else if (head == "espace_valid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_valid")) variable.Value = sseSpace_valid; else variable.Optimized = true;
			} else if (head == "espace_userentity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_UserEntity")) variable.Value = sseSpace_UserEntity; else variable.Optimized = true;
			} else if (head == "espace_servicestudioversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_ServiceStudioVersion")) variable.Value = sseSpace_ServiceStudioVersion; else variable.Optimized = true;
			} else if (head == "espace_lastupgradeversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_LastUpgradeVersion")) variable.Value = sseSpace_LastUpgradeVersion; else variable.Optimized = true;
			} else if (head == "espace_description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Description")) variable.Value = sseSpace_Description; else variable.Optimized = true;
			} else if (head == "espace_hash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Hash")) variable.Value = sseSpace_Hash; else variable.Optimized = true;
			} else if (head == "espace_lastmodified") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_LastModified")) variable.Value = sseSpace_LastModified; else variable.Optimized = true;
			} else if (head == "externalentities") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExternalEntities")) variable.Value = ssExternalEntities; else variable.Optimized = true;
				variable.SetFieldName("externalentities");
			} else if (head == "extensions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Extensions")) variable.Value = ssExtensions; else variable.Optimized = true;
				variable.SetFieldName("extensions");
			} else if (head == "espaces") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ESpaces")) variable.Value = ssESpaces; else variable.Optimized = true;
				variable.SetFieldName("espaces");
			} else if (head == "espace_is_user_provider") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Is_User_Provider")) variable.Value = sseSpace_Is_User_Provider; else variable.Optimized = true;
			} else if (head == "espace_user_provider_name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_User_Provider_Name")) variable.Value = sseSpace_User_Provider_Name; else variable.Optimized = true;
			} else if (head == "espace_user_provider_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_User_Provider_Key")) variable.Value = sseSpace_User_Provider_Key; else variable.Optimized = true;
			} else if (head == "has_https") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_HTTPS")) variable.Value = ssHas_HTTPS; else variable.Optimized = true;
			} else if (head == "has_httpswithclientcertificates") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_HTTPSWithClientCertificates")) variable.Value = ssHas_HTTPSWithClientCertificates; else variable.Optimized = true;
			} else if (head == "has_integratedauthentication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_IntegratedAuthentication")) variable.Value = ssHas_IntegratedAuthentication; else variable.Optimized = true;
			} else if (head == "has_sms") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_SMS")) variable.Value = ssHas_SMS; else variable.Optimized = true;
			} else if (head == "activationcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ActivationCode")) variable.Value = ssActivationCode; else variable.Optimized = true;
			} else if (head == "productid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProductId")) variable.Value = ssProductId; else variable.Optimized = true;
			} else if (head == "productname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProductName")) variable.Value = ssProductName; else variable.Optimized = true;
			} else if (head == "has_webservices") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_WebServices")) variable.Value = ssHas_WebServices; else variable.Optimized = true;
			} else if (head == "has_publicelements") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Has_PublicElements")) variable.Value = ssHas_PublicElements; else variable.Optimized = true;
			} else if (head == "default_theme_is_mobile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Default_Theme_Is_Mobile")) variable.Value = ssDefault_Theme_Is_Mobile; else variable.Optimized = true;
			} else if (head == "default_theme_global_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Default_Theme_Global_Key")) variable.Value = ssDefault_Theme_Global_Key; else variable.Optimized = true;
			} else if (head == "espace_directupgradefrom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_DirectUpgradeFrom")) variable.Value = sseSpace_DirectUpgradeFrom; else variable.Optimized = true;
			} else if (head == "espace_generalhash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_GeneralHash")) variable.Value = sseSpace_GeneralHash; else variable.Optimized = true;
			} else if (head == "espace_jqueryversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_jQueryVersion")) variable.Value = sseSpace_jQueryVersion; else variable.Optimized = true;
			} else if (head == "espace_icon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Icon")) variable.Value = sseSpace_Icon; else variable.Optimized = true;
			} else if (head == "espace_kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Kind")) variable.Value = sseSpace_Kind; else variable.Optimized = true;
			} else if (head == "espace_complexity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Complexity")) variable.Value = sseSpace_Complexity; else variable.Optimized = true;
			} else if (head == "espace_configurations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_Configurations")) variable.Value = sseSpace_Configurations; else variable.Optimized = true;
			} else if (head == "espace_istemplatebundle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_IsTemplateBundle")) variable.Value = sseSpace_IsTemplateBundle; else variable.Optimized = true;
			} else if (head == "espace_usecase") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".eSpace_UseCase")) variable.Value = sseSpace_UseCase; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdeSpace_name) {
				return sseSpace_name;
			} else if (key == IdeSpace_UID) {
				return sseSpace_UID;
			} else if (key == IdeSpace_system) {
				return sseSpace_system;
			} else if (key == IdeSpace_multitenant) {
				return sseSpace_multitenant;
			} else if (key == IdeSpace_versionHistory) {
				return sseSpace_versionHistory;
			} else if (key == IdeSpace_valid) {
				return sseSpace_valid;
			} else if (key == IdeSpace_UserEntity) {
				return sseSpace_UserEntity;
			} else if (key == IdeSpace_ServiceStudioVersion) {
				return sseSpace_ServiceStudioVersion;
			} else if (key == IdeSpace_LastUpgradeVersion) {
				return sseSpace_LastUpgradeVersion;
			} else if (key == IdeSpace_Description) {
				return sseSpace_Description;
			} else if (key == IdeSpace_Hash) {
				return sseSpace_Hash;
			} else if (key == IdeSpace_LastModified) {
				return sseSpace_LastModified;
			} else if (key == IdExternalEntities) {
				return ssExternalEntities;
			} else if (key == IdExtensions) {
				return ssExtensions;
			} else if (key == IdESpaces) {
				return ssESpaces;
			} else if (key == IdeSpace_Is_User_Provider) {
				return sseSpace_Is_User_Provider;
			} else if (key == IdeSpace_User_Provider_Name) {
				return sseSpace_User_Provider_Name;
			} else if (key == IdeSpace_User_Provider_Key) {
				return sseSpace_User_Provider_Key;
			} else if (key == IdHas_HTTPS) {
				return ssHas_HTTPS;
			} else if (key == IdHas_HTTPSWithClientCertificates) {
				return ssHas_HTTPSWithClientCertificates;
			} else if (key == IdHas_IntegratedAuthentication) {
				return ssHas_IntegratedAuthentication;
			} else if (key == IdHas_SMS) {
				return ssHas_SMS;
			} else if (key == IdActivationCode) {
				return ssActivationCode;
			} else if (key == IdProductId) {
				return ssProductId;
			} else if (key == IdProductName) {
				return ssProductName;
			} else if (key == IdHas_WebServices) {
				return ssHas_WebServices;
			} else if (key == IdHas_PublicElements) {
				return ssHas_PublicElements;
			} else if (key == IdDefault_Theme_Is_Mobile) {
				return ssDefault_Theme_Is_Mobile;
			} else if (key == IdDefault_Theme_Global_Key) {
				return ssDefault_Theme_Global_Key;
			} else if (key == IdeSpace_DirectUpgradeFrom) {
				return sseSpace_DirectUpgradeFrom;
			} else if (key == IdeSpace_GeneralHash) {
				return sseSpace_GeneralHash;
			} else if (key == IdeSpace_jQueryVersion) {
				return sseSpace_jQueryVersion;
			} else if (key == IdeSpace_Icon) {
				return sseSpace_Icon;
			} else if (key == IdeSpace_Kind) {
				return sseSpace_Kind;
			} else if (key == IdeSpace_Complexity) {
				return sseSpace_Complexity;
			} else if (key == IdeSpace_Configurations) {
				return sseSpace_Configurations;
			} else if (key == IdeSpace_IsTemplateBundle) {
				return sseSpace_IsTemplateBundle;
			} else if (key == IdeSpace_UseCase) {
				return sseSpace_UseCase;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			sseSpace_name = (string) other.AttributeGet(IdeSpace_name);
			sseSpace_UID = (string) other.AttributeGet(IdeSpace_UID);
			sseSpace_system = (bool) other.AttributeGet(IdeSpace_system);
			sseSpace_multitenant = (bool) other.AttributeGet(IdeSpace_multitenant);
			sseSpace_versionHistory = (byte[]) other.AttributeGet(IdeSpace_versionHistory);
			sseSpace_valid = (bool) other.AttributeGet(IdeSpace_valid);
			sseSpace_UserEntity = (bool) other.AttributeGet(IdeSpace_UserEntity);
			sseSpace_ServiceStudioVersion = (string) other.AttributeGet(IdeSpace_ServiceStudioVersion);
			sseSpace_LastUpgradeVersion = (string) other.AttributeGet(IdeSpace_LastUpgradeVersion);
			sseSpace_Description = (string) other.AttributeGet(IdeSpace_Description);
			sseSpace_Hash = (string) other.AttributeGet(IdeSpace_Hash);
			sseSpace_LastModified = (DateTime) other.AttributeGet(IdeSpace_LastModified);
			ssExternalEntities = new RLEntityInfoRecordList();
			ssExternalEntities.FillFromOther((IOSList) other.AttributeGet(IdExternalEntities));
			ssExtensions = new RLExtensionInfoRecordList();
			ssExtensions.FillFromOther((IOSList) other.AttributeGet(IdExtensions));
			ssESpaces = new RLEspaceInfoRecordList();
			ssESpaces.FillFromOther((IOSList) other.AttributeGet(IdESpaces));
			sseSpace_Is_User_Provider = (bool) other.AttributeGet(IdeSpace_Is_User_Provider);
			sseSpace_User_Provider_Name = (string) other.AttributeGet(IdeSpace_User_Provider_Name);
			sseSpace_User_Provider_Key = (string) other.AttributeGet(IdeSpace_User_Provider_Key);
			ssHas_HTTPS = (bool) other.AttributeGet(IdHas_HTTPS);
			ssHas_HTTPSWithClientCertificates = (bool) other.AttributeGet(IdHas_HTTPSWithClientCertificates);
			ssHas_IntegratedAuthentication = (bool) other.AttributeGet(IdHas_IntegratedAuthentication);
			ssHas_SMS = (bool) other.AttributeGet(IdHas_SMS);
			ssActivationCode = (string) other.AttributeGet(IdActivationCode);
			ssProductId = (string) other.AttributeGet(IdProductId);
			ssProductName = (string) other.AttributeGet(IdProductName);
			ssHas_WebServices = (bool) other.AttributeGet(IdHas_WebServices);
			ssHas_PublicElements = (bool) other.AttributeGet(IdHas_PublicElements);
			ssDefault_Theme_Is_Mobile = (bool) other.AttributeGet(IdDefault_Theme_Is_Mobile);
			ssDefault_Theme_Global_Key = (string) other.AttributeGet(IdDefault_Theme_Global_Key);
			sseSpace_DirectUpgradeFrom = (string) other.AttributeGet(IdeSpace_DirectUpgradeFrom);
			sseSpace_GeneralHash = (string) other.AttributeGet(IdeSpace_GeneralHash);
			sseSpace_jQueryVersion = (string) other.AttributeGet(IdeSpace_jQueryVersion);
			sseSpace_Icon = (byte[]) other.AttributeGet(IdeSpace_Icon);
			sseSpace_Kind = (string) other.AttributeGet(IdeSpace_Kind);
			sseSpace_Complexity = (int) other.AttributeGet(IdeSpace_Complexity);
			sseSpace_Configurations = (string) other.AttributeGet(IdeSpace_Configurations);
			sseSpace_IsTemplateBundle = (bool) other.AttributeGet(IdeSpace_IsTemplateBundle);
			sseSpace_UseCase = (string) other.AttributeGet(IdeSpace_UseCase);
		}
		public bool IsDefault() {
			STESpaceDetailedInfoStructure defaultStruct = new STESpaceDetailedInfoStructure(null);
			if (this.sseSpace_name != defaultStruct.sseSpace_name) return false;
			if (this.sseSpace_UID != defaultStruct.sseSpace_UID) return false;
			if (this.sseSpace_system != defaultStruct.sseSpace_system) return false;
			if (this.sseSpace_multitenant != defaultStruct.sseSpace_multitenant) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.sseSpace_versionHistory, defaultStruct.sseSpace_versionHistory)) return false;
			if (this.sseSpace_valid != defaultStruct.sseSpace_valid) return false;
			if (this.sseSpace_UserEntity != defaultStruct.sseSpace_UserEntity) return false;
			if (this.sseSpace_ServiceStudioVersion != defaultStruct.sseSpace_ServiceStudioVersion) return false;
			if (this.sseSpace_LastUpgradeVersion != defaultStruct.sseSpace_LastUpgradeVersion) return false;
			if (this.sseSpace_Description != defaultStruct.sseSpace_Description) return false;
			if (this.sseSpace_Hash != defaultStruct.sseSpace_Hash) return false;
			if (this.sseSpace_LastModified != defaultStruct.sseSpace_LastModified) return false;
			if (this.ssExternalEntities != null && this.ssExternalEntities.Length != 0) return false;
			if (this.ssExtensions != null && this.ssExtensions.Length != 0) return false;
			if (this.ssESpaces != null && this.ssESpaces.Length != 0) return false;
			if (this.sseSpace_Is_User_Provider != defaultStruct.sseSpace_Is_User_Provider) return false;
			if (this.sseSpace_User_Provider_Name != defaultStruct.sseSpace_User_Provider_Name) return false;
			if (this.sseSpace_User_Provider_Key != defaultStruct.sseSpace_User_Provider_Key) return false;
			if (this.ssHas_HTTPS != defaultStruct.ssHas_HTTPS) return false;
			if (this.ssHas_HTTPSWithClientCertificates != defaultStruct.ssHas_HTTPSWithClientCertificates) return false;
			if (this.ssHas_IntegratedAuthentication != defaultStruct.ssHas_IntegratedAuthentication) return false;
			if (this.ssHas_SMS != defaultStruct.ssHas_SMS) return false;
			if (this.ssActivationCode != defaultStruct.ssActivationCode) return false;
			if (this.ssProductId != defaultStruct.ssProductId) return false;
			if (this.ssProductName != defaultStruct.ssProductName) return false;
			if (this.ssHas_WebServices != defaultStruct.ssHas_WebServices) return false;
			if (this.ssHas_PublicElements != defaultStruct.ssHas_PublicElements) return false;
			if (this.ssDefault_Theme_Is_Mobile != defaultStruct.ssDefault_Theme_Is_Mobile) return false;
			if (this.ssDefault_Theme_Global_Key != defaultStruct.ssDefault_Theme_Global_Key) return false;
			if (this.sseSpace_DirectUpgradeFrom != defaultStruct.sseSpace_DirectUpgradeFrom) return false;
			if (this.sseSpace_GeneralHash != defaultStruct.sseSpace_GeneralHash) return false;
			if (this.sseSpace_jQueryVersion != defaultStruct.sseSpace_jQueryVersion) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.sseSpace_Icon, defaultStruct.sseSpace_Icon)) return false;
			if (this.sseSpace_Kind != defaultStruct.sseSpace_Kind) return false;
			if (this.sseSpace_Complexity != defaultStruct.sseSpace_Complexity) return false;
			if (this.sseSpace_Configurations != defaultStruct.sseSpace_Configurations) return false;
			if (this.sseSpace_IsTemplateBundle != defaultStruct.sseSpace_IsTemplateBundle) return false;
			if (this.sseSpace_UseCase != defaultStruct.sseSpace_UseCase) return false;
			return true;
		}
	} // STESpaceDetailedInfoStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_PivotalStructure</code> that represents the Service Studio
	///  structure <code>DeploymentZone_Pivotal</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_PivotalStructure: ISerializable, ITypedRecord<STDeploymentZone_PivotalStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdResultPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*L1AcDKJrS0m9jy3QzA_nWw");
		internal static readonly GlobalObjectKey IdTargetPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hYy6phZ8uUGvn0NEujjvJA");
		internal static readonly GlobalObjectKey IdConfigPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*dP7NVTIuFEmSKHjSnfifVA");
		internal static readonly GlobalObjectKey IdOnPrepareDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Ynkq3+D0RUGr0ON6a7Sqwg");
		internal static readonly GlobalObjectKey IdOnDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*lCdztIo84ECtvtdslYheSA");
		internal static readonly GlobalObjectKey IdOnUndeploy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*keCbxIEYskKw_Q5xCVkkIA");
		internal static readonly GlobalObjectKey IdOnUpdateConfigurations = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UTxvygrBM0eJqliH+evXWQ");
		internal static readonly GlobalObjectKey IdManualDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*okNw_8aGbUyzZ0N3wzlSQg");
		internal static readonly GlobalObjectKey IdAutomaticDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*82zMLN3hRE2df_aTMcPnPg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ResultPath")]
		public string ssResultPath;

		[System.Xml.Serialization.XmlElement("TargetPath")]
		public string ssTargetPath;

		[System.Xml.Serialization.XmlElement("ConfigPath")]
		public string ssConfigPath;

		[System.Xml.Serialization.XmlElement("OnPrepareDeployDone")]
		public string ssOnPrepareDeployDone;

		[System.Xml.Serialization.XmlElement("OnDeployDone")]
		public string ssOnDeployDone;

		[System.Xml.Serialization.XmlElement("OnUndeploy")]
		public string ssOnUndeploy;

		[System.Xml.Serialization.XmlElement("OnUpdateConfigurations")]
		public string ssOnUpdateConfigurations;

		[System.Xml.Serialization.XmlElement("ManualDeployTimeoutInMinutes")]
		public int ssManualDeployTimeoutInMinutes;

		[System.Xml.Serialization.XmlElement("AutomaticDeployTimeoutInMinutes")]
		public int ssAutomaticDeployTimeoutInMinutes;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_PivotalStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssResultPath = r.ReadText(index++, "DeploymentZone_Pivotal.ResultPath", "");
			ssTargetPath = r.ReadText(index++, "DeploymentZone_Pivotal.TargetPath", "");
			ssConfigPath = r.ReadText(index++, "DeploymentZone_Pivotal.ConfigPath", "");
			ssOnPrepareDeployDone = r.ReadText(index++, "DeploymentZone_Pivotal.OnPrepareDeployDone", "");
			ssOnDeployDone = r.ReadText(index++, "DeploymentZone_Pivotal.OnDeployDone", "");
			ssOnUndeploy = r.ReadText(index++, "DeploymentZone_Pivotal.OnUndeploy", "");
			ssOnUpdateConfigurations = r.ReadText(index++, "DeploymentZone_Pivotal.OnUpdateConfigurations", "");
			ssManualDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_Pivotal.ManualDeployTimeoutInMinutes", 0);
			ssAutomaticDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_Pivotal.AutomaticDeployTimeoutInMinutes", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_PivotalStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_PivotalStructure a, STDeploymentZone_PivotalStructure b) {
			if (a.ssResultPath != b.ssResultPath) return false;
			if (a.ssTargetPath != b.ssTargetPath) return false;
			if (a.ssConfigPath != b.ssConfigPath) return false;
			if (a.ssOnPrepareDeployDone != b.ssOnPrepareDeployDone) return false;
			if (a.ssOnDeployDone != b.ssOnDeployDone) return false;
			if (a.ssOnUndeploy != b.ssOnUndeploy) return false;
			if (a.ssOnUpdateConfigurations != b.ssOnUpdateConfigurations) return false;
			if (a.ssManualDeployTimeoutInMinutes != b.ssManualDeployTimeoutInMinutes) return false;
			if (a.ssAutomaticDeployTimeoutInMinutes != b.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_PivotalStructure a, STDeploymentZone_PivotalStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_PivotalStructure)) return false;
			return (this == (STDeploymentZone_PivotalStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssResultPath.GetHashCode()
				^ ssTargetPath.GetHashCode()
				^ ssConfigPath.GetHashCode()
				^ ssOnPrepareDeployDone.GetHashCode()
				^ ssOnDeployDone.GetHashCode()
				^ ssOnUndeploy.GetHashCode()
				^ ssOnUpdateConfigurations.GetHashCode()
				^ ssManualDeployTimeoutInMinutes.GetHashCode()
				^ ssAutomaticDeployTimeoutInMinutes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_PivotalStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssResultPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResultPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResultPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTargetPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTargetPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTargetPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnPrepareDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnPrepareDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnPrepareDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUndeploy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUndeploy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUndeploy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUpdateConfigurations", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUpdateConfigurations' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUpdateConfigurations = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManualDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManualDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManualDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAutomaticDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAutomaticDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAutomaticDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentZone_PivotalStructure Duplicate() {
			STDeploymentZone_PivotalStructure t;
			t.ssResultPath = this.ssResultPath;
			t.ssTargetPath = this.ssTargetPath;
			t.ssConfigPath = this.ssConfigPath;
			t.ssOnPrepareDeployDone = this.ssOnPrepareDeployDone;
			t.ssOnDeployDone = this.ssOnDeployDone;
			t.ssOnUndeploy = this.ssOnUndeploy;
			t.ssOnUpdateConfigurations = this.ssOnUpdateConfigurations;
			t.ssManualDeployTimeoutInMinutes = this.ssManualDeployTimeoutInMinutes;
			t.ssAutomaticDeployTimeoutInMinutes = this.ssAutomaticDeployTimeoutInMinutes;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResultPath")) VarValue.AppendAttribute(recordElem, "ResultPath", ssResultPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResultPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetPath")) VarValue.AppendAttribute(recordElem, "TargetPath", ssTargetPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ConfigPath")) VarValue.AppendAttribute(recordElem, "ConfigPath", ssConfigPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ConfigPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnPrepareDeployDone")) VarValue.AppendAttribute(recordElem, "OnPrepareDeployDone", ssOnPrepareDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnPrepareDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnDeployDone")) VarValue.AppendAttribute(recordElem, "OnDeployDone", ssOnDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUndeploy")) VarValue.AppendAttribute(recordElem, "OnUndeploy", ssOnUndeploy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUndeploy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUpdateConfigurations")) VarValue.AppendAttribute(recordElem, "OnUpdateConfigurations", ssOnUpdateConfigurations, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUpdateConfigurations");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ManualDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "ManualDeployTimeoutInMinutes", ssManualDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ManualDeployTimeoutInMinutes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutomaticDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "AutomaticDeployTimeoutInMinutes", ssAutomaticDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AutomaticDeployTimeoutInMinutes");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "resultpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResultPath")) variable.Value = ssResultPath; else variable.Optimized = true;
			} else if (head == "targetpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetPath")) variable.Value = ssTargetPath; else variable.Optimized = true;
			} else if (head == "configpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfigPath")) variable.Value = ssConfigPath; else variable.Optimized = true;
			} else if (head == "onpreparedeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnPrepareDeployDone")) variable.Value = ssOnPrepareDeployDone; else variable.Optimized = true;
			} else if (head == "ondeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnDeployDone")) variable.Value = ssOnDeployDone; else variable.Optimized = true;
			} else if (head == "onundeploy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUndeploy")) variable.Value = ssOnUndeploy; else variable.Optimized = true;
			} else if (head == "onupdateconfigurations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUpdateConfigurations")) variable.Value = ssOnUpdateConfigurations; else variable.Optimized = true;
			} else if (head == "manualdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ManualDeployTimeoutInMinutes")) variable.Value = ssManualDeployTimeoutInMinutes; else variable.Optimized = true;
			} else if (head == "automaticdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutomaticDeployTimeoutInMinutes")) variable.Value = ssAutomaticDeployTimeoutInMinutes; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdResultPath) {
				return ssResultPath;
			} else if (key == IdTargetPath) {
				return ssTargetPath;
			} else if (key == IdConfigPath) {
				return ssConfigPath;
			} else if (key == IdOnPrepareDeployDone) {
				return ssOnPrepareDeployDone;
			} else if (key == IdOnDeployDone) {
				return ssOnDeployDone;
			} else if (key == IdOnUndeploy) {
				return ssOnUndeploy;
			} else if (key == IdOnUpdateConfigurations) {
				return ssOnUpdateConfigurations;
			} else if (key == IdManualDeployTimeoutInMinutes) {
				return ssManualDeployTimeoutInMinutes;
			} else if (key == IdAutomaticDeployTimeoutInMinutes) {
				return ssAutomaticDeployTimeoutInMinutes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssResultPath = (string) other.AttributeGet(IdResultPath);
			ssTargetPath = (string) other.AttributeGet(IdTargetPath);
			ssConfigPath = (string) other.AttributeGet(IdConfigPath);
			ssOnPrepareDeployDone = (string) other.AttributeGet(IdOnPrepareDeployDone);
			ssOnDeployDone = (string) other.AttributeGet(IdOnDeployDone);
			ssOnUndeploy = (string) other.AttributeGet(IdOnUndeploy);
			ssOnUpdateConfigurations = (string) other.AttributeGet(IdOnUpdateConfigurations);
			ssManualDeployTimeoutInMinutes = (int) other.AttributeGet(IdManualDeployTimeoutInMinutes);
			ssAutomaticDeployTimeoutInMinutes = (int) other.AttributeGet(IdAutomaticDeployTimeoutInMinutes);
		}
		public bool IsDefault() {
			STDeploymentZone_PivotalStructure defaultStruct = new STDeploymentZone_PivotalStructure(null);
			if (this.ssResultPath != defaultStruct.ssResultPath) return false;
			if (this.ssTargetPath != defaultStruct.ssTargetPath) return false;
			if (this.ssConfigPath != defaultStruct.ssConfigPath) return false;
			if (this.ssOnPrepareDeployDone != defaultStruct.ssOnPrepareDeployDone) return false;
			if (this.ssOnDeployDone != defaultStruct.ssOnDeployDone) return false;
			if (this.ssOnUndeploy != defaultStruct.ssOnUndeploy) return false;
			if (this.ssOnUpdateConfigurations != defaultStruct.ssOnUpdateConfigurations) return false;
			if (this.ssManualDeployTimeoutInMinutes != defaultStruct.ssManualDeployTimeoutInMinutes) return false;
			if (this.ssAutomaticDeployTimeoutInMinutes != defaultStruct.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}
	} // STDeploymentZone_PivotalStructure

	/// <summary>
	/// Structure <code>STCacheInvalidationServiceStatusStructure</code> that represents the Service Studio
	///  structure <code>CacheInvalidationServiceStatus</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCacheInvalidationServiceStatusStructure: ISerializable, ITypedRecord<STCacheInvalidationServiceStatusStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdIsOk = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*deQwJ3uykEO8MOX1MGOCrA");
		internal static readonly GlobalObjectKey IdMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*M1sZrYXe_UyUX_eVox8LqQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("IsOk")]
		public bool ssIsOk;

		[System.Xml.Serialization.XmlElement("Message")]
		public string ssMessage;


		public BitArray OptimizedAttributes;

		public STCacheInvalidationServiceStatusStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssIsOk = false;
			ssMessage = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssIsOk = r.ReadBoolean(index++, "CacheInvalidationServiceStatus.IsOk", false);
			ssMessage = r.ReadText(index++, "CacheInvalidationServiceStatus.Message", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCacheInvalidationServiceStatusStructure r) {
			this = r;
		}


		public static bool operator == (STCacheInvalidationServiceStatusStructure a, STCacheInvalidationServiceStatusStructure b) {
			if (a.ssIsOk != b.ssIsOk) return false;
			if (a.ssMessage != b.ssMessage) return false;
			return true;
		}

		public static bool operator != (STCacheInvalidationServiceStatusStructure a, STCacheInvalidationServiceStatusStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCacheInvalidationServiceStatusStructure)) return false;
			return (this == (STCacheInvalidationServiceStatusStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssIsOk.GetHashCode()
				^ ssMessage.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCacheInvalidationServiceStatusStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssIsOk = false;
			ssMessage = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssIsOk", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsOk' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsOk = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCacheInvalidationServiceStatusStructure Duplicate() {
			STCacheInvalidationServiceStatusStructure t;
			t.ssIsOk = this.ssIsOk;
			t.ssMessage = this.ssMessage;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsOk")) VarValue.AppendAttribute(recordElem, "IsOk", ssIsOk, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsOk");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message")) VarValue.AppendAttribute(recordElem, "Message", ssMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "isok") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsOk")) variable.Value = ssIsOk; else variable.Optimized = true;
			} else if (head == "message") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message")) variable.Value = ssMessage; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdIsOk) {
				return ssIsOk;
			} else if (key == IdMessage) {
				return ssMessage;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssIsOk = (bool) other.AttributeGet(IdIsOk);
			ssMessage = (string) other.AttributeGet(IdMessage);
		}
		public bool IsDefault() {
			STCacheInvalidationServiceStatusStructure defaultStruct = new STCacheInvalidationServiceStatusStructure(null);
			if (this.ssIsOk != defaultStruct.ssIsOk) return false;
			if (this.ssMessage != defaultStruct.ssMessage) return false;
			return true;
		}
	} // STCacheInvalidationServiceStatusStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_AzureContainerServiceStructure</code> that represents the Service
	///  Studio structure <code>DeploymentZone_AzureContainerService</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_AzureContainerServiceStructure: ISerializable, ITypedRecord<STDeploymentZone_AzureContainerServiceStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdResultPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hIobHLNivkunBzQdEBld3A");
		internal static readonly GlobalObjectKey IdTargetPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_bY9vm5LC0WFNSr5n5A9Cw");
		internal static readonly GlobalObjectKey IdFromImageReference = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZNlYN97+a0aIDpzpb34lew");
		internal static readonly GlobalObjectKey IdConfigPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*7PXlrHtry02UDL3vLICsYQ");
		internal static readonly GlobalObjectKey IdOnPrepareDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_iGfu32Ddk+2cIgpOmNJYw");
		internal static readonly GlobalObjectKey IdOnDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*XQerfLhAjkiDr9_5aNCofg");
		internal static readonly GlobalObjectKey IdOnUndeploy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*MQnImyEwM0ClTt6YNhxMzg");
		internal static readonly GlobalObjectKey IdOnUpdateConfigurations = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NKD1Yl79AkKodLs8DPgaeA");
		internal static readonly GlobalObjectKey IdManualDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oZ7VxytDykGjnMgWhpgrJw");
		internal static readonly GlobalObjectKey IdAutomaticDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*OwpxNzVXZEWlY+ukEkNAqQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ResultPath")]
		public string ssResultPath;

		[System.Xml.Serialization.XmlElement("TargetPath")]
		public string ssTargetPath;

		[System.Xml.Serialization.XmlElement("FromImageReference")]
		public string ssFromImageReference;

		[System.Xml.Serialization.XmlElement("ConfigPath")]
		public string ssConfigPath;

		[System.Xml.Serialization.XmlElement("OnPrepareDeployDone")]
		public string ssOnPrepareDeployDone;

		[System.Xml.Serialization.XmlElement("OnDeployDone")]
		public string ssOnDeployDone;

		[System.Xml.Serialization.XmlElement("OnUndeploy")]
		public string ssOnUndeploy;

		[System.Xml.Serialization.XmlElement("OnUpdateConfigurations")]
		public string ssOnUpdateConfigurations;

		[System.Xml.Serialization.XmlElement("ManualDeployTimeoutInMinutes")]
		public int ssManualDeployTimeoutInMinutes;

		[System.Xml.Serialization.XmlElement("AutomaticDeployTimeoutInMinutes")]
		public int ssAutomaticDeployTimeoutInMinutes;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_AzureContainerServiceStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssResultPath = r.ReadText(index++, "DeploymentZone_AzureContainerService.ResultPath", "");
			ssTargetPath = r.ReadText(index++, "DeploymentZone_AzureContainerService.TargetPath", "");
			ssFromImageReference = r.ReadText(index++, "DeploymentZone_AzureContainerService.FromImageReference", "");
			ssConfigPath = r.ReadText(index++, "DeploymentZone_AzureContainerService.ConfigPath", "");
			ssOnPrepareDeployDone = r.ReadText(index++, "DeploymentZone_AzureContainerService.OnPrepareDeployDone", "");
			ssOnDeployDone = r.ReadText(index++, "DeploymentZone_AzureContainerService.OnDeployDone", "");
			ssOnUndeploy = r.ReadText(index++, "DeploymentZone_AzureContainerService.OnUndeploy", "");
			ssOnUpdateConfigurations = r.ReadText(index++, "DeploymentZone_AzureContainerService.OnUpdateConfigurations", "");
			ssManualDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_AzureContainerService.ManualDeployTimeoutInMinutes", 0);
			ssAutomaticDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_AzureContainerService.AutomaticDeployTimeoutInMinutes", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_AzureContainerServiceStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_AzureContainerServiceStructure a, STDeploymentZone_AzureContainerServiceStructure b) {
			if (a.ssResultPath != b.ssResultPath) return false;
			if (a.ssTargetPath != b.ssTargetPath) return false;
			if (a.ssFromImageReference != b.ssFromImageReference) return false;
			if (a.ssConfigPath != b.ssConfigPath) return false;
			if (a.ssOnPrepareDeployDone != b.ssOnPrepareDeployDone) return false;
			if (a.ssOnDeployDone != b.ssOnDeployDone) return false;
			if (a.ssOnUndeploy != b.ssOnUndeploy) return false;
			if (a.ssOnUpdateConfigurations != b.ssOnUpdateConfigurations) return false;
			if (a.ssManualDeployTimeoutInMinutes != b.ssManualDeployTimeoutInMinutes) return false;
			if (a.ssAutomaticDeployTimeoutInMinutes != b.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_AzureContainerServiceStructure a, STDeploymentZone_AzureContainerServiceStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_AzureContainerServiceStructure)) return false;
			return (this == (STDeploymentZone_AzureContainerServiceStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssResultPath.GetHashCode()
				^ ssTargetPath.GetHashCode()
				^ ssFromImageReference.GetHashCode()
				^ ssConfigPath.GetHashCode()
				^ ssOnPrepareDeployDone.GetHashCode()
				^ ssOnDeployDone.GetHashCode()
				^ ssOnUndeploy.GetHashCode()
				^ ssOnUpdateConfigurations.GetHashCode()
				^ ssManualDeployTimeoutInMinutes.GetHashCode()
				^ ssAutomaticDeployTimeoutInMinutes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_AzureContainerServiceStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssResultPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResultPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResultPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTargetPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTargetPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTargetPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFromImageReference", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFromImageReference' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFromImageReference = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnPrepareDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnPrepareDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnPrepareDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUndeploy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUndeploy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUndeploy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUpdateConfigurations", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUpdateConfigurations' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUpdateConfigurations = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManualDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManualDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManualDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAutomaticDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAutomaticDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAutomaticDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentZone_AzureContainerServiceStructure Duplicate() {
			STDeploymentZone_AzureContainerServiceStructure t;
			t.ssResultPath = this.ssResultPath;
			t.ssTargetPath = this.ssTargetPath;
			t.ssFromImageReference = this.ssFromImageReference;
			t.ssConfigPath = this.ssConfigPath;
			t.ssOnPrepareDeployDone = this.ssOnPrepareDeployDone;
			t.ssOnDeployDone = this.ssOnDeployDone;
			t.ssOnUndeploy = this.ssOnUndeploy;
			t.ssOnUpdateConfigurations = this.ssOnUpdateConfigurations;
			t.ssManualDeployTimeoutInMinutes = this.ssManualDeployTimeoutInMinutes;
			t.ssAutomaticDeployTimeoutInMinutes = this.ssAutomaticDeployTimeoutInMinutes;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResultPath")) VarValue.AppendAttribute(recordElem, "ResultPath", ssResultPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResultPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetPath")) VarValue.AppendAttribute(recordElem, "TargetPath", ssTargetPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FromImageReference")) VarValue.AppendAttribute(recordElem, "FromImageReference", ssFromImageReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FromImageReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ConfigPath")) VarValue.AppendAttribute(recordElem, "ConfigPath", ssConfigPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ConfigPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnPrepareDeployDone")) VarValue.AppendAttribute(recordElem, "OnPrepareDeployDone", ssOnPrepareDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnPrepareDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnDeployDone")) VarValue.AppendAttribute(recordElem, "OnDeployDone", ssOnDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUndeploy")) VarValue.AppendAttribute(recordElem, "OnUndeploy", ssOnUndeploy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUndeploy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUpdateConfigurations")) VarValue.AppendAttribute(recordElem, "OnUpdateConfigurations", ssOnUpdateConfigurations, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUpdateConfigurations");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ManualDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "ManualDeployTimeoutInMinutes", ssManualDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ManualDeployTimeoutInMinutes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutomaticDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "AutomaticDeployTimeoutInMinutes", ssAutomaticDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AutomaticDeployTimeoutInMinutes");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "resultpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResultPath")) variable.Value = ssResultPath; else variable.Optimized = true;
			} else if (head == "targetpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetPath")) variable.Value = ssTargetPath; else variable.Optimized = true;
			} else if (head == "fromimagereference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FromImageReference")) variable.Value = ssFromImageReference; else variable.Optimized = true;
			} else if (head == "configpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfigPath")) variable.Value = ssConfigPath; else variable.Optimized = true;
			} else if (head == "onpreparedeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnPrepareDeployDone")) variable.Value = ssOnPrepareDeployDone; else variable.Optimized = true;
			} else if (head == "ondeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnDeployDone")) variable.Value = ssOnDeployDone; else variable.Optimized = true;
			} else if (head == "onundeploy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUndeploy")) variable.Value = ssOnUndeploy; else variable.Optimized = true;
			} else if (head == "onupdateconfigurations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUpdateConfigurations")) variable.Value = ssOnUpdateConfigurations; else variable.Optimized = true;
			} else if (head == "manualdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ManualDeployTimeoutInMinutes")) variable.Value = ssManualDeployTimeoutInMinutes; else variable.Optimized = true;
			} else if (head == "automaticdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutomaticDeployTimeoutInMinutes")) variable.Value = ssAutomaticDeployTimeoutInMinutes; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdResultPath) {
				return ssResultPath;
			} else if (key == IdTargetPath) {
				return ssTargetPath;
			} else if (key == IdFromImageReference) {
				return ssFromImageReference;
			} else if (key == IdConfigPath) {
				return ssConfigPath;
			} else if (key == IdOnPrepareDeployDone) {
				return ssOnPrepareDeployDone;
			} else if (key == IdOnDeployDone) {
				return ssOnDeployDone;
			} else if (key == IdOnUndeploy) {
				return ssOnUndeploy;
			} else if (key == IdOnUpdateConfigurations) {
				return ssOnUpdateConfigurations;
			} else if (key == IdManualDeployTimeoutInMinutes) {
				return ssManualDeployTimeoutInMinutes;
			} else if (key == IdAutomaticDeployTimeoutInMinutes) {
				return ssAutomaticDeployTimeoutInMinutes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssResultPath = (string) other.AttributeGet(IdResultPath);
			ssTargetPath = (string) other.AttributeGet(IdTargetPath);
			ssFromImageReference = (string) other.AttributeGet(IdFromImageReference);
			ssConfigPath = (string) other.AttributeGet(IdConfigPath);
			ssOnPrepareDeployDone = (string) other.AttributeGet(IdOnPrepareDeployDone);
			ssOnDeployDone = (string) other.AttributeGet(IdOnDeployDone);
			ssOnUndeploy = (string) other.AttributeGet(IdOnUndeploy);
			ssOnUpdateConfigurations = (string) other.AttributeGet(IdOnUpdateConfigurations);
			ssManualDeployTimeoutInMinutes = (int) other.AttributeGet(IdManualDeployTimeoutInMinutes);
			ssAutomaticDeployTimeoutInMinutes = (int) other.AttributeGet(IdAutomaticDeployTimeoutInMinutes);
		}
		public bool IsDefault() {
			STDeploymentZone_AzureContainerServiceStructure defaultStruct = new STDeploymentZone_AzureContainerServiceStructure(null);
			if (this.ssResultPath != defaultStruct.ssResultPath) return false;
			if (this.ssTargetPath != defaultStruct.ssTargetPath) return false;
			if (this.ssFromImageReference != defaultStruct.ssFromImageReference) return false;
			if (this.ssConfigPath != defaultStruct.ssConfigPath) return false;
			if (this.ssOnPrepareDeployDone != defaultStruct.ssOnPrepareDeployDone) return false;
			if (this.ssOnDeployDone != defaultStruct.ssOnDeployDone) return false;
			if (this.ssOnUndeploy != defaultStruct.ssOnUndeploy) return false;
			if (this.ssOnUpdateConfigurations != defaultStruct.ssOnUpdateConfigurations) return false;
			if (this.ssManualDeployTimeoutInMinutes != defaultStruct.ssManualDeployTimeoutInMinutes) return false;
			if (this.ssAutomaticDeployTimeoutInMinutes != defaultStruct.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}
	} // STDeploymentZone_AzureContainerServiceStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_AmazonECSStructure</code> that represents the Service Studio
	///  structure <code>DeploymentZone_AmazonECS</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_AmazonECSStructure: ISerializable, ITypedRecord<STDeploymentZone_AmazonECSStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdResultPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*a0YGci3FMkiVczfsOO5Omg");
		internal static readonly GlobalObjectKey IdTargetPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5b4qrIUhs0KecCLMAtVZvQ");
		internal static readonly GlobalObjectKey IdFromImageReference = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*FTIF_zr2l0SR1hGYhhqwyA");
		internal static readonly GlobalObjectKey IdConfigPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AM9mN47wvk6pUgr1m05j8g");
		internal static readonly GlobalObjectKey IdOnPrepareDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*j7QebCmvu0O3Dr63xtVBGg");
		internal static readonly GlobalObjectKey IdOnDeployDone = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*idmqsdhonEmWMIpvqbrcSQ");
		internal static readonly GlobalObjectKey IdOnUndeploy = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*O9wa0kBnXECuW6cVy+dgnA");
		internal static readonly GlobalObjectKey IdOnUpdateConfigurations = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uQZN9Z409Um9FEexuZ76vQ");
		internal static readonly GlobalObjectKey IdManualDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ncxe6l1fSU2nerAAGkcjnA");
		internal static readonly GlobalObjectKey IdAutomaticDeployTimeoutInMinutes = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rD8G+916Wk+CcqDgePCWdw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ResultPath")]
		public string ssResultPath;

		[System.Xml.Serialization.XmlElement("TargetPath")]
		public string ssTargetPath;

		[System.Xml.Serialization.XmlElement("FromImageReference")]
		public string ssFromImageReference;

		[System.Xml.Serialization.XmlElement("ConfigPath")]
		public string ssConfigPath;

		[System.Xml.Serialization.XmlElement("OnPrepareDeployDone")]
		public string ssOnPrepareDeployDone;

		[System.Xml.Serialization.XmlElement("OnDeployDone")]
		public string ssOnDeployDone;

		[System.Xml.Serialization.XmlElement("OnUndeploy")]
		public string ssOnUndeploy;

		[System.Xml.Serialization.XmlElement("OnUpdateConfigurations")]
		public string ssOnUpdateConfigurations;

		[System.Xml.Serialization.XmlElement("ManualDeployTimeoutInMinutes")]
		public int ssManualDeployTimeoutInMinutes;

		[System.Xml.Serialization.XmlElement("AutomaticDeployTimeoutInMinutes")]
		public int ssAutomaticDeployTimeoutInMinutes;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_AmazonECSStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssResultPath = r.ReadText(index++, "DeploymentZone_AmazonECS.ResultPath", "");
			ssTargetPath = r.ReadText(index++, "DeploymentZone_AmazonECS.TargetPath", "");
			ssFromImageReference = r.ReadText(index++, "DeploymentZone_AmazonECS.FromImageReference", "");
			ssConfigPath = r.ReadText(index++, "DeploymentZone_AmazonECS.ConfigPath", "");
			ssOnPrepareDeployDone = r.ReadText(index++, "DeploymentZone_AmazonECS.OnPrepareDeployDone", "");
			ssOnDeployDone = r.ReadText(index++, "DeploymentZone_AmazonECS.OnDeployDone", "");
			ssOnUndeploy = r.ReadText(index++, "DeploymentZone_AmazonECS.OnUndeploy", "");
			ssOnUpdateConfigurations = r.ReadText(index++, "DeploymentZone_AmazonECS.OnUpdateConfigurations", "");
			ssManualDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_AmazonECS.ManualDeployTimeoutInMinutes", 0);
			ssAutomaticDeployTimeoutInMinutes = r.ReadInteger(index++, "DeploymentZone_AmazonECS.AutomaticDeployTimeoutInMinutes", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_AmazonECSStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_AmazonECSStructure a, STDeploymentZone_AmazonECSStructure b) {
			if (a.ssResultPath != b.ssResultPath) return false;
			if (a.ssTargetPath != b.ssTargetPath) return false;
			if (a.ssFromImageReference != b.ssFromImageReference) return false;
			if (a.ssConfigPath != b.ssConfigPath) return false;
			if (a.ssOnPrepareDeployDone != b.ssOnPrepareDeployDone) return false;
			if (a.ssOnDeployDone != b.ssOnDeployDone) return false;
			if (a.ssOnUndeploy != b.ssOnUndeploy) return false;
			if (a.ssOnUpdateConfigurations != b.ssOnUpdateConfigurations) return false;
			if (a.ssManualDeployTimeoutInMinutes != b.ssManualDeployTimeoutInMinutes) return false;
			if (a.ssAutomaticDeployTimeoutInMinutes != b.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_AmazonECSStructure a, STDeploymentZone_AmazonECSStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_AmazonECSStructure)) return false;
			return (this == (STDeploymentZone_AmazonECSStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssResultPath.GetHashCode()
				^ ssTargetPath.GetHashCode()
				^ ssFromImageReference.GetHashCode()
				^ ssConfigPath.GetHashCode()
				^ ssOnPrepareDeployDone.GetHashCode()
				^ ssOnDeployDone.GetHashCode()
				^ ssOnUndeploy.GetHashCode()
				^ ssOnUpdateConfigurations.GetHashCode()
				^ ssManualDeployTimeoutInMinutes.GetHashCode()
				^ ssAutomaticDeployTimeoutInMinutes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_AmazonECSStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssResultPath = "";
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssOnPrepareDeployDone = "";
			ssOnDeployDone = "";
			ssOnUndeploy = "";
			ssOnUpdateConfigurations = "";
			ssManualDeployTimeoutInMinutes = 0;
			ssAutomaticDeployTimeoutInMinutes = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssResultPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResultPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResultPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTargetPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTargetPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTargetPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFromImageReference", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFromImageReference' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFromImageReference = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnPrepareDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnPrepareDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnPrepareDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnDeployDone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnDeployDone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnDeployDone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUndeploy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUndeploy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUndeploy = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOnUpdateConfigurations", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOnUpdateConfigurations' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOnUpdateConfigurations = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManualDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManualDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManualDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAutomaticDeployTimeoutInMinutes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAutomaticDeployTimeoutInMinutes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAutomaticDeployTimeoutInMinutes = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentZone_AmazonECSStructure Duplicate() {
			STDeploymentZone_AmazonECSStructure t;
			t.ssResultPath = this.ssResultPath;
			t.ssTargetPath = this.ssTargetPath;
			t.ssFromImageReference = this.ssFromImageReference;
			t.ssConfigPath = this.ssConfigPath;
			t.ssOnPrepareDeployDone = this.ssOnPrepareDeployDone;
			t.ssOnDeployDone = this.ssOnDeployDone;
			t.ssOnUndeploy = this.ssOnUndeploy;
			t.ssOnUpdateConfigurations = this.ssOnUpdateConfigurations;
			t.ssManualDeployTimeoutInMinutes = this.ssManualDeployTimeoutInMinutes;
			t.ssAutomaticDeployTimeoutInMinutes = this.ssAutomaticDeployTimeoutInMinutes;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ResultPath")) VarValue.AppendAttribute(recordElem, "ResultPath", ssResultPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ResultPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetPath")) VarValue.AppendAttribute(recordElem, "TargetPath", ssTargetPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FromImageReference")) VarValue.AppendAttribute(recordElem, "FromImageReference", ssFromImageReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FromImageReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ConfigPath")) VarValue.AppendAttribute(recordElem, "ConfigPath", ssConfigPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ConfigPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnPrepareDeployDone")) VarValue.AppendAttribute(recordElem, "OnPrepareDeployDone", ssOnPrepareDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnPrepareDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnDeployDone")) VarValue.AppendAttribute(recordElem, "OnDeployDone", ssOnDeployDone, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnDeployDone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUndeploy")) VarValue.AppendAttribute(recordElem, "OnUndeploy", ssOnUndeploy, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUndeploy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OnUpdateConfigurations")) VarValue.AppendAttribute(recordElem, "OnUpdateConfigurations", ssOnUpdateConfigurations, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OnUpdateConfigurations");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ManualDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "ManualDeployTimeoutInMinutes", ssManualDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ManualDeployTimeoutInMinutes");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AutomaticDeployTimeoutInMinutes")) VarValue.AppendAttribute(recordElem, "AutomaticDeployTimeoutInMinutes", ssAutomaticDeployTimeoutInMinutes, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "AutomaticDeployTimeoutInMinutes");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "resultpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ResultPath")) variable.Value = ssResultPath; else variable.Optimized = true;
			} else if (head == "targetpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetPath")) variable.Value = ssTargetPath; else variable.Optimized = true;
			} else if (head == "fromimagereference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FromImageReference")) variable.Value = ssFromImageReference; else variable.Optimized = true;
			} else if (head == "configpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfigPath")) variable.Value = ssConfigPath; else variable.Optimized = true;
			} else if (head == "onpreparedeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnPrepareDeployDone")) variable.Value = ssOnPrepareDeployDone; else variable.Optimized = true;
			} else if (head == "ondeploydone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnDeployDone")) variable.Value = ssOnDeployDone; else variable.Optimized = true;
			} else if (head == "onundeploy") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUndeploy")) variable.Value = ssOnUndeploy; else variable.Optimized = true;
			} else if (head == "onupdateconfigurations") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OnUpdateConfigurations")) variable.Value = ssOnUpdateConfigurations; else variable.Optimized = true;
			} else if (head == "manualdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ManualDeployTimeoutInMinutes")) variable.Value = ssManualDeployTimeoutInMinutes; else variable.Optimized = true;
			} else if (head == "automaticdeploytimeoutinminutes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AutomaticDeployTimeoutInMinutes")) variable.Value = ssAutomaticDeployTimeoutInMinutes; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdResultPath) {
				return ssResultPath;
			} else if (key == IdTargetPath) {
				return ssTargetPath;
			} else if (key == IdFromImageReference) {
				return ssFromImageReference;
			} else if (key == IdConfigPath) {
				return ssConfigPath;
			} else if (key == IdOnPrepareDeployDone) {
				return ssOnPrepareDeployDone;
			} else if (key == IdOnDeployDone) {
				return ssOnDeployDone;
			} else if (key == IdOnUndeploy) {
				return ssOnUndeploy;
			} else if (key == IdOnUpdateConfigurations) {
				return ssOnUpdateConfigurations;
			} else if (key == IdManualDeployTimeoutInMinutes) {
				return ssManualDeployTimeoutInMinutes;
			} else if (key == IdAutomaticDeployTimeoutInMinutes) {
				return ssAutomaticDeployTimeoutInMinutes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssResultPath = (string) other.AttributeGet(IdResultPath);
			ssTargetPath = (string) other.AttributeGet(IdTargetPath);
			ssFromImageReference = (string) other.AttributeGet(IdFromImageReference);
			ssConfigPath = (string) other.AttributeGet(IdConfigPath);
			ssOnPrepareDeployDone = (string) other.AttributeGet(IdOnPrepareDeployDone);
			ssOnDeployDone = (string) other.AttributeGet(IdOnDeployDone);
			ssOnUndeploy = (string) other.AttributeGet(IdOnUndeploy);
			ssOnUpdateConfigurations = (string) other.AttributeGet(IdOnUpdateConfigurations);
			ssManualDeployTimeoutInMinutes = (int) other.AttributeGet(IdManualDeployTimeoutInMinutes);
			ssAutomaticDeployTimeoutInMinutes = (int) other.AttributeGet(IdAutomaticDeployTimeoutInMinutes);
		}
		public bool IsDefault() {
			STDeploymentZone_AmazonECSStructure defaultStruct = new STDeploymentZone_AmazonECSStructure(null);
			if (this.ssResultPath != defaultStruct.ssResultPath) return false;
			if (this.ssTargetPath != defaultStruct.ssTargetPath) return false;
			if (this.ssFromImageReference != defaultStruct.ssFromImageReference) return false;
			if (this.ssConfigPath != defaultStruct.ssConfigPath) return false;
			if (this.ssOnPrepareDeployDone != defaultStruct.ssOnPrepareDeployDone) return false;
			if (this.ssOnDeployDone != defaultStruct.ssOnDeployDone) return false;
			if (this.ssOnUndeploy != defaultStruct.ssOnUndeploy) return false;
			if (this.ssOnUpdateConfigurations != defaultStruct.ssOnUpdateConfigurations) return false;
			if (this.ssManualDeployTimeoutInMinutes != defaultStruct.ssManualDeployTimeoutInMinutes) return false;
			if (this.ssAutomaticDeployTimeoutInMinutes != defaultStruct.ssAutomaticDeployTimeoutInMinutes) return false;
			return true;
		}
	} // STDeploymentZone_AmazonECSStructure

	/// <summary>
	/// Structure <code>STUserSecurityGrantsStructure</code> that represents the Service Studio structure
	///  <code>UserSecurityGrants</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STUserSecurityGrantsStructure: ISerializable, ITypedRecord<STUserSecurityGrantsStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uUn4Uq7E4UKE4ra+UxPLWw");
		internal static readonly GlobalObjectKey IdAllowSolutions = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*MDt6PCF5HkOSKHKyuSUVHA");
		internal static readonly GlobalObjectKey IdAllowNewEspace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*9jTh81jcc0W1+IjZT72WSw");
		internal static readonly GlobalObjectKey IdAllowExtensions = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SAdBVfCekk2zT_Pph69ykg");
		internal static readonly GlobalObjectKey IdAllowExternalEntities = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*XHO8iWaWUUOdlTx8KV98iA");
		internal static readonly GlobalObjectKey IdAllowSystemEntities = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*LzymfdtgjU69isPBEr_lVA");
		internal static readonly GlobalObjectKey IdAllowDBConnections = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*snfJtGW+HEmwX7S1ELbtDQ");
		internal static readonly GlobalObjectKey IdAllowProcessManagement = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uiTXYfEMj0C84UtkELcHUQ");
		internal static readonly GlobalObjectKey IdAllowNewDBCatalog = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*FufPEVSYBEOO6NcgjB2pNQ");
		internal static readonly GlobalObjectKey IdAllowSEOManagement = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*BF8k19YwYk+6321SGdqzbw");
		internal static readonly GlobalObjectKey IdViewOnlineMonitoring = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2Ich8uJ10E2AG0arOTvUbQ");
		internal static readonly GlobalObjectKey IdViewLicensing = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*GeJORRc6t0qKDuGrQmFMgg");
		internal static readonly GlobalObjectKey IdSolutionsSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*gWz+upVip0+93CR7hfI7dw");
		internal static readonly GlobalObjectKey IdEspacesSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4Dqqtgaxt0icsEe9GqEEfw");
		internal static readonly GlobalObjectKey IdExtensionsSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Gp2Nx9NY00ml288lMg7nOQ");
		internal static readonly GlobalObjectKey IdUsersSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QHQ9bRt+tEq8cZkp2ZcSPg");
		internal static readonly GlobalObjectKey IdPhonesSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*6nNlW3Q_4kCCEOLB_X7Q5A");
		internal static readonly GlobalObjectKey IdDBConnectionsSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QnA57WN2BUai_SXvpxLTmQ");
		internal static readonly GlobalObjectKey IdCertificatesSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PKS6LOTbtE6FSCAOxXzUAA");
		internal static readonly GlobalObjectKey IdHubConfigurationSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hvx7rZ47AkKBdLBCxa1Cjg");
		internal static readonly GlobalObjectKey IdReportsSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pbzGcSiQUkqm9i6wQt0cfg");
		internal static readonly GlobalObjectKey IdDBCatalogSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*bVjnWgTs4UyyhUZExoYtkg");
		internal static readonly GlobalObjectKey IdApplicationsSecurity = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*RtkThtECVkW93WBUmnliRQ");
		internal static readonly GlobalObjectKey IdAllowNewApplication = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2MEBVHCxFEWulNJ0RSrb7A");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("UserId")]
		public int ssUserId;

		[System.Xml.Serialization.XmlElement("AllowSolutions")]
		public bool ssAllowSolutions;

		[System.Xml.Serialization.XmlElement("AllowNewEspace")]
		public bool ssAllowNewEspace;

		[System.Xml.Serialization.XmlElement("AllowExtensions")]
		public bool ssAllowExtensions;

		[System.Xml.Serialization.XmlElement("AllowExternalEntities")]
		public bool ssAllowExternalEntities;

		[System.Xml.Serialization.XmlElement("AllowSystemEntities")]
		public bool ssAllowSystemEntities;

		[System.Xml.Serialization.XmlElement("AllowDBConnections")]
		public bool ssAllowDBConnections;

		[System.Xml.Serialization.XmlElement("AllowProcessManagement")]
		public bool ssAllowProcessManagement;

		[System.Xml.Serialization.XmlElement("AllowNewDBCatalog")]
		public bool ssAllowNewDBCatalog;

		[System.Xml.Serialization.XmlElement("AllowSEOManagement")]
		public bool ssAllowSEOManagement;

		[System.Xml.Serialization.XmlElement("ViewOnlineMonitoring")]
		public bool ssViewOnlineMonitoring;

		[System.Xml.Serialization.XmlElement("ViewLicensing")]
		public bool ssViewLicensing;

		[System.Xml.Serialization.XmlElement("SolutionsSecurity")]
		public int ssSolutionsSecurity;

		[System.Xml.Serialization.XmlElement("EspacesSecurity")]
		public int ssEspacesSecurity;

		[System.Xml.Serialization.XmlElement("ExtensionsSecurity")]
		public int ssExtensionsSecurity;

		[System.Xml.Serialization.XmlElement("UsersSecurity")]
		public int ssUsersSecurity;

		[System.Xml.Serialization.XmlElement("PhonesSecurity")]
		public int ssPhonesSecurity;

		[System.Xml.Serialization.XmlElement("DBConnectionsSecurity")]
		public int ssDBConnectionsSecurity;

		[System.Xml.Serialization.XmlElement("CertificatesSecurity")]
		public int ssCertificatesSecurity;

		[System.Xml.Serialization.XmlElement("HubConfigurationSecurity")]
		public int ssHubConfigurationSecurity;

		[System.Xml.Serialization.XmlElement("ReportsSecurity")]
		public int ssReportsSecurity;

		[System.Xml.Serialization.XmlElement("DBCatalogSecurity")]
		public int ssDBCatalogSecurity;

		[System.Xml.Serialization.XmlElement("ApplicationsSecurity")]
		public int ssApplicationsSecurity;

		[System.Xml.Serialization.XmlElement("AllowNewApplication")]
		public bool ssAllowNewApplication;


		public BitArray OptimizedAttributes;

		public STUserSecurityGrantsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssUserId = 0;
			ssAllowSolutions = false;
			ssAllowNewEspace = false;
			ssAllowExtensions = false;
			ssAllowExternalEntities = false;
			ssAllowSystemEntities = false;
			ssAllowDBConnections = false;
			ssAllowProcessManagement = false;
			ssAllowNewDBCatalog = false;
			ssAllowSEOManagement = false;
			ssViewOnlineMonitoring = false;
			ssViewLicensing = false;
			ssSolutionsSecurity = 0;
			ssEspacesSecurity = 0;
			ssExtensionsSecurity = 0;
			ssUsersSecurity = 0;
			ssPhonesSecurity = 0;
			ssDBConnectionsSecurity = 0;
			ssCertificatesSecurity = 0;
			ssHubConfigurationSecurity = 0;
			ssReportsSecurity = 0;
			ssDBCatalogSecurity = 0;
			ssApplicationsSecurity = 0;
			ssAllowNewApplication = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssUserId = r.ReadEntityReference(index++, "UserSecurityGrants.UserId", 0);
			ssAllowSolutions = r.ReadBoolean(index++, "UserSecurityGrants.AllowSolutions", false);
			ssAllowNewEspace = r.ReadBoolean(index++, "UserSecurityGrants.AllowNewEspace", false);
			ssAllowExtensions = r.ReadBoolean(index++, "UserSecurityGrants.AllowExtensions", false);
			ssAllowExternalEntities = r.ReadBoolean(index++, "UserSecurityGrants.AllowExternalEntities", false);
			ssAllowSystemEntities = r.ReadBoolean(index++, "UserSecurityGrants.AllowSystemEntities", false);
			ssAllowDBConnections = r.ReadBoolean(index++, "UserSecurityGrants.AllowDBConnections", false);
			ssAllowProcessManagement = r.ReadBoolean(index++, "UserSecurityGrants.AllowProcessManagement", false);
			ssAllowNewDBCatalog = r.ReadBoolean(index++, "UserSecurityGrants.AllowNewDBCatalog", false);
			ssAllowSEOManagement = r.ReadBoolean(index++, "UserSecurityGrants.AllowSEOManagement", false);
			ssViewOnlineMonitoring = r.ReadBoolean(index++, "UserSecurityGrants.ViewOnlineMonitoring", false);
			ssViewLicensing = r.ReadBoolean(index++, "UserSecurityGrants.ViewLicensing", false);
			ssSolutionsSecurity = r.ReadInteger(index++, "UserSecurityGrants.SolutionsSecurity", 0);
			ssEspacesSecurity = r.ReadInteger(index++, "UserSecurityGrants.EspacesSecurity", 0);
			ssExtensionsSecurity = r.ReadInteger(index++, "UserSecurityGrants.ExtensionsSecurity", 0);
			ssUsersSecurity = r.ReadInteger(index++, "UserSecurityGrants.UsersSecurity", 0);
			ssPhonesSecurity = r.ReadInteger(index++, "UserSecurityGrants.PhonesSecurity", 0);
			ssDBConnectionsSecurity = r.ReadInteger(index++, "UserSecurityGrants.DBConnectionsSecurity", 0);
			ssCertificatesSecurity = r.ReadInteger(index++, "UserSecurityGrants.CertificatesSecurity", 0);
			ssHubConfigurationSecurity = r.ReadInteger(index++, "UserSecurityGrants.HubConfigurationSecurity", 0);
			ssReportsSecurity = r.ReadInteger(index++, "UserSecurityGrants.ReportsSecurity", 0);
			ssDBCatalogSecurity = r.ReadInteger(index++, "UserSecurityGrants.DBCatalogSecurity", 0);
			ssApplicationsSecurity = r.ReadInteger(index++, "UserSecurityGrants.ApplicationsSecurity", 0);
			ssAllowNewApplication = r.ReadBoolean(index++, "UserSecurityGrants.AllowNewApplication", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STUserSecurityGrantsStructure r) {
			this = r;
		}


		public static bool operator == (STUserSecurityGrantsStructure a, STUserSecurityGrantsStructure b) {
			if (a.ssUserId != b.ssUserId) return false;
			if (a.ssAllowSolutions != b.ssAllowSolutions) return false;
			if (a.ssAllowNewEspace != b.ssAllowNewEspace) return false;
			if (a.ssAllowExtensions != b.ssAllowExtensions) return false;
			if (a.ssAllowExternalEntities != b.ssAllowExternalEntities) return false;
			if (a.ssAllowSystemEntities != b.ssAllowSystemEntities) return false;
			if (a.ssAllowDBConnections != b.ssAllowDBConnections) return false;
			if (a.ssAllowProcessManagement != b.ssAllowProcessManagement) return false;
			if (a.ssAllowNewDBCatalog != b.ssAllowNewDBCatalog) return false;
			if (a.ssAllowSEOManagement != b.ssAllowSEOManagement) return false;
			if (a.ssViewOnlineMonitoring != b.ssViewOnlineMonitoring) return false;
			if (a.ssViewLicensing != b.ssViewLicensing) return false;
			if (a.ssSolutionsSecurity != b.ssSolutionsSecurity) return false;
			if (a.ssEspacesSecurity != b.ssEspacesSecurity) return false;
			if (a.ssExtensionsSecurity != b.ssExtensionsSecurity) return false;
			if (a.ssUsersSecurity != b.ssUsersSecurity) return false;
			if (a.ssPhonesSecurity != b.ssPhonesSecurity) return false;
			if (a.ssDBConnectionsSecurity != b.ssDBConnectionsSecurity) return false;
			if (a.ssCertificatesSecurity != b.ssCertificatesSecurity) return false;
			if (a.ssHubConfigurationSecurity != b.ssHubConfigurationSecurity) return false;
			if (a.ssReportsSecurity != b.ssReportsSecurity) return false;
			if (a.ssDBCatalogSecurity != b.ssDBCatalogSecurity) return false;
			if (a.ssApplicationsSecurity != b.ssApplicationsSecurity) return false;
			if (a.ssAllowNewApplication != b.ssAllowNewApplication) return false;
			return true;
		}

		public static bool operator != (STUserSecurityGrantsStructure a, STUserSecurityGrantsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STUserSecurityGrantsStructure)) return false;
			return (this == (STUserSecurityGrantsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssUserId.GetHashCode()
				^ ssAllowSolutions.GetHashCode()
				^ ssAllowNewEspace.GetHashCode()
				^ ssAllowExtensions.GetHashCode()
				^ ssAllowExternalEntities.GetHashCode()
				^ ssAllowSystemEntities.GetHashCode()
				^ ssAllowDBConnections.GetHashCode()
				^ ssAllowProcessManagement.GetHashCode()
				^ ssAllowNewDBCatalog.GetHashCode()
				^ ssAllowSEOManagement.GetHashCode()
				^ ssViewOnlineMonitoring.GetHashCode()
				^ ssViewLicensing.GetHashCode()
				^ ssSolutionsSecurity.GetHashCode()
				^ ssEspacesSecurity.GetHashCode()
				^ ssExtensionsSecurity.GetHashCode()
				^ ssUsersSecurity.GetHashCode()
				^ ssPhonesSecurity.GetHashCode()
				^ ssDBConnectionsSecurity.GetHashCode()
				^ ssCertificatesSecurity.GetHashCode()
				^ ssHubConfigurationSecurity.GetHashCode()
				^ ssReportsSecurity.GetHashCode()
				^ ssDBCatalogSecurity.GetHashCode()
				^ ssApplicationsSecurity.GetHashCode()
				^ ssAllowNewApplication.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STUserSecurityGrantsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssUserId = 0;
			ssAllowSolutions = false;
			ssAllowNewEspace = false;
			ssAllowExtensions = false;
			ssAllowExternalEntities = false;
			ssAllowSystemEntities = false;
			ssAllowDBConnections = false;
			ssAllowProcessManagement = false;
			ssAllowNewDBCatalog = false;
			ssAllowSEOManagement = false;
			ssViewOnlineMonitoring = false;
			ssViewLicensing = false;
			ssSolutionsSecurity = 0;
			ssEspacesSecurity = 0;
			ssExtensionsSecurity = 0;
			ssUsersSecurity = 0;
			ssPhonesSecurity = 0;
			ssDBConnectionsSecurity = 0;
			ssCertificatesSecurity = 0;
			ssHubConfigurationSecurity = 0;
			ssReportsSecurity = 0;
			ssDBCatalogSecurity = 0;
			ssApplicationsSecurity = 0;
			ssAllowNewApplication = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssUserId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUserId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUserId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowSolutions", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowSolutions' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowSolutions = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowNewEspace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowNewEspace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowNewEspace = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowExtensions", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowExtensions' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowExtensions = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowExternalEntities", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowExternalEntities' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowExternalEntities = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowSystemEntities", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowSystemEntities' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowSystemEntities = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowDBConnections", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowDBConnections' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowDBConnections = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowProcessManagement", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowProcessManagement' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowProcessManagement = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowNewDBCatalog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowNewDBCatalog' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowNewDBCatalog = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowSEOManagement", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowSEOManagement' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowSEOManagement = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssViewOnlineMonitoring", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssViewOnlineMonitoring' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssViewOnlineMonitoring = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssViewLicensing", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssViewLicensing' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssViewLicensing = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSolutionsSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSolutionsSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSolutionsSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspacesSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspacesSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspacesSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtensionsSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtensionsSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtensionsSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUsersSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUsersSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUsersSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPhonesSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPhonesSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPhonesSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDBConnectionsSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDBConnectionsSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDBConnectionsSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCertificatesSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCertificatesSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCertificatesSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHubConfigurationSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHubConfigurationSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHubConfigurationSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReportsSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReportsSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReportsSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDBCatalogSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDBCatalogSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDBCatalogSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationsSecurity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationsSecurity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationsSecurity = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowNewApplication", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowNewApplication' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowNewApplication = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STUserSecurityGrantsStructure Duplicate() {
			STUserSecurityGrantsStructure t;
			t.ssUserId = this.ssUserId;
			t.ssAllowSolutions = this.ssAllowSolutions;
			t.ssAllowNewEspace = this.ssAllowNewEspace;
			t.ssAllowExtensions = this.ssAllowExtensions;
			t.ssAllowExternalEntities = this.ssAllowExternalEntities;
			t.ssAllowSystemEntities = this.ssAllowSystemEntities;
			t.ssAllowDBConnections = this.ssAllowDBConnections;
			t.ssAllowProcessManagement = this.ssAllowProcessManagement;
			t.ssAllowNewDBCatalog = this.ssAllowNewDBCatalog;
			t.ssAllowSEOManagement = this.ssAllowSEOManagement;
			t.ssViewOnlineMonitoring = this.ssViewOnlineMonitoring;
			t.ssViewLicensing = this.ssViewLicensing;
			t.ssSolutionsSecurity = this.ssSolutionsSecurity;
			t.ssEspacesSecurity = this.ssEspacesSecurity;
			t.ssExtensionsSecurity = this.ssExtensionsSecurity;
			t.ssUsersSecurity = this.ssUsersSecurity;
			t.ssPhonesSecurity = this.ssPhonesSecurity;
			t.ssDBConnectionsSecurity = this.ssDBConnectionsSecurity;
			t.ssCertificatesSecurity = this.ssCertificatesSecurity;
			t.ssHubConfigurationSecurity = this.ssHubConfigurationSecurity;
			t.ssReportsSecurity = this.ssReportsSecurity;
			t.ssDBCatalogSecurity = this.ssDBCatalogSecurity;
			t.ssApplicationsSecurity = this.ssApplicationsSecurity;
			t.ssAllowNewApplication = this.ssAllowNewApplication;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowSolutions")) VarValue.AppendAttribute(recordElem, "AllowSolutions", ssAllowSolutions, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowSolutions");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowNewEspace")) VarValue.AppendAttribute(recordElem, "AllowNewEspace", ssAllowNewEspace, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowNewEspace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowExtensions")) VarValue.AppendAttribute(recordElem, "AllowExtensions", ssAllowExtensions, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowExtensions");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowExternalEntities")) VarValue.AppendAttribute(recordElem, "AllowExternalEntities", ssAllowExternalEntities, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowExternalEntities");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowSystemEntities")) VarValue.AppendAttribute(recordElem, "AllowSystemEntities", ssAllowSystemEntities, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowSystemEntities");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowDBConnections")) VarValue.AppendAttribute(recordElem, "AllowDBConnections", ssAllowDBConnections, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowDBConnections");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowProcessManagement")) VarValue.AppendAttribute(recordElem, "AllowProcessManagement", ssAllowProcessManagement, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowProcessManagement");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowNewDBCatalog")) VarValue.AppendAttribute(recordElem, "AllowNewDBCatalog", ssAllowNewDBCatalog, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowNewDBCatalog");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowSEOManagement")) VarValue.AppendAttribute(recordElem, "AllowSEOManagement", ssAllowSEOManagement, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowSEOManagement");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ViewOnlineMonitoring")) VarValue.AppendAttribute(recordElem, "ViewOnlineMonitoring", ssViewOnlineMonitoring, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ViewOnlineMonitoring");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ViewLicensing")) VarValue.AppendAttribute(recordElem, "ViewLicensing", ssViewLicensing, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ViewLicensing");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SolutionsSecurity")) VarValue.AppendAttribute(recordElem, "SolutionsSecurity", ssSolutionsSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "SolutionsSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspacesSecurity")) VarValue.AppendAttribute(recordElem, "EspacesSecurity", ssEspacesSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "EspacesSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExtensionsSecurity")) VarValue.AppendAttribute(recordElem, "ExtensionsSecurity", ssExtensionsSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ExtensionsSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UsersSecurity")) VarValue.AppendAttribute(recordElem, "UsersSecurity", ssUsersSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UsersSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PhonesSecurity")) VarValue.AppendAttribute(recordElem, "PhonesSecurity", ssPhonesSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "PhonesSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DBConnectionsSecurity")) VarValue.AppendAttribute(recordElem, "DBConnectionsSecurity", ssDBConnectionsSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "DBConnectionsSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CertificatesSecurity")) VarValue.AppendAttribute(recordElem, "CertificatesSecurity", ssCertificatesSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "CertificatesSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HubConfigurationSecurity")) VarValue.AppendAttribute(recordElem, "HubConfigurationSecurity", ssHubConfigurationSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "HubConfigurationSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReportsSecurity")) VarValue.AppendAttribute(recordElem, "ReportsSecurity", ssReportsSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ReportsSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DBCatalogSecurity")) VarValue.AppendAttribute(recordElem, "DBCatalogSecurity", ssDBCatalogSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "DBCatalogSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationsSecurity")) VarValue.AppendAttribute(recordElem, "ApplicationsSecurity", ssApplicationsSecurity, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationsSecurity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AllowNewApplication")) VarValue.AppendAttribute(recordElem, "AllowNewApplication", ssAllowNewApplication, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AllowNewApplication");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			} else if (head == "allowsolutions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowSolutions")) variable.Value = ssAllowSolutions; else variable.Optimized = true;
			} else if (head == "allownewespace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowNewEspace")) variable.Value = ssAllowNewEspace; else variable.Optimized = true;
			} else if (head == "allowextensions") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowExtensions")) variable.Value = ssAllowExtensions; else variable.Optimized = true;
			} else if (head == "allowexternalentities") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowExternalEntities")) variable.Value = ssAllowExternalEntities; else variable.Optimized = true;
			} else if (head == "allowsystementities") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowSystemEntities")) variable.Value = ssAllowSystemEntities; else variable.Optimized = true;
			} else if (head == "allowdbconnections") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowDBConnections")) variable.Value = ssAllowDBConnections; else variable.Optimized = true;
			} else if (head == "allowprocessmanagement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowProcessManagement")) variable.Value = ssAllowProcessManagement; else variable.Optimized = true;
			} else if (head == "allownewdbcatalog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowNewDBCatalog")) variable.Value = ssAllowNewDBCatalog; else variable.Optimized = true;
			} else if (head == "allowseomanagement") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowSEOManagement")) variable.Value = ssAllowSEOManagement; else variable.Optimized = true;
			} else if (head == "viewonlinemonitoring") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ViewOnlineMonitoring")) variable.Value = ssViewOnlineMonitoring; else variable.Optimized = true;
			} else if (head == "viewlicensing") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ViewLicensing")) variable.Value = ssViewLicensing; else variable.Optimized = true;
			} else if (head == "solutionssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SolutionsSecurity")) variable.Value = ssSolutionsSecurity; else variable.Optimized = true;
			} else if (head == "espacessecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspacesSecurity")) variable.Value = ssEspacesSecurity; else variable.Optimized = true;
			} else if (head == "extensionssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExtensionsSecurity")) variable.Value = ssExtensionsSecurity; else variable.Optimized = true;
			} else if (head == "userssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UsersSecurity")) variable.Value = ssUsersSecurity; else variable.Optimized = true;
			} else if (head == "phonessecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PhonesSecurity")) variable.Value = ssPhonesSecurity; else variable.Optimized = true;
			} else if (head == "dbconnectionssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBConnectionsSecurity")) variable.Value = ssDBConnectionsSecurity; else variable.Optimized = true;
			} else if (head == "certificatessecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CertificatesSecurity")) variable.Value = ssCertificatesSecurity; else variable.Optimized = true;
			} else if (head == "hubconfigurationsecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HubConfigurationSecurity")) variable.Value = ssHubConfigurationSecurity; else variable.Optimized = true;
			} else if (head == "reportssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReportsSecurity")) variable.Value = ssReportsSecurity; else variable.Optimized = true;
			} else if (head == "dbcatalogsecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DBCatalogSecurity")) variable.Value = ssDBCatalogSecurity; else variable.Optimized = true;
			} else if (head == "applicationssecurity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationsSecurity")) variable.Value = ssApplicationsSecurity; else variable.Optimized = true;
			} else if (head == "allownewapplication") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AllowNewApplication")) variable.Value = ssAllowNewApplication; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUserId) {
				return ssUserId;
			} else if (key == IdAllowSolutions) {
				return ssAllowSolutions;
			} else if (key == IdAllowNewEspace) {
				return ssAllowNewEspace;
			} else if (key == IdAllowExtensions) {
				return ssAllowExtensions;
			} else if (key == IdAllowExternalEntities) {
				return ssAllowExternalEntities;
			} else if (key == IdAllowSystemEntities) {
				return ssAllowSystemEntities;
			} else if (key == IdAllowDBConnections) {
				return ssAllowDBConnections;
			} else if (key == IdAllowProcessManagement) {
				return ssAllowProcessManagement;
			} else if (key == IdAllowNewDBCatalog) {
				return ssAllowNewDBCatalog;
			} else if (key == IdAllowSEOManagement) {
				return ssAllowSEOManagement;
			} else if (key == IdViewOnlineMonitoring) {
				return ssViewOnlineMonitoring;
			} else if (key == IdViewLicensing) {
				return ssViewLicensing;
			} else if (key == IdSolutionsSecurity) {
				return ssSolutionsSecurity;
			} else if (key == IdEspacesSecurity) {
				return ssEspacesSecurity;
			} else if (key == IdExtensionsSecurity) {
				return ssExtensionsSecurity;
			} else if (key == IdUsersSecurity) {
				return ssUsersSecurity;
			} else if (key == IdPhonesSecurity) {
				return ssPhonesSecurity;
			} else if (key == IdDBConnectionsSecurity) {
				return ssDBConnectionsSecurity;
			} else if (key == IdCertificatesSecurity) {
				return ssCertificatesSecurity;
			} else if (key == IdHubConfigurationSecurity) {
				return ssHubConfigurationSecurity;
			} else if (key == IdReportsSecurity) {
				return ssReportsSecurity;
			} else if (key == IdDBCatalogSecurity) {
				return ssDBCatalogSecurity;
			} else if (key == IdApplicationsSecurity) {
				return ssApplicationsSecurity;
			} else if (key == IdAllowNewApplication) {
				return ssAllowNewApplication;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssUserId = (int) other.AttributeGet(IdUserId);
			ssAllowSolutions = (bool) other.AttributeGet(IdAllowSolutions);
			ssAllowNewEspace = (bool) other.AttributeGet(IdAllowNewEspace);
			ssAllowExtensions = (bool) other.AttributeGet(IdAllowExtensions);
			ssAllowExternalEntities = (bool) other.AttributeGet(IdAllowExternalEntities);
			ssAllowSystemEntities = (bool) other.AttributeGet(IdAllowSystemEntities);
			ssAllowDBConnections = (bool) other.AttributeGet(IdAllowDBConnections);
			ssAllowProcessManagement = (bool) other.AttributeGet(IdAllowProcessManagement);
			ssAllowNewDBCatalog = (bool) other.AttributeGet(IdAllowNewDBCatalog);
			ssAllowSEOManagement = (bool) other.AttributeGet(IdAllowSEOManagement);
			ssViewOnlineMonitoring = (bool) other.AttributeGet(IdViewOnlineMonitoring);
			ssViewLicensing = (bool) other.AttributeGet(IdViewLicensing);
			ssSolutionsSecurity = (int) other.AttributeGet(IdSolutionsSecurity);
			ssEspacesSecurity = (int) other.AttributeGet(IdEspacesSecurity);
			ssExtensionsSecurity = (int) other.AttributeGet(IdExtensionsSecurity);
			ssUsersSecurity = (int) other.AttributeGet(IdUsersSecurity);
			ssPhonesSecurity = (int) other.AttributeGet(IdPhonesSecurity);
			ssDBConnectionsSecurity = (int) other.AttributeGet(IdDBConnectionsSecurity);
			ssCertificatesSecurity = (int) other.AttributeGet(IdCertificatesSecurity);
			ssHubConfigurationSecurity = (int) other.AttributeGet(IdHubConfigurationSecurity);
			ssReportsSecurity = (int) other.AttributeGet(IdReportsSecurity);
			ssDBCatalogSecurity = (int) other.AttributeGet(IdDBCatalogSecurity);
			ssApplicationsSecurity = (int) other.AttributeGet(IdApplicationsSecurity);
			ssAllowNewApplication = (bool) other.AttributeGet(IdAllowNewApplication);
		}
		public bool IsDefault() {
			STUserSecurityGrantsStructure defaultStruct = new STUserSecurityGrantsStructure(null);
			if (this.ssUserId != defaultStruct.ssUserId) return false;
			if (this.ssAllowSolutions != defaultStruct.ssAllowSolutions) return false;
			if (this.ssAllowNewEspace != defaultStruct.ssAllowNewEspace) return false;
			if (this.ssAllowExtensions != defaultStruct.ssAllowExtensions) return false;
			if (this.ssAllowExternalEntities != defaultStruct.ssAllowExternalEntities) return false;
			if (this.ssAllowSystemEntities != defaultStruct.ssAllowSystemEntities) return false;
			if (this.ssAllowDBConnections != defaultStruct.ssAllowDBConnections) return false;
			if (this.ssAllowProcessManagement != defaultStruct.ssAllowProcessManagement) return false;
			if (this.ssAllowNewDBCatalog != defaultStruct.ssAllowNewDBCatalog) return false;
			if (this.ssAllowSEOManagement != defaultStruct.ssAllowSEOManagement) return false;
			if (this.ssViewOnlineMonitoring != defaultStruct.ssViewOnlineMonitoring) return false;
			if (this.ssViewLicensing != defaultStruct.ssViewLicensing) return false;
			if (this.ssSolutionsSecurity != defaultStruct.ssSolutionsSecurity) return false;
			if (this.ssEspacesSecurity != defaultStruct.ssEspacesSecurity) return false;
			if (this.ssExtensionsSecurity != defaultStruct.ssExtensionsSecurity) return false;
			if (this.ssUsersSecurity != defaultStruct.ssUsersSecurity) return false;
			if (this.ssPhonesSecurity != defaultStruct.ssPhonesSecurity) return false;
			if (this.ssDBConnectionsSecurity != defaultStruct.ssDBConnectionsSecurity) return false;
			if (this.ssCertificatesSecurity != defaultStruct.ssCertificatesSecurity) return false;
			if (this.ssHubConfigurationSecurity != defaultStruct.ssHubConfigurationSecurity) return false;
			if (this.ssReportsSecurity != defaultStruct.ssReportsSecurity) return false;
			if (this.ssDBCatalogSecurity != defaultStruct.ssDBCatalogSecurity) return false;
			if (this.ssApplicationsSecurity != defaultStruct.ssApplicationsSecurity) return false;
			if (this.ssAllowNewApplication != defaultStruct.ssAllowNewApplication) return false;
			return true;
		}
	} // STUserSecurityGrantsStructure

	/// <summary>
	/// Structure <code>STVersionComparisonStructure</code> that represents the Service Studio structure
	///  <code>VersionComparison</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STVersionComparisonStructure: ISerializable, ITypedRecord<STVersionComparisonStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdResult = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*1vO_szVw50aQIJQXB6QopA");
		internal static readonly GlobalObjectKey IdLastServerVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*il2iDXAb2UqwpDyS5syyFA");
		internal static readonly GlobalObjectKey IdUploadUser = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Xc3pWLE86ke8QPM4uyB3cg");
		internal static readonly GlobalObjectKey IdUploadDate = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5rV5QSWNxkeMK8NAySn9Uw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Result")]
		public int ssResult;

		[System.Xml.Serialization.XmlElement("LastServerVersion")]
		public int ssLastServerVersion;

		[System.Xml.Serialization.XmlElement("UploadUser")]
		public string ssUploadUser;

		[System.Xml.Serialization.XmlElement("UploadDate")]
		public DateTime ssUploadDate;


		public BitArray OptimizedAttributes;

		public STVersionComparisonStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssResult = 0;
			ssLastServerVersion = 0;
			ssUploadUser = "";
			ssUploadDate = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssResult = r.ReadEntityReference(index++, "VersionComparison.Result", 0);
			ssLastServerVersion = r.ReadEntityReference(index++, "VersionComparison.LastServerVersion", 0);
			ssUploadUser = r.ReadText(index++, "VersionComparison.UploadUser", "");
			ssUploadDate = r.ReadDateTime(index++, "VersionComparison.UploadDate", new DateTime(1900, 1, 1, 0, 0, 0));
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STVersionComparisonStructure r) {
			this = r;
		}


		public static bool operator == (STVersionComparisonStructure a, STVersionComparisonStructure b) {
			if (a.ssResult != b.ssResult) return false;
			if (a.ssLastServerVersion != b.ssLastServerVersion) return false;
			if (a.ssUploadUser != b.ssUploadUser) return false;
			if (a.ssUploadDate != b.ssUploadDate) return false;
			return true;
		}

		public static bool operator != (STVersionComparisonStructure a, STVersionComparisonStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STVersionComparisonStructure)) return false;
			return (this == (STVersionComparisonStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssResult.GetHashCode()
				^ ssLastServerVersion.GetHashCode()
				^ ssUploadUser.GetHashCode()
				^ ssUploadDate.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STVersionComparisonStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssResult = 0;
			ssLastServerVersion = 0;
			ssUploadUser = "";
			ssUploadDate = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssResult", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssResult' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssResult = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLastServerVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLastServerVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLastServerVersion = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUploadUser", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUploadUser' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUploadUser = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUploadDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUploadDate' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUploadDate = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STVersionComparisonStructure Duplicate() {
			STVersionComparisonStructure t;
			t.ssResult = this.ssResult;
			t.ssLastServerVersion = this.ssLastServerVersion;
			t.ssUploadUser = this.ssUploadUser;
			t.ssUploadDate = this.ssUploadDate;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Result")) VarValue.AppendAttribute(recordElem, "Result", ssResult, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Result");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastServerVersion")) VarValue.AppendAttribute(recordElem, "LastServerVersion", ssLastServerVersion, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastServerVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UploadUser")) VarValue.AppendAttribute(recordElem, "UploadUser", ssUploadUser, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "UploadUser");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UploadDate")) VarValue.AppendAttribute(recordElem, "UploadDate", ssUploadDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "UploadDate");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "result") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Result")) variable.Value = ssResult; else variable.Optimized = true;
			} else if (head == "lastserverversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastServerVersion")) variable.Value = ssLastServerVersion; else variable.Optimized = true;
			} else if (head == "uploaduser") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UploadUser")) variable.Value = ssUploadUser; else variable.Optimized = true;
			} else if (head == "uploaddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UploadDate")) variable.Value = ssUploadDate; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdResult) {
				return ssResult;
			} else if (key == IdLastServerVersion) {
				return ssLastServerVersion;
			} else if (key == IdUploadUser) {
				return ssUploadUser;
			} else if (key == IdUploadDate) {
				return ssUploadDate;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssResult = (int) other.AttributeGet(IdResult);
			ssLastServerVersion = (int) other.AttributeGet(IdLastServerVersion);
			ssUploadUser = (string) other.AttributeGet(IdUploadUser);
			ssUploadDate = (DateTime) other.AttributeGet(IdUploadDate);
		}
		public bool IsDefault() {
			STVersionComparisonStructure defaultStruct = new STVersionComparisonStructure(null);
			if (this.ssResult != defaultStruct.ssResult) return false;
			if (this.ssLastServerVersion != defaultStruct.ssLastServerVersion) return false;
			if (this.ssUploadUser != defaultStruct.ssUploadUser) return false;
			if (this.ssUploadDate != defaultStruct.ssUploadDate) return false;
			return true;
		}
	} // STVersionComparisonStructure

	/// <summary>
	/// Structure <code>STDBCatalogStructure</code> that represents the Service Studio structure
	///  <code>DBCatalog</code> <p> Description: Database catalog structure. Used to traslate from Compile
	/// r Service to Service Center</p>
	/// </summary>
	[Serializable()]
	public partial struct STDBCatalogStructure: ISerializable, ITypedRecord<STDBCatalogStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SF90ITcCbUSXV9JEJJVIsQ");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wGTCNfxzHE+f_Wc5RmVJ4A");
		internal static readonly GlobalObjectKey IdLogicalName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*yx3rVdkiqUy7UD3_wcRu+A");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4UxF7vRND0GVRHukVL4mLQ");
		internal static readonly GlobalObjectKey IdUsername = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*v3z56lzDx0OpQ_TYrzhWJQ");
		internal static readonly GlobalObjectKey IdPassword = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*KPmCqkjDWk6sv7lSEJS35w");
		internal static readonly GlobalObjectKey IdOwnerUsername = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*r0IsSb7gckWy9nf60hlm5Q");
		internal static readonly GlobalObjectKey IdOwnerPassword = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PEJIoTYTmE2OMFHlDpjYjg");
		internal static readonly GlobalObjectKey IdDataTablespace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*aiNcp+Os70aaWGBMbrGvvQ");
		internal static readonly GlobalObjectKey IdIndexTablespace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*TqukEqXhN0qz7yOQdBFLoA");
		internal static readonly GlobalObjectKey IdUseIntegratedAuth = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*HVPMBwvEJEqB5SnvLj1zGw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public int ssId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("LogicalName")]
		public string ssLogicalName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("Username")]
		public string ssUsername;

		[System.Xml.Serialization.XmlElement("Password")]
		public string ssPassword;

		[System.Xml.Serialization.XmlElement("OwnerUsername")]
		public string ssOwnerUsername;

		[System.Xml.Serialization.XmlElement("OwnerPassword")]
		public string ssOwnerPassword;

		[System.Xml.Serialization.XmlElement("DataTablespace")]
		public string ssDataTablespace;

		[System.Xml.Serialization.XmlElement("IndexTablespace")]
		public string ssIndexTablespace;

		[System.Xml.Serialization.XmlElement("UseIntegratedAuth")]
		public bool ssUseIntegratedAuth;


		public BitArray OptimizedAttributes;

		public STDBCatalogStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = 0;
			ssName = "";
			ssLogicalName = "";
			ssDescription = "";
			ssUsername = "";
			ssPassword = "";
			ssOwnerUsername = "";
			ssOwnerPassword = "";
			ssDataTablespace = "";
			ssIndexTablespace = "";
			ssUseIntegratedAuth = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "DBCatalog.Id", 0);
			ssName = r.ReadText(index++, "DBCatalog.Name", "");
			ssLogicalName = r.ReadText(index++, "DBCatalog.LogicalName", "");
			ssDescription = r.ReadText(index++, "DBCatalog.Description", "");
			ssUsername = r.ReadText(index++, "DBCatalog.Username", "");
			ssPassword = r.ReadText(index++, "DBCatalog.Password", "");
			ssOwnerUsername = r.ReadText(index++, "DBCatalog.OwnerUsername", "");
			ssOwnerPassword = r.ReadText(index++, "DBCatalog.OwnerPassword", "");
			ssDataTablespace = r.ReadText(index++, "DBCatalog.DataTablespace", "");
			ssIndexTablespace = r.ReadText(index++, "DBCatalog.IndexTablespace", "");
			ssUseIntegratedAuth = r.ReadBoolean(index++, "DBCatalog.UseIntegratedAuth", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDBCatalogStructure r) {
			this = r;
		}


		public static bool operator == (STDBCatalogStructure a, STDBCatalogStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssLogicalName != b.ssLogicalName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssUsername != b.ssUsername) return false;
			if (a.ssPassword != b.ssPassword) return false;
			if (a.ssOwnerUsername != b.ssOwnerUsername) return false;
			if (a.ssOwnerPassword != b.ssOwnerPassword) return false;
			if (a.ssDataTablespace != b.ssDataTablespace) return false;
			if (a.ssIndexTablespace != b.ssIndexTablespace) return false;
			if (a.ssUseIntegratedAuth != b.ssUseIntegratedAuth) return false;
			return true;
		}

		public static bool operator != (STDBCatalogStructure a, STDBCatalogStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDBCatalogStructure)) return false;
			return (this == (STDBCatalogStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssLogicalName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssUsername.GetHashCode()
				^ ssPassword.GetHashCode()
				^ ssOwnerUsername.GetHashCode()
				^ ssOwnerPassword.GetHashCode()
				^ ssDataTablespace.GetHashCode()
				^ ssIndexTablespace.GetHashCode()
				^ ssUseIntegratedAuth.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDBCatalogStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = 0;
			ssName = "";
			ssLogicalName = "";
			ssDescription = "";
			ssUsername = "";
			ssPassword = "";
			ssOwnerUsername = "";
			ssOwnerPassword = "";
			ssDataTablespace = "";
			ssIndexTablespace = "";
			ssUseIntegratedAuth = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogicalName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUsername", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUsername' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUsername = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPassword", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPassword' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPassword = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOwnerUsername", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOwnerUsername' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOwnerUsername = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOwnerPassword", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOwnerPassword' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOwnerPassword = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDataTablespace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataTablespace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataTablespace = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIndexTablespace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIndexTablespace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIndexTablespace = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUseIntegratedAuth", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUseIntegratedAuth' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUseIntegratedAuth = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDBCatalogStructure Duplicate() {
			STDBCatalogStructure t;
			t.ssId = this.ssId;
			t.ssName = this.ssName;
			t.ssLogicalName = this.ssLogicalName;
			t.ssDescription = this.ssDescription;
			t.ssUsername = this.ssUsername;
			t.ssPassword = this.ssPassword;
			t.ssOwnerUsername = this.ssOwnerUsername;
			t.ssOwnerPassword = this.ssOwnerPassword;
			t.ssDataTablespace = this.ssDataTablespace;
			t.ssIndexTablespace = this.ssIndexTablespace;
			t.ssUseIntegratedAuth = this.ssUseIntegratedAuth;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogicalName")) VarValue.AppendAttribute(recordElem, "LogicalName", ssLogicalName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogicalName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Username")) VarValue.AppendAttribute(recordElem, "Username", ssUsername, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Username");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Password")) VarValue.AppendAttribute(recordElem, "Password", ssPassword, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Password");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OwnerUsername")) VarValue.AppendAttribute(recordElem, "OwnerUsername", ssOwnerUsername, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OwnerUsername");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".OwnerPassword")) VarValue.AppendAttribute(recordElem, "OwnerPassword", ssOwnerPassword, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "OwnerPassword");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DataTablespace")) VarValue.AppendAttribute(recordElem, "DataTablespace", ssDataTablespace, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DataTablespace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IndexTablespace")) VarValue.AppendAttribute(recordElem, "IndexTablespace", ssIndexTablespace, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "IndexTablespace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UseIntegratedAuth")) VarValue.AppendAttribute(recordElem, "UseIntegratedAuth", ssUseIntegratedAuth, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "UseIntegratedAuth");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "logicalname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalName")) variable.Value = ssLogicalName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "username") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Username")) variable.Value = ssUsername; else variable.Optimized = true;
			} else if (head == "password") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Password")) variable.Value = ssPassword; else variable.Optimized = true;
			} else if (head == "ownerusername") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OwnerUsername")) variable.Value = ssOwnerUsername; else variable.Optimized = true;
			} else if (head == "ownerpassword") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".OwnerPassword")) variable.Value = ssOwnerPassword; else variable.Optimized = true;
			} else if (head == "datatablespace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataTablespace")) variable.Value = ssDataTablespace; else variable.Optimized = true;
			} else if (head == "indextablespace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IndexTablespace")) variable.Value = ssIndexTablespace; else variable.Optimized = true;
			} else if (head == "useintegratedauth") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UseIntegratedAuth")) variable.Value = ssUseIntegratedAuth; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdLogicalName) {
				return ssLogicalName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdUsername) {
				return ssUsername;
			} else if (key == IdPassword) {
				return ssPassword;
			} else if (key == IdOwnerUsername) {
				return ssOwnerUsername;
			} else if (key == IdOwnerPassword) {
				return ssOwnerPassword;
			} else if (key == IdDataTablespace) {
				return ssDataTablespace;
			} else if (key == IdIndexTablespace) {
				return ssIndexTablespace;
			} else if (key == IdUseIntegratedAuth) {
				return ssUseIntegratedAuth;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ssLogicalName = (string) other.AttributeGet(IdLogicalName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssUsername = (string) other.AttributeGet(IdUsername);
			ssPassword = (string) other.AttributeGet(IdPassword);
			ssOwnerUsername = (string) other.AttributeGet(IdOwnerUsername);
			ssOwnerPassword = (string) other.AttributeGet(IdOwnerPassword);
			ssDataTablespace = (string) other.AttributeGet(IdDataTablespace);
			ssIndexTablespace = (string) other.AttributeGet(IdIndexTablespace);
			ssUseIntegratedAuth = (bool) other.AttributeGet(IdUseIntegratedAuth);
		}
		public bool IsDefault() {
			STDBCatalogStructure defaultStruct = new STDBCatalogStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssLogicalName != defaultStruct.ssLogicalName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssUsername != defaultStruct.ssUsername) return false;
			if (this.ssPassword != defaultStruct.ssPassword) return false;
			if (this.ssOwnerUsername != defaultStruct.ssOwnerUsername) return false;
			if (this.ssOwnerPassword != defaultStruct.ssOwnerPassword) return false;
			if (this.ssDataTablespace != defaultStruct.ssDataTablespace) return false;
			if (this.ssIndexTablespace != defaultStruct.ssIndexTablespace) return false;
			if (this.ssUseIntegratedAuth != defaultStruct.ssUseIntegratedAuth) return false;
			return true;
		}
	} // STDBCatalogStructure

	/// <summary>
	/// Structure <code>STReferenceableModuleStructure</code> that represents the Service Studio structure
	///  <code>ReferenceableModule</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STReferenceableModuleStructure: ISerializable, ITypedRecord<STReferenceableModuleStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4jHLUSUskkuk1EsgzMIBLA");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qlVCqk9bDU+WMLZxUBFErA");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Gzt0ipXjHEK94ITJ9RE2Qg");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*12H1EblofE2+OgXt1PO9Yw");
		internal static readonly GlobalObjectKey IdSignatureHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5QrCmm2DvUq7RhB5T98YAg");
		internal static readonly GlobalObjectKey IdJQueryVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*sMYJgBKMbUC08Qyx0ZknUA");
		internal static readonly GlobalObjectKey IdApplicationKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*s_q8QHPP30yY0ipbXMMtGw");
		internal static readonly GlobalObjectKey IdRuntimeKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qJ+EtICUn0+P2tU6mGznlA");
		internal static readonly GlobalObjectKey IdExtensibilityConfiguration = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*IYUesjlaDkOeCOamR3AsiA");
		internal static readonly GlobalObjectKey IdIcon = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Te_HlBdl0Eike0GoVEo7Fw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("SignatureHash")]
		public string ssSignatureHash;

		[System.Xml.Serialization.XmlElement("JQueryVersion")]
		public string ssJQueryVersion;

		[System.Xml.Serialization.XmlElement("ApplicationKey")]
		public string ssApplicationKey;

		[System.Xml.Serialization.XmlElement("RuntimeKind")]
		public string ssRuntimeKind;

		[System.Xml.Serialization.XmlElement("ExtensibilityConfiguration")]
		public string ssExtensibilityConfiguration;

		[System.Xml.Serialization.XmlElement("Icon")]
		public byte[] ssIcon;


		public BitArray OptimizedAttributes;

		public STReferenceableModuleStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssKind = "";
			ssDescription = "";
			ssSignatureHash = "";
			ssJQueryVersion = "";
			ssApplicationKey = "";
			ssRuntimeKind = "";
			ssExtensibilityConfiguration = "";
			ssIcon = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "ReferenceableModule.Key", "");
			ssName = r.ReadText(index++, "ReferenceableModule.Name", "");
			ssKind = r.ReadText(index++, "ReferenceableModule.Kind", "");
			ssDescription = r.ReadText(index++, "ReferenceableModule.Description", "");
			ssSignatureHash = r.ReadText(index++, "ReferenceableModule.SignatureHash", "");
			ssJQueryVersion = r.ReadText(index++, "ReferenceableModule.JQueryVersion", "");
			ssApplicationKey = r.ReadText(index++, "ReferenceableModule.ApplicationKey", "");
			ssRuntimeKind = r.ReadText(index++, "ReferenceableModule.RuntimeKind", "");
			ssExtensibilityConfiguration = r.ReadText(index++, "ReferenceableModule.ExtensibilityConfiguration", "");
			ssIcon = r.ReadBinaryData(index++, "ReferenceableModule.Icon", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STReferenceableModuleStructure r) {
			this = r;
		}


		public static bool operator == (STReferenceableModuleStructure a, STReferenceableModuleStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssSignatureHash != b.ssSignatureHash) return false;
			if (a.ssJQueryVersion != b.ssJQueryVersion) return false;
			if (a.ssApplicationKey != b.ssApplicationKey) return false;
			if (a.ssRuntimeKind != b.ssRuntimeKind) return false;
			if (a.ssExtensibilityConfiguration != b.ssExtensibilityConfiguration) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssIcon, b.ssIcon)) return false;
			return true;
		}

		public static bool operator != (STReferenceableModuleStructure a, STReferenceableModuleStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STReferenceableModuleStructure)) return false;
			return (this == (STReferenceableModuleStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssSignatureHash.GetHashCode()
				^ ssJQueryVersion.GetHashCode()
				^ ssApplicationKey.GetHashCode()
				^ ssRuntimeKind.GetHashCode()
				^ ssExtensibilityConfiguration.GetHashCode()
				^ ssIcon.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STReferenceableModuleStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssName = "";
			ssKind = "";
			ssDescription = "";
			ssSignatureHash = "";
			ssJQueryVersion = "";
			ssApplicationKey = "";
			ssRuntimeKind = "";
			ssExtensibilityConfiguration = "";
			ssIcon = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSignatureHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSignatureHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSignatureHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssJQueryVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssJQueryVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssJQueryVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssApplicationKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRuntimeKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRuntimeKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRuntimeKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtensibilityConfiguration", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtensibilityConfiguration' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtensibilityConfiguration = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIcon", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIcon' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIcon = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STReferenceableModuleStructure Duplicate() {
			STReferenceableModuleStructure t;
			t.ssKey = this.ssKey;
			t.ssName = this.ssName;
			t.ssKind = this.ssKind;
			t.ssDescription = this.ssDescription;
			t.ssSignatureHash = this.ssSignatureHash;
			t.ssJQueryVersion = this.ssJQueryVersion;
			t.ssApplicationKey = this.ssApplicationKey;
			t.ssRuntimeKind = this.ssRuntimeKind;
			t.ssExtensibilityConfiguration = this.ssExtensibilityConfiguration;
			if (this.ssIcon != null) {
				t.ssIcon = (byte[]) this.ssIcon.Clone();
			} else {
				t.ssIcon = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SignatureHash")) VarValue.AppendAttribute(recordElem, "SignatureHash", ssSignatureHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SignatureHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".JQueryVersion")) VarValue.AppendAttribute(recordElem, "JQueryVersion", ssJQueryVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "JQueryVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKey")) VarValue.AppendAttribute(recordElem, "ApplicationKey", ssApplicationKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".RuntimeKind")) VarValue.AppendAttribute(recordElem, "RuntimeKind", ssRuntimeKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "RuntimeKind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExtensibilityConfiguration")) VarValue.AppendAttribute(recordElem, "ExtensibilityConfiguration", ssExtensibilityConfiguration, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExtensibilityConfiguration");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Icon")) VarValue.AppendAttribute(recordElem, "Icon", ssIcon, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Icon");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "signaturehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SignatureHash")) variable.Value = ssSignatureHash; else variable.Optimized = true;
			} else if (head == "jqueryversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".JQueryVersion")) variable.Value = ssJQueryVersion; else variable.Optimized = true;
			} else if (head == "applicationkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKey")) variable.Value = ssApplicationKey; else variable.Optimized = true;
			} else if (head == "runtimekind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RuntimeKind")) variable.Value = ssRuntimeKind; else variable.Optimized = true;
			} else if (head == "extensibilityconfiguration") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExtensibilityConfiguration")) variable.Value = ssExtensibilityConfiguration; else variable.Optimized = true;
			} else if (head == "icon") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Icon")) variable.Value = ssIcon; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdSignatureHash) {
				return ssSignatureHash;
			} else if (key == IdJQueryVersion) {
				return ssJQueryVersion;
			} else if (key == IdApplicationKey) {
				return ssApplicationKey;
			} else if (key == IdRuntimeKind) {
				return ssRuntimeKind;
			} else if (key == IdExtensibilityConfiguration) {
				return ssExtensibilityConfiguration;
			} else if (key == IdIcon) {
				return ssIcon;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssName = (string) other.AttributeGet(IdName);
			ssKind = (string) other.AttributeGet(IdKind);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssSignatureHash = (string) other.AttributeGet(IdSignatureHash);
			ssJQueryVersion = (string) other.AttributeGet(IdJQueryVersion);
			ssApplicationKey = (string) other.AttributeGet(IdApplicationKey);
			ssRuntimeKind = (string) other.AttributeGet(IdRuntimeKind);
			ssExtensibilityConfiguration = (string) other.AttributeGet(IdExtensibilityConfiguration);
			ssIcon = (byte[]) other.AttributeGet(IdIcon);
		}
		public bool IsDefault() {
			STReferenceableModuleStructure defaultStruct = new STReferenceableModuleStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssSignatureHash != defaultStruct.ssSignatureHash) return false;
			if (this.ssJQueryVersion != defaultStruct.ssJQueryVersion) return false;
			if (this.ssApplicationKey != defaultStruct.ssApplicationKey) return false;
			if (this.ssRuntimeKind != defaultStruct.ssRuntimeKind) return false;
			if (this.ssExtensibilityConfiguration != defaultStruct.ssExtensibilityConfiguration) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssIcon, defaultStruct.ssIcon)) return false;
			return true;
		}
	} // STReferenceableModuleStructure

	/// <summary>
	/// Structure <code>STEspaceToPublishStructure</code> that represents the Service Studio structure
	///  <code>EspaceToPublish</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEspaceToPublishStructure: ISerializable, ITypedRecord<STEspaceToPublishStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdOml = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*B8OS0tmjvUSz+G00ourZnQ");
		internal static readonly GlobalObjectKey IdEspaceVersionId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_h46uLD2gUmiz0TVydaxfg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Oml")]
		public byte[] ssOml;

		[System.Xml.Serialization.XmlElement("EspaceVersionId")]
		public int ssEspaceVersionId;


		public BitArray OptimizedAttributes;

		public STEspaceToPublishStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssOml = new byte[] {};
			ssEspaceVersionId = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssOml = r.ReadBinaryData(index++, "EspaceToPublish.Oml", new byte[] {});
			ssEspaceVersionId = r.ReadEntityReference(index++, "EspaceToPublish.EspaceVersionId", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEspaceToPublishStructure r) {
			this = r;
		}


		public static bool operator == (STEspaceToPublishStructure a, STEspaceToPublishStructure b) {
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssOml, b.ssOml)) return false;
			if (a.ssEspaceVersionId != b.ssEspaceVersionId) return false;
			return true;
		}

		public static bool operator != (STEspaceToPublishStructure a, STEspaceToPublishStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEspaceToPublishStructure)) return false;
			return (this == (STEspaceToPublishStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssOml.GetHashCode()
				^ ssEspaceVersionId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEspaceToPublishStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssOml = new byte[] {};
			ssEspaceVersionId = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssOml", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOml' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOml = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspaceVersionId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceVersionId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceVersionId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STEspaceToPublishStructure Duplicate() {
			STEspaceToPublishStructure t;
			if (this.ssOml != null) {
				t.ssOml = (byte[]) this.ssOml.Clone();
			} else {
				t.ssOml = null;
			}
			t.ssEspaceVersionId = this.ssEspaceVersionId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Oml")) VarValue.AppendAttribute(recordElem, "Oml", ssOml, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Oml");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspaceVersionId")) VarValue.AppendAttribute(recordElem, "EspaceVersionId", ssEspaceVersionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EspaceVersionId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "oml") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Oml")) variable.Value = ssOml; else variable.Optimized = true;
			} else if (head == "espaceversionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceVersionId")) variable.Value = ssEspaceVersionId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdOml) {
				return ssOml;
			} else if (key == IdEspaceVersionId) {
				return ssEspaceVersionId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssOml = (byte[]) other.AttributeGet(IdOml);
			ssEspaceVersionId = (int) other.AttributeGet(IdEspaceVersionId);
		}
		public bool IsDefault() {
			STEspaceToPublishStructure defaultStruct = new STEspaceToPublishStructure(null);
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssOml, defaultStruct.ssOml)) return false;
			if (this.ssEspaceVersionId != defaultStruct.ssEspaceVersionId) return false;
			return true;
		}
	} // STEspaceToPublishStructure

	/// <summary>
	/// Structure <code>STEspacePublishOptionsStructure</code> that represents the Service Studio structure
	///  <code>EspacePublishOptions</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEspacePublishOptionsStructure: ISerializable, ITypedRecord<STEspacePublishOptionsStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdApplicationKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pAXUOtmnYUyxgZ5D+asDIw");
		internal static readonly GlobalObjectKey IdCatalogId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*N3_LLJF9lUq1ayPWRLDjBA");
		internal static readonly GlobalObjectKey IdReplaceExisting = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oBfEcrurBEi3Vams9zOtLg");
		internal static readonly GlobalObjectKey IdReuseTables = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*4tv2jVGolkeNFSIz1ybRVw");
		internal static readonly GlobalObjectKey IdCommitMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*_MxiXYbCmUiNKtemT0Xs5A");
		internal static readonly GlobalObjectKey IdCheckServerVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*oVw5no3Gu0maQv+Lryknng");
		internal static readonly GlobalObjectKey IdLastCheckedServerVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0dhpe6u6MEuwQFST1+FQgg");
		internal static readonly GlobalObjectKey IdAbortOnNewBrokenReferences = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*prId0cUPWk6Paq8fGo+inw");
		internal static readonly GlobalObjectKey IdLastCheckedBrokenReferences = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*TqRBSFal+UyiIv+GuqXlaw");
		internal static readonly GlobalObjectKey IdCompilerSettingsOverride = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zPJTVS9D1UOWYwlVR8iLFQ");
		internal static readonly GlobalObjectKey IdNativeBuildsEnabled = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zJqS7fsEjU+YPMOeA+r99w");
		internal static readonly GlobalObjectKey IdFromIDE = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Qi+tkAEMEUCGNZwCevO+tg");
		internal static readonly GlobalObjectKey IdPublishId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*cr3gv9BkIUS7YxfKd7efQg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ApplicationKey")]
		public string ssApplicationKey;

		[System.Xml.Serialization.XmlElement("CatalogId")]
		public int ssCatalogId;

		[System.Xml.Serialization.XmlElement("ReplaceExisting")]
		public bool ssReplaceExisting;

		[System.Xml.Serialization.XmlElement("ReuseTables")]
		public bool ssReuseTables;

		[System.Xml.Serialization.XmlElement("CommitMessage")]
		public string ssCommitMessage;

		[System.Xml.Serialization.XmlElement("CheckServerVersion")]
		public bool ssCheckServerVersion;

		[System.Xml.Serialization.XmlElement("LastCheckedServerVersion")]
		public int ssLastCheckedServerVersion;

		[System.Xml.Serialization.XmlElement("AbortOnNewBrokenReferences")]
		public bool ssAbortOnNewBrokenReferences;

		[System.Xml.Serialization.XmlElement("LastCheckedBrokenReferences")]
		public RLTextRecordList ssLastCheckedBrokenReferences;

		[System.Xml.Serialization.XmlElement("CompilerSettingsOverride")]
		public RLKeyValuePairRecordList ssCompilerSettingsOverride;

		[System.Xml.Serialization.XmlElement("NativeBuildsEnabled")]
		public bool ssNativeBuildsEnabled;

		[System.Xml.Serialization.XmlElement("FromIDE")]
		public bool ssFromIDE;

		[System.Xml.Serialization.XmlElement("PublishId")]
		public string ssPublishId;


		public BitArray OptimizedAttributes;

		public STEspacePublishOptionsStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssApplicationKey = "";
			ssCatalogId = 0;
			ssReplaceExisting = false;
			ssReuseTables = false;
			ssCommitMessage = "";
			ssCheckServerVersion = false;
			ssLastCheckedServerVersion = 0;
			ssAbortOnNewBrokenReferences = false;
			ssLastCheckedBrokenReferences = new RLTextRecordList();
			ssCompilerSettingsOverride = new RLKeyValuePairRecordList();
			ssNativeBuildsEnabled = false;
			ssFromIDE = false;
			ssPublishId = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssApplicationKey = r.ReadText(index++, "EspacePublishOptions.ApplicationKey", "");
			ssCatalogId = r.ReadEntityReference(index++, "EspacePublishOptions.CatalogId", 0);
			ssReplaceExisting = r.ReadBoolean(index++, "EspacePublishOptions.ReplaceExisting", false);
			ssReuseTables = r.ReadBoolean(index++, "EspacePublishOptions.ReuseTables", false);
			ssCommitMessage = r.ReadText(index++, "EspacePublishOptions.CommitMessage", "");
			ssCheckServerVersion = r.ReadBoolean(index++, "EspacePublishOptions.CheckServerVersion", false);
			ssLastCheckedServerVersion = r.ReadEntityReference(index++, "EspacePublishOptions.LastCheckedServerVersion", 0);
			ssAbortOnNewBrokenReferences = r.ReadBoolean(index++, "EspacePublishOptions.AbortOnNewBrokenReferences", false);
			ssNativeBuildsEnabled = r.ReadBoolean(index++, "EspacePublishOptions.NativeBuildsEnabled", false);
			ssFromIDE = r.ReadBoolean(index++, "EspacePublishOptions.FromIDE", false);
			ssPublishId = r.ReadText(index++, "EspacePublishOptions.PublishId", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEspacePublishOptionsStructure r) {
			this = r;
		}


		public static bool operator == (STEspacePublishOptionsStructure a, STEspacePublishOptionsStructure b) {
			if (a.ssApplicationKey != b.ssApplicationKey) return false;
			if (a.ssCatalogId != b.ssCatalogId) return false;
			if (a.ssReplaceExisting != b.ssReplaceExisting) return false;
			if (a.ssReuseTables != b.ssReuseTables) return false;
			if (a.ssCommitMessage != b.ssCommitMessage) return false;
			if (a.ssCheckServerVersion != b.ssCheckServerVersion) return false;
			if (a.ssLastCheckedServerVersion != b.ssLastCheckedServerVersion) return false;
			if (a.ssAbortOnNewBrokenReferences != b.ssAbortOnNewBrokenReferences) return false;
			if (a.ssLastCheckedBrokenReferences != b.ssLastCheckedBrokenReferences) return false;
			if (a.ssCompilerSettingsOverride != b.ssCompilerSettingsOverride) return false;
			if (a.ssNativeBuildsEnabled != b.ssNativeBuildsEnabled) return false;
			if (a.ssFromIDE != b.ssFromIDE) return false;
			if (a.ssPublishId != b.ssPublishId) return false;
			return true;
		}

		public static bool operator != (STEspacePublishOptionsStructure a, STEspacePublishOptionsStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEspacePublishOptionsStructure)) return false;
			return (this == (STEspacePublishOptionsStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssApplicationKey.GetHashCode()
				^ ssCatalogId.GetHashCode()
				^ ssReplaceExisting.GetHashCode()
				^ ssReuseTables.GetHashCode()
				^ ssCommitMessage.GetHashCode()
				^ ssCheckServerVersion.GetHashCode()
				^ ssLastCheckedServerVersion.GetHashCode()
				^ ssAbortOnNewBrokenReferences.GetHashCode()
				^ ssLastCheckedBrokenReferences.GetHashCode()
				^ ssCompilerSettingsOverride.GetHashCode()
				^ ssNativeBuildsEnabled.GetHashCode()
				^ ssFromIDE.GetHashCode()
				^ ssPublishId.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEspacePublishOptionsStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssApplicationKey = "";
			ssCatalogId = 0;
			ssReplaceExisting = false;
			ssReuseTables = false;
			ssCommitMessage = "";
			ssCheckServerVersion = false;
			ssLastCheckedServerVersion = 0;
			ssAbortOnNewBrokenReferences = false;
			ssLastCheckedBrokenReferences = new RLTextRecordList();
			ssCompilerSettingsOverride = new RLKeyValuePairRecordList();
			ssNativeBuildsEnabled = false;
			ssFromIDE = false;
			ssPublishId = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssApplicationKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssApplicationKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssApplicationKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCatalogId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCatalogId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCatalogId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReplaceExisting", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReplaceExisting' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReplaceExisting = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssReuseTables", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssReuseTables' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssReuseTables = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCommitMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCommitMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCommitMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCheckServerVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCheckServerVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCheckServerVersion = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLastCheckedServerVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLastCheckedServerVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLastCheckedServerVersion = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAbortOnNewBrokenReferences", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAbortOnNewBrokenReferences' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAbortOnNewBrokenReferences = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLastCheckedBrokenReferences", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLastCheckedBrokenReferences' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLastCheckedBrokenReferences = (RLTextRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCompilerSettingsOverride", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCompilerSettingsOverride' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCompilerSettingsOverride = (RLKeyValuePairRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNativeBuildsEnabled", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNativeBuildsEnabled' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNativeBuildsEnabled = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFromIDE", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFromIDE' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFromIDE = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPublishId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPublishId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPublishId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssLastCheckedBrokenReferences.RecursiveReset();
			ssCompilerSettingsOverride.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssLastCheckedBrokenReferences.InternalRecursiveSave();
			ssCompilerSettingsOverride.InternalRecursiveSave();
		}


		public STEspacePublishOptionsStructure Duplicate() {
			STEspacePublishOptionsStructure t;
			t.ssApplicationKey = this.ssApplicationKey;
			t.ssCatalogId = this.ssCatalogId;
			t.ssReplaceExisting = this.ssReplaceExisting;
			t.ssReuseTables = this.ssReuseTables;
			t.ssCommitMessage = this.ssCommitMessage;
			t.ssCheckServerVersion = this.ssCheckServerVersion;
			t.ssLastCheckedServerVersion = this.ssLastCheckedServerVersion;
			t.ssAbortOnNewBrokenReferences = this.ssAbortOnNewBrokenReferences;
			t.ssLastCheckedBrokenReferences = (RLTextRecordList) this.ssLastCheckedBrokenReferences.Duplicate();
			t.ssCompilerSettingsOverride = (RLKeyValuePairRecordList) this.ssCompilerSettingsOverride.Duplicate();
			t.ssNativeBuildsEnabled = this.ssNativeBuildsEnabled;
			t.ssFromIDE = this.ssFromIDE;
			t.ssPublishId = this.ssPublishId;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKey")) VarValue.AppendAttribute(recordElem, "ApplicationKey", ssApplicationKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CatalogId")) VarValue.AppendAttribute(recordElem, "CatalogId", ssCatalogId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CatalogId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReplaceExisting")) VarValue.AppendAttribute(recordElem, "ReplaceExisting", ssReplaceExisting, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ReplaceExisting");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ReuseTables")) VarValue.AppendAttribute(recordElem, "ReuseTables", ssReuseTables, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ReuseTables");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CommitMessage")) VarValue.AppendAttribute(recordElem, "CommitMessage", ssCommitMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CommitMessage");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CheckServerVersion")) VarValue.AppendAttribute(recordElem, "CheckServerVersion", ssCheckServerVersion, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "CheckServerVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastCheckedServerVersion")) VarValue.AppendAttribute(recordElem, "LastCheckedServerVersion", ssLastCheckedServerVersion, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastCheckedServerVersion");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AbortOnNewBrokenReferences")) VarValue.AppendAttribute(recordElem, "AbortOnNewBrokenReferences", ssAbortOnNewBrokenReferences, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "AbortOnNewBrokenReferences");
				ssLastCheckedBrokenReferences.ToXml(this, recordElem, "LastCheckedBrokenReferences", detailLevel - 1);
				ssCompilerSettingsOverride.ToXml(this, recordElem, "CompilerSettingsOverride", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NativeBuildsEnabled")) VarValue.AppendAttribute(recordElem, "NativeBuildsEnabled", ssNativeBuildsEnabled, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "NativeBuildsEnabled");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FromIDE")) VarValue.AppendAttribute(recordElem, "FromIDE", ssFromIDE, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "FromIDE");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PublishId")) VarValue.AppendAttribute(recordElem, "PublishId", ssPublishId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PublishId");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "applicationkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKey")) variable.Value = ssApplicationKey; else variable.Optimized = true;
			} else if (head == "catalogid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CatalogId")) variable.Value = ssCatalogId; else variable.Optimized = true;
			} else if (head == "replaceexisting") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReplaceExisting")) variable.Value = ssReplaceExisting; else variable.Optimized = true;
			} else if (head == "reusetables") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ReuseTables")) variable.Value = ssReuseTables; else variable.Optimized = true;
			} else if (head == "commitmessage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CommitMessage")) variable.Value = ssCommitMessage; else variable.Optimized = true;
			} else if (head == "checkserverversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CheckServerVersion")) variable.Value = ssCheckServerVersion; else variable.Optimized = true;
			} else if (head == "lastcheckedserverversion") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastCheckedServerVersion")) variable.Value = ssLastCheckedServerVersion; else variable.Optimized = true;
			} else if (head == "abortonnewbrokenreferences") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AbortOnNewBrokenReferences")) variable.Value = ssAbortOnNewBrokenReferences; else variable.Optimized = true;
			} else if (head == "lastcheckedbrokenreferences") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastCheckedBrokenReferences")) variable.Value = ssLastCheckedBrokenReferences; else variable.Optimized = true;
				variable.SetFieldName("lastcheckedbrokenreferences");
			} else if (head == "compilersettingsoverride") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompilerSettingsOverride")) variable.Value = ssCompilerSettingsOverride; else variable.Optimized = true;
				variable.SetFieldName("compilersettingsoverride");
			} else if (head == "nativebuildsenabled") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NativeBuildsEnabled")) variable.Value = ssNativeBuildsEnabled; else variable.Optimized = true;
			} else if (head == "fromide") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FromIDE")) variable.Value = ssFromIDE; else variable.Optimized = true;
			} else if (head == "publishid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PublishId")) variable.Value = ssPublishId; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdApplicationKey) {
				return ssApplicationKey;
			} else if (key == IdCatalogId) {
				return ssCatalogId;
			} else if (key == IdReplaceExisting) {
				return ssReplaceExisting;
			} else if (key == IdReuseTables) {
				return ssReuseTables;
			} else if (key == IdCommitMessage) {
				return ssCommitMessage;
			} else if (key == IdCheckServerVersion) {
				return ssCheckServerVersion;
			} else if (key == IdLastCheckedServerVersion) {
				return ssLastCheckedServerVersion;
			} else if (key == IdAbortOnNewBrokenReferences) {
				return ssAbortOnNewBrokenReferences;
			} else if (key == IdLastCheckedBrokenReferences) {
				return ssLastCheckedBrokenReferences;
			} else if (key == IdCompilerSettingsOverride) {
				return ssCompilerSettingsOverride;
			} else if (key == IdNativeBuildsEnabled) {
				return ssNativeBuildsEnabled;
			} else if (key == IdFromIDE) {
				return ssFromIDE;
			} else if (key == IdPublishId) {
				return ssPublishId;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssApplicationKey = (string) other.AttributeGet(IdApplicationKey);
			ssCatalogId = (int) other.AttributeGet(IdCatalogId);
			ssReplaceExisting = (bool) other.AttributeGet(IdReplaceExisting);
			ssReuseTables = (bool) other.AttributeGet(IdReuseTables);
			ssCommitMessage = (string) other.AttributeGet(IdCommitMessage);
			ssCheckServerVersion = (bool) other.AttributeGet(IdCheckServerVersion);
			ssLastCheckedServerVersion = (int) other.AttributeGet(IdLastCheckedServerVersion);
			ssAbortOnNewBrokenReferences = (bool) other.AttributeGet(IdAbortOnNewBrokenReferences);
			ssLastCheckedBrokenReferences = new RLTextRecordList();
			ssLastCheckedBrokenReferences.FillFromOther((IOSList) other.AttributeGet(IdLastCheckedBrokenReferences));
			ssCompilerSettingsOverride = new RLKeyValuePairRecordList();
			ssCompilerSettingsOverride.FillFromOther((IOSList) other.AttributeGet(IdCompilerSettingsOverride));
			ssNativeBuildsEnabled = (bool) other.AttributeGet(IdNativeBuildsEnabled);
			ssFromIDE = (bool) other.AttributeGet(IdFromIDE);
			ssPublishId = (string) other.AttributeGet(IdPublishId);
		}
		public bool IsDefault() {
			STEspacePublishOptionsStructure defaultStruct = new STEspacePublishOptionsStructure(null);
			if (this.ssApplicationKey != defaultStruct.ssApplicationKey) return false;
			if (this.ssCatalogId != defaultStruct.ssCatalogId) return false;
			if (this.ssReplaceExisting != defaultStruct.ssReplaceExisting) return false;
			if (this.ssReuseTables != defaultStruct.ssReuseTables) return false;
			if (this.ssCommitMessage != defaultStruct.ssCommitMessage) return false;
			if (this.ssCheckServerVersion != defaultStruct.ssCheckServerVersion) return false;
			if (this.ssLastCheckedServerVersion != defaultStruct.ssLastCheckedServerVersion) return false;
			if (this.ssAbortOnNewBrokenReferences != defaultStruct.ssAbortOnNewBrokenReferences) return false;
			if (this.ssLastCheckedBrokenReferences != null && this.ssLastCheckedBrokenReferences.Length != 0) return false;
			if (this.ssCompilerSettingsOverride != null && this.ssCompilerSettingsOverride.Length != 0) return false;
			if (this.ssNativeBuildsEnabled != defaultStruct.ssNativeBuildsEnabled) return false;
			if (this.ssFromIDE != defaultStruct.ssFromIDE) return false;
			if (this.ssPublishId != defaultStruct.ssPublishId) return false;
			return true;
		}
	} // STEspacePublishOptionsStructure

	/// <summary>
	/// Structure <code>STEspacePublishAsyncResultStructure</code> that represents the Service Studio
	///  structure <code>EspacePublishAsyncResult</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEspacePublishAsyncResultStructure: ISerializable, ITypedRecord<STEspacePublishAsyncResultStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdPublishId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Rxal9mpp0ke0u4Ul+OzhJA");
		internal static readonly GlobalObjectKey IdHasErrors = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*I2pF7fXR+EC6aeEx9MJRcg");
		internal static readonly GlobalObjectKey IdMessages = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*XpRM1ZQ+Z0mWrQ2R5IoXIw");
		internal static readonly GlobalObjectKey IdEspaceId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qeyubdXoqEaSKIevxX2qMw");
		internal static readonly GlobalObjectKey IdEspaceVersionId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Dmdd+0Q+tEC7Qk7hxeczew");
		internal static readonly GlobalObjectKey IdVersionComparison = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wSqcrqgr8EGEB8hsH7Rlkw");
		internal static readonly GlobalObjectKey IdNeedsCatalog = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*kJo1_rywtkmBAnXhhtSo7w");
		internal static readonly GlobalObjectKey IdNeedsReplace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZC5cMPb6Eka7OQXvb_bQXQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("PublishId")]
		public string ssPublishId;

		[System.Xml.Serialization.XmlElement("HasErrors")]
		public bool ssHasErrors;

		[System.Xml.Serialization.XmlElement("Messages")]
		public RLHEMessageRecordList ssMessages;

		[System.Xml.Serialization.XmlElement("EspaceId")]
		public int ssEspaceId;

		[System.Xml.Serialization.XmlElement("EspaceVersionId")]
		public int ssEspaceVersionId;

		[System.Xml.Serialization.XmlElement("VersionComparison")]
		public RCVersionComparisonRecord ssVersionComparison;

		[System.Xml.Serialization.XmlElement("NeedsCatalog")]
		public bool ssNeedsCatalog;

		[System.Xml.Serialization.XmlElement("NeedsReplace")]
		public bool ssNeedsReplace;


		public BitArray OptimizedAttributes;

		public STEspacePublishAsyncResultStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssPublishId = "";
			ssHasErrors = false;
			ssMessages = new RLHEMessageRecordList();
			ssEspaceId = 0;
			ssEspaceVersionId = 0;
			ssVersionComparison = new RCVersionComparisonRecord(null);
			ssNeedsCatalog = false;
			ssNeedsReplace = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssVersionComparison.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssPublishId = r.ReadText(index++, "EspacePublishAsyncResult.PublishId", "");
			ssHasErrors = r.ReadBoolean(index++, "EspacePublishAsyncResult.HasErrors", false);
			ssEspaceId = r.ReadEntityReference(index++, "EspacePublishAsyncResult.EspaceId", 0);
			ssEspaceVersionId = r.ReadEntityReference(index++, "EspacePublishAsyncResult.EspaceVersionId", 0);
			ssNeedsCatalog = r.ReadBoolean(index++, "EspacePublishAsyncResult.NeedsCatalog", false);
			ssNeedsReplace = r.ReadBoolean(index++, "EspacePublishAsyncResult.NeedsReplace", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEspacePublishAsyncResultStructure r) {
			this = r;
		}


		public static bool operator == (STEspacePublishAsyncResultStructure a, STEspacePublishAsyncResultStructure b) {
			if (a.ssPublishId != b.ssPublishId) return false;
			if (a.ssHasErrors != b.ssHasErrors) return false;
			if (a.ssMessages != b.ssMessages) return false;
			if (a.ssEspaceId != b.ssEspaceId) return false;
			if (a.ssEspaceVersionId != b.ssEspaceVersionId) return false;
			if (a.ssVersionComparison != b.ssVersionComparison) return false;
			if (a.ssNeedsCatalog != b.ssNeedsCatalog) return false;
			if (a.ssNeedsReplace != b.ssNeedsReplace) return false;
			return true;
		}

		public static bool operator != (STEspacePublishAsyncResultStructure a, STEspacePublishAsyncResultStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEspacePublishAsyncResultStructure)) return false;
			return (this == (STEspacePublishAsyncResultStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssPublishId.GetHashCode()
				^ ssHasErrors.GetHashCode()
				^ ssMessages.GetHashCode()
				^ ssEspaceId.GetHashCode()
				^ ssEspaceVersionId.GetHashCode()
				^ ssVersionComparison.GetHashCode()
				^ ssNeedsCatalog.GetHashCode()
				^ ssNeedsReplace.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEspacePublishAsyncResultStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssPublishId = "";
			ssHasErrors = false;
			ssMessages = new RLHEMessageRecordList();
			ssEspaceId = 0;
			ssEspaceVersionId = 0;
			ssVersionComparison = new RCVersionComparisonRecord(null);
			ssNeedsCatalog = false;
			ssNeedsReplace = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssPublishId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPublishId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPublishId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHasErrors", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHasErrors' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHasErrors = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessages", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessages' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessages = (RLHEMessageRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspaceId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspaceVersionId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceVersionId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceVersionId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersionComparison", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersionComparison' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersionComparison = (RCVersionComparisonRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNeedsCatalog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNeedsCatalog' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNeedsCatalog = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNeedsReplace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNeedsReplace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNeedsReplace = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssMessages.RecursiveReset();
			ssVersionComparison.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssMessages.InternalRecursiveSave();
			ssVersionComparison.InternalRecursiveSave();
		}


		public STEspacePublishAsyncResultStructure Duplicate() {
			STEspacePublishAsyncResultStructure t;
			t.ssPublishId = this.ssPublishId;
			t.ssHasErrors = this.ssHasErrors;
			t.ssMessages = (RLHEMessageRecordList) this.ssMessages.Duplicate();
			t.ssEspaceId = this.ssEspaceId;
			t.ssEspaceVersionId = this.ssEspaceVersionId;
			t.ssVersionComparison = (RCVersionComparisonRecord) this.ssVersionComparison.Duplicate();
			t.ssNeedsCatalog = this.ssNeedsCatalog;
			t.ssNeedsReplace = this.ssNeedsReplace;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PublishId")) VarValue.AppendAttribute(recordElem, "PublishId", ssPublishId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PublishId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasErrors")) VarValue.AppendAttribute(recordElem, "HasErrors", ssHasErrors, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasErrors");
				ssMessages.ToXml(this, recordElem, "Messages", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspaceId")) VarValue.AppendAttribute(recordElem, "EspaceId", ssEspaceId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EspaceId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspaceVersionId")) VarValue.AppendAttribute(recordElem, "EspaceVersionId", ssEspaceVersionId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EspaceVersionId");
				ssVersionComparison.ToXml(this, recordElem, "VersionComparison", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NeedsCatalog")) VarValue.AppendAttribute(recordElem, "NeedsCatalog", ssNeedsCatalog, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "NeedsCatalog");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NeedsReplace")) VarValue.AppendAttribute(recordElem, "NeedsReplace", ssNeedsReplace, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "NeedsReplace");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "publishid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PublishId")) variable.Value = ssPublishId; else variable.Optimized = true;
			} else if (head == "haserrors") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasErrors")) variable.Value = ssHasErrors; else variable.Optimized = true;
			} else if (head == "messages") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Messages")) variable.Value = ssMessages; else variable.Optimized = true;
				variable.SetFieldName("messages");
			} else if (head == "espaceid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceId")) variable.Value = ssEspaceId; else variable.Optimized = true;
			} else if (head == "espaceversionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceVersionId")) variable.Value = ssEspaceVersionId; else variable.Optimized = true;
			} else if (head == "versioncomparison") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VersionComparison")) variable.Value = ssVersionComparison; else variable.Optimized = true;
				variable.SetFieldName("versioncomparison");
			} else if (head == "needscatalog") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NeedsCatalog")) variable.Value = ssNeedsCatalog; else variable.Optimized = true;
			} else if (head == "needsreplace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NeedsReplace")) variable.Value = ssNeedsReplace; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdPublishId) {
				return ssPublishId;
			} else if (key == IdHasErrors) {
				return ssHasErrors;
			} else if (key == IdMessages) {
				return ssMessages;
			} else if (key == IdEspaceId) {
				return ssEspaceId;
			} else if (key == IdEspaceVersionId) {
				return ssEspaceVersionId;
			} else if (key == IdVersionComparison) {
				return ssVersionComparison;
			} else if (key == IdNeedsCatalog) {
				return ssNeedsCatalog;
			} else if (key == IdNeedsReplace) {
				return ssNeedsReplace;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssPublishId = (string) other.AttributeGet(IdPublishId);
			ssHasErrors = (bool) other.AttributeGet(IdHasErrors);
			ssMessages = new RLHEMessageRecordList();
			ssMessages.FillFromOther((IOSList) other.AttributeGet(IdMessages));
			ssEspaceId = (int) other.AttributeGet(IdEspaceId);
			ssEspaceVersionId = (int) other.AttributeGet(IdEspaceVersionId);
			ssVersionComparison.FillFromOther((IRecord) other.AttributeGet(IdVersionComparison));
			ssNeedsCatalog = (bool) other.AttributeGet(IdNeedsCatalog);
			ssNeedsReplace = (bool) other.AttributeGet(IdNeedsReplace);
		}
		public bool IsDefault() {
			STEspacePublishAsyncResultStructure defaultStruct = new STEspacePublishAsyncResultStructure(null);
			if (this.ssPublishId != defaultStruct.ssPublishId) return false;
			if (this.ssHasErrors != defaultStruct.ssHasErrors) return false;
			if (this.ssMessages != null && this.ssMessages.Length != 0) return false;
			if (this.ssEspaceId != defaultStruct.ssEspaceId) return false;
			if (this.ssEspaceVersionId != defaultStruct.ssEspaceVersionId) return false;
			if (this.ssVersionComparison != defaultStruct.ssVersionComparison) return false;
			if (this.ssNeedsCatalog != defaultStruct.ssNeedsCatalog) return false;
			if (this.ssNeedsReplace != defaultStruct.ssNeedsReplace) return false;
			return true;
		}
	} // STEspacePublishAsyncResultStructure

	/// <summary>
	/// Structure <code>STEnvironmentInfoStructure</code> that represents the Service Studio structure
	///  <code>EnvironmentInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STEnvironmentInfoStructure: ISerializable, ITypedRecord<STEnvironmentInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*c6YMpkCWWUqtHecLhW8I9w");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3HTYSL2UokygOdz11R8VZg");
		internal static readonly GlobalObjectKey IdVersion = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Vp8RRT5M9kONwh0OE7i34g");
		internal static readonly GlobalObjectKey IdFeatures = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*yxOegtzhik26c5UpSXfw2g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Version")]
		public string ssVersion;

		[System.Xml.Serialization.XmlElement("Features")]
		public RLFeatureInfoRecordList ssFeatures;


		public BitArray OptimizedAttributes;

		public STEnvironmentInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssVersion = "";
			ssFeatures = new RLFeatureInfoRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "EnvironmentInfo.Name", "");
			ssKey = r.ReadText(index++, "EnvironmentInfo.Key", "");
			ssVersion = r.ReadText(index++, "EnvironmentInfo.Version", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STEnvironmentInfoStructure r) {
			this = r;
		}


		public static bool operator == (STEnvironmentInfoStructure a, STEnvironmentInfoStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssVersion != b.ssVersion) return false;
			if (a.ssFeatures != b.ssFeatures) return false;
			return true;
		}

		public static bool operator != (STEnvironmentInfoStructure a, STEnvironmentInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STEnvironmentInfoStructure)) return false;
			return (this == (STEnvironmentInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssVersion.GetHashCode()
				^ ssFeatures.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STEnvironmentInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssVersion = "";
			ssFeatures = new RLFeatureInfoRecordList();
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersion' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersion = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFeatures", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFeatures' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFeatures = (RLFeatureInfoRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssFeatures.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssFeatures.InternalRecursiveSave();
		}


		public STEnvironmentInfoStructure Duplicate() {
			STEnvironmentInfoStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssVersion = this.ssVersion;
			t.ssFeatures = (RLFeatureInfoRecordList) this.ssFeatures.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Version")) VarValue.AppendAttribute(recordElem, "Version", ssVersion, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Version");
				ssFeatures.ToXml(this, recordElem, "Features", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Version")) variable.Value = ssVersion; else variable.Optimized = true;
			} else if (head == "features") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Features")) variable.Value = ssFeatures; else variable.Optimized = true;
				variable.SetFieldName("features");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdVersion) {
				return ssVersion;
			} else if (key == IdFeatures) {
				return ssFeatures;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssVersion = (string) other.AttributeGet(IdVersion);
			ssFeatures = new RLFeatureInfoRecordList();
			ssFeatures.FillFromOther((IOSList) other.AttributeGet(IdFeatures));
		}
		public bool IsDefault() {
			STEnvironmentInfoStructure defaultStruct = new STEnvironmentInfoStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssVersion != defaultStruct.ssVersion) return false;
			if (this.ssFeatures != null && this.ssFeatures.Length != 0) return false;
			return true;
		}
	} // STEnvironmentInfoStructure

	/// <summary>
	/// Structure <code>STFeatureInfoStructure</code> that represents the Service Studio structure
	///  <code>FeatureInfo</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STFeatureInfoStructure: ISerializable, ITypedRecord<STFeatureInfoStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*r5FaxYwN9EqlCOS23EmaHw");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*I5cmxIRhxkyPwTdtqTfbQQ");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rdqXmn5pwkWBIb4stCnolQ");
		internal static readonly GlobalObjectKey IdStatus = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Nso2XtF2cEiHeiUTYAR5Tg");
		internal static readonly GlobalObjectKey IdEnabled = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*wDbwaxe_O02I8OsVxneOQQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public string ssId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("Status")]
		public string ssStatus;

		[System.Xml.Serialization.XmlElement("Enabled")]
		public bool ssEnabled;


		public BitArray OptimizedAttributes;

		public STFeatureInfoStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = "";
			ssName = "";
			ssDescription = "";
			ssStatus = "";
			ssEnabled = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "FeatureInfo.Id", "");
			ssName = r.ReadText(index++, "FeatureInfo.Name", "");
			ssDescription = r.ReadText(index++, "FeatureInfo.Description", "");
			ssStatus = r.ReadText(index++, "FeatureInfo.Status", "");
			ssEnabled = r.ReadBoolean(index++, "FeatureInfo.Enabled", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STFeatureInfoStructure r) {
			this = r;
		}


		public static bool operator == (STFeatureInfoStructure a, STFeatureInfoStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssStatus != b.ssStatus) return false;
			if (a.ssEnabled != b.ssEnabled) return false;
			return true;
		}

		public static bool operator != (STFeatureInfoStructure a, STFeatureInfoStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STFeatureInfoStructure)) return false;
			return (this == (STFeatureInfoStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssStatus.GetHashCode()
				^ ssEnabled.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STFeatureInfoStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = "";
			ssName = "";
			ssDescription = "";
			ssStatus = "";
			ssEnabled = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStatus", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStatus' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStatus = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEnabled", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEnabled' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEnabled = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STFeatureInfoStructure Duplicate() {
			STFeatureInfoStructure t;
			t.ssId = this.ssId;
			t.ssName = this.ssName;
			t.ssDescription = this.ssDescription;
			t.ssStatus = this.ssStatus;
			t.ssEnabled = this.ssEnabled;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Status")) VarValue.AppendAttribute(recordElem, "Status", ssStatus, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Enabled")) VarValue.AppendAttribute(recordElem, "Enabled", ssEnabled, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Enabled");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Status")) variable.Value = ssStatus; else variable.Optimized = true;
			} else if (head == "enabled") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Enabled")) variable.Value = ssEnabled; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdStatus) {
				return ssStatus;
			} else if (key == IdEnabled) {
				return ssEnabled;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssStatus = (string) other.AttributeGet(IdStatus);
			ssEnabled = (bool) other.AttributeGet(IdEnabled);
		}
		public bool IsDefault() {
			STFeatureInfoStructure defaultStruct = new STFeatureInfoStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssStatus != defaultStruct.ssStatus) return false;
			if (this.ssEnabled != defaultStruct.ssEnabled) return false;
			return true;
		}
	} // STFeatureInfoStructure

	/// <summary>
	/// Structure <code>STPublicElementStructure</code> that represents the Service Studio structure
	///  <code>PublicElement</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STPublicElementStructure: ISerializable, ITypedRecord<STPublicElementStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*S34TP7W5AUe6hS8BBkeFUw");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3oMOp8FFEUK5bZ8rjL579A");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*eJmwUtmf+UeMLSLP1XfSfA");
		internal static readonly GlobalObjectKey IdProducerName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*l4I4ZWIatEyaW9mwrmAEIQ");
		internal static readonly GlobalObjectKey IdProducerKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*2I0xOTsQg0yOHnhZd4Igtg");
		internal static readonly GlobalObjectKey IdProducerKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*83ezVjvQWk20upxo_hD48A");
		internal static readonly GlobalObjectKey IdPublishedProdVersionId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*xA0kogfAdkaQ66sJ+fsskg");
		internal static readonly GlobalObjectKey IdCompatibilitySignatureHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*TyTuy8A62k6QIpKZW9G4wQ");
		internal static readonly GlobalObjectKey IdFullSignatureHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*v1lAqFG34kCk2p2HiyEPYA");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*MmimmFReT0iJzyzKtsmhgg");
		internal static readonly GlobalObjectKey IdEspaceKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UFsTEY8i_0uwdQyqMsIY5w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("ProducerName")]
		public string ssProducerName;

		[System.Xml.Serialization.XmlElement("ProducerKind")]
		public string ssProducerKind;

		[System.Xml.Serialization.XmlElement("ProducerKey")]
		public string ssProducerKey;

		[System.Xml.Serialization.XmlElement("PublishedProdVersionId")]
		public int ssPublishedProdVersionId;

		[System.Xml.Serialization.XmlElement("CompatibilitySignatureHash")]
		public string ssCompatibilitySignatureHash;

		[System.Xml.Serialization.XmlElement("FullSignatureHash")]
		public string ssFullSignatureHash;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("EspaceKind")]
		public string ssEspaceKind;


		public BitArray OptimizedAttributes;

		public STPublicElementStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKind = "";
			ssKey = "";
			ssProducerName = "";
			ssProducerKind = "";
			ssProducerKey = "";
			ssPublishedProdVersionId = 0;
			ssCompatibilitySignatureHash = "";
			ssFullSignatureHash = "";
			ssDescription = "";
			ssEspaceKind = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "PublicElement.Name", "");
			ssKind = r.ReadText(index++, "PublicElement.Kind", "");
			ssKey = r.ReadText(index++, "PublicElement.Key", "");
			ssProducerName = r.ReadText(index++, "PublicElement.ProducerName", "");
			ssProducerKind = r.ReadText(index++, "PublicElement.ProducerKind", "");
			ssProducerKey = r.ReadText(index++, "PublicElement.ProducerKey", "");
			ssPublishedProdVersionId = r.ReadInteger(index++, "PublicElement.PublishedProdVersionId", 0);
			ssCompatibilitySignatureHash = r.ReadText(index++, "PublicElement.CompatibilitySignatureHash", "");
			ssFullSignatureHash = r.ReadText(index++, "PublicElement.FullSignatureHash", "");
			ssDescription = r.ReadText(index++, "PublicElement.Description", "");
			ssEspaceKind = r.ReadText(index++, "PublicElement.EspaceKind", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STPublicElementStructure r) {
			this = r;
		}


		public static bool operator == (STPublicElementStructure a, STPublicElementStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssProducerName != b.ssProducerName) return false;
			if (a.ssProducerKind != b.ssProducerKind) return false;
			if (a.ssProducerKey != b.ssProducerKey) return false;
			if (a.ssPublishedProdVersionId != b.ssPublishedProdVersionId) return false;
			if (a.ssCompatibilitySignatureHash != b.ssCompatibilitySignatureHash) return false;
			if (a.ssFullSignatureHash != b.ssFullSignatureHash) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssEspaceKind != b.ssEspaceKind) return false;
			return true;
		}

		public static bool operator != (STPublicElementStructure a, STPublicElementStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STPublicElementStructure)) return false;
			return (this == (STPublicElementStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssProducerName.GetHashCode()
				^ ssProducerKind.GetHashCode()
				^ ssProducerKey.GetHashCode()
				^ ssPublishedProdVersionId.GetHashCode()
				^ ssCompatibilitySignatureHash.GetHashCode()
				^ ssFullSignatureHash.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssEspaceKind.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STPublicElementStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKind = "";
			ssKey = "";
			ssProducerName = "";
			ssProducerKind = "";
			ssProducerKey = "";
			ssPublishedProdVersionId = 0;
			ssCompatibilitySignatureHash = "";
			ssFullSignatureHash = "";
			ssDescription = "";
			ssEspaceKind = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProducerName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProducerName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProducerName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProducerKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProducerKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProducerKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProducerKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProducerKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProducerKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPublishedProdVersionId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPublishedProdVersionId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPublishedProdVersionId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCompatibilitySignatureHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCompatibilitySignatureHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCompatibilitySignatureHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFullSignatureHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFullSignatureHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFullSignatureHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEspaceKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEspaceKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEspaceKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STPublicElementStructure Duplicate() {
			STPublicElementStructure t;
			t.ssName = this.ssName;
			t.ssKind = this.ssKind;
			t.ssKey = this.ssKey;
			t.ssProducerName = this.ssProducerName;
			t.ssProducerKind = this.ssProducerKind;
			t.ssProducerKey = this.ssProducerKey;
			t.ssPublishedProdVersionId = this.ssPublishedProdVersionId;
			t.ssCompatibilitySignatureHash = this.ssCompatibilitySignatureHash;
			t.ssFullSignatureHash = this.ssFullSignatureHash;
			t.ssDescription = this.ssDescription;
			t.ssEspaceKind = this.ssEspaceKind;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProducerName")) VarValue.AppendAttribute(recordElem, "ProducerName", ssProducerName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProducerName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProducerKind")) VarValue.AppendAttribute(recordElem, "ProducerKind", ssProducerKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProducerKind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ProducerKey")) VarValue.AppendAttribute(recordElem, "ProducerKey", ssProducerKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ProducerKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PublishedProdVersionId")) VarValue.AppendAttribute(recordElem, "PublishedProdVersionId", ssPublishedProdVersionId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "PublishedProdVersionId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CompatibilitySignatureHash")) VarValue.AppendAttribute(recordElem, "CompatibilitySignatureHash", ssCompatibilitySignatureHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "CompatibilitySignatureHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FullSignatureHash")) VarValue.AppendAttribute(recordElem, "FullSignatureHash", ssFullSignatureHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FullSignatureHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EspaceKind")) VarValue.AppendAttribute(recordElem, "EspaceKind", ssEspaceKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EspaceKind");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "producername") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProducerName")) variable.Value = ssProducerName; else variable.Optimized = true;
			} else if (head == "producerkind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProducerKind")) variable.Value = ssProducerKind; else variable.Optimized = true;
			} else if (head == "producerkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ProducerKey")) variable.Value = ssProducerKey; else variable.Optimized = true;
			} else if (head == "publishedprodversionid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PublishedProdVersionId")) variable.Value = ssPublishedProdVersionId; else variable.Optimized = true;
			} else if (head == "compatibilitysignaturehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CompatibilitySignatureHash")) variable.Value = ssCompatibilitySignatureHash; else variable.Optimized = true;
			} else if (head == "fullsignaturehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FullSignatureHash")) variable.Value = ssFullSignatureHash; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "espacekind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EspaceKind")) variable.Value = ssEspaceKind; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdProducerName) {
				return ssProducerName;
			} else if (key == IdProducerKind) {
				return ssProducerKind;
			} else if (key == IdProducerKey) {
				return ssProducerKey;
			} else if (key == IdPublishedProdVersionId) {
				return ssPublishedProdVersionId;
			} else if (key == IdCompatibilitySignatureHash) {
				return ssCompatibilitySignatureHash;
			} else if (key == IdFullSignatureHash) {
				return ssFullSignatureHash;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdEspaceKind) {
				return ssEspaceKind;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKind = (string) other.AttributeGet(IdKind);
			ssKey = (string) other.AttributeGet(IdKey);
			ssProducerName = (string) other.AttributeGet(IdProducerName);
			ssProducerKind = (string) other.AttributeGet(IdProducerKind);
			ssProducerKey = (string) other.AttributeGet(IdProducerKey);
			ssPublishedProdVersionId = (int) other.AttributeGet(IdPublishedProdVersionId);
			ssCompatibilitySignatureHash = (string) other.AttributeGet(IdCompatibilitySignatureHash);
			ssFullSignatureHash = (string) other.AttributeGet(IdFullSignatureHash);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssEspaceKind = (string) other.AttributeGet(IdEspaceKind);
		}
		public bool IsDefault() {
			STPublicElementStructure defaultStruct = new STPublicElementStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssProducerName != defaultStruct.ssProducerName) return false;
			if (this.ssProducerKind != defaultStruct.ssProducerKind) return false;
			if (this.ssProducerKey != defaultStruct.ssProducerKey) return false;
			if (this.ssPublishedProdVersionId != defaultStruct.ssPublishedProdVersionId) return false;
			if (this.ssCompatibilitySignatureHash != defaultStruct.ssCompatibilitySignatureHash) return false;
			if (this.ssFullSignatureHash != defaultStruct.ssFullSignatureHash) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssEspaceKind != defaultStruct.ssEspaceKind) return false;
			return true;
		}
	} // STPublicElementStructure

	/// <summary>
	/// Structure <code>STModuleVersionFeatureStructure</code> that represents the Service Studio structure
	///  <code>ModuleVersionFeature</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STModuleVersionFeatureStructure: ISerializable, ITypedRecord<STModuleVersionFeatureStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AKxGPrRow0+q3QOnQc+04w");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*d5pIvrIQYECz0F09Bwp1jQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public string ssId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;


		public BitArray OptimizedAttributes;

		public STModuleVersionFeatureStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = "";
			ssName = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadText(index++, "ModuleVersionFeature.Id", "");
			ssName = r.ReadText(index++, "ModuleVersionFeature.Name", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STModuleVersionFeatureStructure r) {
			this = r;
		}


		public static bool operator == (STModuleVersionFeatureStructure a, STModuleVersionFeatureStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			return true;
		}

		public static bool operator != (STModuleVersionFeatureStructure a, STModuleVersionFeatureStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STModuleVersionFeatureStructure)) return false;
			return (this == (STModuleVersionFeatureStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STModuleVersionFeatureStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = "";
			ssName = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STModuleVersionFeatureStructure Duplicate() {
			STModuleVersionFeatureStructure t;
			t.ssId = this.ssId;
			t.ssName = this.ssName;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (string) other.AttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
		}
		public bool IsDefault() {
			STModuleVersionFeatureStructure defaultStruct = new STModuleVersionFeatureStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			return true;
		}
	} // STModuleVersionFeatureStructure

	/// <summary>
	/// Structure <code>STExtensionEntityConfigStructure</code> that represents the Service Studio
	///  structure <code>ExtensionEntityConfig</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STExtensionEntityConfigStructure: ISerializable, ITypedRecord<STExtensionEntityConfigStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rWKOoc2bXEib02Y4MofLUg");
		internal static readonly GlobalObjectKey IdEntityId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*e1K78Q8JGk+jBo4kT9xJ_w");
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*W55MB1mrcEuee_wi9Q8hpw");
		internal static readonly GlobalObjectKey IdEffectivePhysicalTableName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Mg2YB2DqS02baq80fjK8RA");
		internal static readonly GlobalObjectKey IdDefaultPhysicalTableName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ImLEYqvnbUSJN4qqukNYFQ");
		internal static readonly GlobalObjectKey IdIsPhysicalTableNameOverridden = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WS5zB7s+V0+xTx16xaR+Wg");
		internal static readonly GlobalObjectKey IdLogicalDatabase = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*DXxVCpzWNkmR4_1etW7ENw");
		internal static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*mL+sIgyUhEKMSMMry30Pvw");
		internal static readonly GlobalObjectKey IdExtensionKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*+DEURlf4QUyvyjLRv5xMHQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("EntityId")]
		public int ssEntityId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("EffectivePhysicalTableName")]
		public string ssEffectivePhysicalTableName;

		[System.Xml.Serialization.XmlElement("DefaultPhysicalTableName")]
		public string ssDefaultPhysicalTableName;

		[System.Xml.Serialization.XmlElement("IsPhysicalTableNameOverridden")]
		public bool ssIsPhysicalTableNameOverridden;

		[System.Xml.Serialization.XmlElement("LogicalDatabase")]
		public string ssLogicalDatabase;

		[System.Xml.Serialization.XmlElement("Description")]
		public string ssDescription;

		[System.Xml.Serialization.XmlElement("ExtensionKey")]
		public string ssExtensionKey;


		public BitArray OptimizedAttributes;

		public STExtensionEntityConfigStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssKey = "";
			ssEntityId = 0;
			ssName = "";
			ssEffectivePhysicalTableName = "";
			ssDefaultPhysicalTableName = "";
			ssIsPhysicalTableNameOverridden = false;
			ssLogicalDatabase = "";
			ssDescription = "";
			ssExtensionKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssKey = r.ReadText(index++, "ExtensionEntityConfig.Key", "");
			ssEntityId = r.ReadEntityReference(index++, "ExtensionEntityConfig.EntityId", 0);
			ssName = r.ReadText(index++, "ExtensionEntityConfig.Name", "");
			ssEffectivePhysicalTableName = r.ReadText(index++, "ExtensionEntityConfig.EffectivePhysicalTableName", "");
			ssDefaultPhysicalTableName = r.ReadText(index++, "ExtensionEntityConfig.DefaultPhysicalTableName", "");
			ssIsPhysicalTableNameOverridden = r.ReadBoolean(index++, "ExtensionEntityConfig.IsPhysicalTableNameOverridden", false);
			ssLogicalDatabase = r.ReadText(index++, "ExtensionEntityConfig.LogicalDatabase", "");
			ssDescription = r.ReadText(index++, "ExtensionEntityConfig.Description", "");
			ssExtensionKey = r.ReadText(index++, "ExtensionEntityConfig.ExtensionKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STExtensionEntityConfigStructure r) {
			this = r;
		}


		public static bool operator == (STExtensionEntityConfigStructure a, STExtensionEntityConfigStructure b) {
			if (a.ssKey != b.ssKey) return false;
			if (a.ssEntityId != b.ssEntityId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssEffectivePhysicalTableName != b.ssEffectivePhysicalTableName) return false;
			if (a.ssDefaultPhysicalTableName != b.ssDefaultPhysicalTableName) return false;
			if (a.ssIsPhysicalTableNameOverridden != b.ssIsPhysicalTableNameOverridden) return false;
			if (a.ssLogicalDatabase != b.ssLogicalDatabase) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssExtensionKey != b.ssExtensionKey) return false;
			return true;
		}

		public static bool operator != (STExtensionEntityConfigStructure a, STExtensionEntityConfigStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STExtensionEntityConfigStructure)) return false;
			return (this == (STExtensionEntityConfigStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssEntityId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssEffectivePhysicalTableName.GetHashCode()
				^ ssDefaultPhysicalTableName.GetHashCode()
				^ ssIsPhysicalTableNameOverridden.GetHashCode()
				^ ssLogicalDatabase.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssExtensionKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STExtensionEntityConfigStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssKey = "";
			ssEntityId = 0;
			ssName = "";
			ssEffectivePhysicalTableName = "";
			ssDefaultPhysicalTableName = "";
			ssIsPhysicalTableNameOverridden = false;
			ssLogicalDatabase = "";
			ssDescription = "";
			ssExtensionKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEntityId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEntityId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEntityId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEffectivePhysicalTableName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEffectivePhysicalTableName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEffectivePhysicalTableName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDefaultPhysicalTableName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDefaultPhysicalTableName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDefaultPhysicalTableName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsPhysicalTableNameOverridden", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsPhysicalTableNameOverridden' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsPhysicalTableNameOverridden = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLogicalDatabase", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLogicalDatabase' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLogicalDatabase = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtensionKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtensionKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtensionKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STExtensionEntityConfigStructure Duplicate() {
			STExtensionEntityConfigStructure t;
			t.ssKey = this.ssKey;
			t.ssEntityId = this.ssEntityId;
			t.ssName = this.ssName;
			t.ssEffectivePhysicalTableName = this.ssEffectivePhysicalTableName;
			t.ssDefaultPhysicalTableName = this.ssDefaultPhysicalTableName;
			t.ssIsPhysicalTableNameOverridden = this.ssIsPhysicalTableNameOverridden;
			t.ssLogicalDatabase = this.ssLogicalDatabase;
			t.ssDescription = this.ssDescription;
			t.ssExtensionKey = this.ssExtensionKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EntityId")) VarValue.AppendAttribute(recordElem, "EntityId", ssEntityId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "EntityId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EffectivePhysicalTableName")) VarValue.AppendAttribute(recordElem, "EffectivePhysicalTableName", ssEffectivePhysicalTableName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EffectivePhysicalTableName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DefaultPhysicalTableName")) VarValue.AppendAttribute(recordElem, "DefaultPhysicalTableName", ssDefaultPhysicalTableName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DefaultPhysicalTableName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsPhysicalTableNameOverridden")) VarValue.AppendAttribute(recordElem, "IsPhysicalTableNameOverridden", ssIsPhysicalTableNameOverridden, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsPhysicalTableNameOverridden");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LogicalDatabase")) VarValue.AppendAttribute(recordElem, "LogicalDatabase", ssLogicalDatabase, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "LogicalDatabase");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ExtensionKey")) VarValue.AppendAttribute(recordElem, "ExtensionKey", ssExtensionKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ExtensionKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "entityid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EntityId")) variable.Value = ssEntityId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "effectivephysicaltablename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EffectivePhysicalTableName")) variable.Value = ssEffectivePhysicalTableName; else variable.Optimized = true;
			} else if (head == "defaultphysicaltablename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DefaultPhysicalTableName")) variable.Value = ssDefaultPhysicalTableName; else variable.Optimized = true;
			} else if (head == "isphysicaltablenameoverridden") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsPhysicalTableNameOverridden")) variable.Value = ssIsPhysicalTableNameOverridden; else variable.Optimized = true;
			} else if (head == "logicaldatabase") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LogicalDatabase")) variable.Value = ssLogicalDatabase; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "extensionkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ExtensionKey")) variable.Value = ssExtensionKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdKey) {
				return ssKey;
			} else if (key == IdEntityId) {
				return ssEntityId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdEffectivePhysicalTableName) {
				return ssEffectivePhysicalTableName;
			} else if (key == IdDefaultPhysicalTableName) {
				return ssDefaultPhysicalTableName;
			} else if (key == IdIsPhysicalTableNameOverridden) {
				return ssIsPhysicalTableNameOverridden;
			} else if (key == IdLogicalDatabase) {
				return ssLogicalDatabase;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdExtensionKey) {
				return ssExtensionKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssKey = (string) other.AttributeGet(IdKey);
			ssEntityId = (int) other.AttributeGet(IdEntityId);
			ssName = (string) other.AttributeGet(IdName);
			ssEffectivePhysicalTableName = (string) other.AttributeGet(IdEffectivePhysicalTableName);
			ssDefaultPhysicalTableName = (string) other.AttributeGet(IdDefaultPhysicalTableName);
			ssIsPhysicalTableNameOverridden = (bool) other.AttributeGet(IdIsPhysicalTableNameOverridden);
			ssLogicalDatabase = (string) other.AttributeGet(IdLogicalDatabase);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ssExtensionKey = (string) other.AttributeGet(IdExtensionKey);
		}
		public bool IsDefault() {
			STExtensionEntityConfigStructure defaultStruct = new STExtensionEntityConfigStructure(null);
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssEntityId != defaultStruct.ssEntityId) return false;
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssEffectivePhysicalTableName != defaultStruct.ssEffectivePhysicalTableName) return false;
			if (this.ssDefaultPhysicalTableName != defaultStruct.ssDefaultPhysicalTableName) return false;
			if (this.ssIsPhysicalTableNameOverridden != defaultStruct.ssIsPhysicalTableNameOverridden) return false;
			if (this.ssLogicalDatabase != defaultStruct.ssLogicalDatabase) return false;
			if (this.ssDescription != defaultStruct.ssDescription) return false;
			if (this.ssExtensionKey != defaultStruct.ssExtensionKey) return false;
			return true;
		}
	} // STExtensionEntityConfigStructure

	/// <summary>
	/// Structure <code>STDeploymentZone_AmazonEKSStructure</code> that represents the Service Studio
	///  structure <code>DeploymentZone_AmazonEKS</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STDeploymentZone_AmazonEKSStructure: ISerializable, ITypedRecord<STDeploymentZone_AmazonEKSStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdTargetPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*rl541JH0HE6W9wDa+ftPDg");
		internal static readonly GlobalObjectKey IdFromImageReference = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*O_qOHHlUsUu8oQDsI9qDmg");
		internal static readonly GlobalObjectKey IdConfigPath = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Z8SK8wz+uEG7HPbPiM_zjg");
		internal static readonly GlobalObjectKey IdBuildContainerTimeoutSeconds = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*3oEc3JkIU0yVgy3fx6nySw");
		internal static readonly GlobalObjectKey IdDeploymentTimeoutSeconds = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qGDJeyoxH0CEoBPEeRaThw");
		internal static readonly GlobalObjectKey IdUndeploymentTimeoutSeconds = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*VKkZc+L5tkCJaK1R2K87jw");
		internal static readonly GlobalObjectKey IdUpdateConfigurationsTimeoutSeconds = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*QxCMIjBe80OI4MUmRhkgKQ");
		internal static readonly GlobalObjectKey IdEKSApiEndpoint = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*19RGVFSbykqH+p9zdb0kPA");
		internal static readonly GlobalObjectKey IdEKSClusterName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*uIRoHfLvXEqqq1_RLNn9Qg");
		internal static readonly GlobalObjectKey IdEKSNamespace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Q8ixc6R9FkWewSyAEIP9Gg");
		internal static readonly GlobalObjectKey IdEKSSecretTls = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*YHGIgI5FD0+JHOlZIyaF2A");
		internal static readonly GlobalObjectKey IdEKSAWSAccessKeyId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pn6J1fz8Hk2k0p7JjICnpg");
		internal static readonly GlobalObjectKey IdEKSAWSSecretAccessKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qUVhqESMR0iRfUPvmb4X+A");
		internal static readonly GlobalObjectKey IdEKSAdvancedConfiguration = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*nB_N42NTQE6Fn2Azv0UgIA");
		internal static readonly GlobalObjectKey IdECRApiEndpoint = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ad_kJh2mFUyGDuDSigqyLg");
		internal static readonly GlobalObjectKey IdECRNamespace = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*K2boovNUf0qb0yywAyUzyA");
		internal static readonly GlobalObjectKey IdECRAWSAccessKeyId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0kGSEaTBSUq2x0fxYQLMew");
		internal static readonly GlobalObjectKey IdECRAWSSecretAccessKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vNn60gI35Ue_TDt+17cLTg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("TargetPath")]
		public string ssTargetPath;

		[System.Xml.Serialization.XmlElement("FromImageReference")]
		public string ssFromImageReference;

		[System.Xml.Serialization.XmlElement("ConfigPath")]
		public string ssConfigPath;

		[System.Xml.Serialization.XmlElement("BuildContainerTimeoutSeconds")]
		public int ssBuildContainerTimeoutSeconds;

		[System.Xml.Serialization.XmlElement("DeploymentTimeoutSeconds")]
		public int ssDeploymentTimeoutSeconds;

		[System.Xml.Serialization.XmlElement("UndeploymentTimeoutSeconds")]
		public int ssUndeploymentTimeoutSeconds;

		[System.Xml.Serialization.XmlElement("UpdateConfigurationsTimeoutSeconds")]
		public int ssUpdateConfigurationsTimeoutSeconds;

		[System.Xml.Serialization.XmlElement("EKSApiEndpoint")]
		public string ssEKSApiEndpoint;

		[System.Xml.Serialization.XmlElement("EKSClusterName")]
		public string ssEKSClusterName;

		[System.Xml.Serialization.XmlElement("EKSNamespace")]
		public string ssEKSNamespace;

		[System.Xml.Serialization.XmlElement("EKSSecretTls")]
		public string ssEKSSecretTls;

		[System.Xml.Serialization.XmlElement("EKSAWSAccessKeyId")]
		public string ssEKSAWSAccessKeyId;

		[System.Xml.Serialization.XmlElement("EKSAWSSecretAccessKey")]
		public string ssEKSAWSSecretAccessKey;

		[System.Xml.Serialization.XmlElement("EKSAdvancedConfiguration")]
		public string ssEKSAdvancedConfiguration;

		[System.Xml.Serialization.XmlElement("ECRApiEndpoint")]
		public string ssECRApiEndpoint;

		[System.Xml.Serialization.XmlElement("ECRNamespace")]
		public string ssECRNamespace;

		[System.Xml.Serialization.XmlElement("ECRAWSAccessKeyId")]
		public string ssECRAWSAccessKeyId;

		[System.Xml.Serialization.XmlElement("ECRAWSSecretAccessKey")]
		public string ssECRAWSSecretAccessKey;


		public BitArray OptimizedAttributes;

		public STDeploymentZone_AmazonEKSStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssBuildContainerTimeoutSeconds = 0;
			ssDeploymentTimeoutSeconds = 0;
			ssUndeploymentTimeoutSeconds = 0;
			ssUpdateConfigurationsTimeoutSeconds = 0;
			ssEKSApiEndpoint = "";
			ssEKSClusterName = "";
			ssEKSNamespace = "";
			ssEKSSecretTls = "";
			ssEKSAWSAccessKeyId = "";
			ssEKSAWSSecretAccessKey = "";
			ssEKSAdvancedConfiguration = "";
			ssECRApiEndpoint = "";
			ssECRNamespace = "";
			ssECRAWSAccessKeyId = "";
			ssECRAWSSecretAccessKey = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssTargetPath = r.ReadText(index++, "DeploymentZone_AmazonEKS.TargetPath", "");
			ssFromImageReference = r.ReadText(index++, "DeploymentZone_AmazonEKS.FromImageReference", "");
			ssConfigPath = r.ReadText(index++, "DeploymentZone_AmazonEKS.ConfigPath", "");
			ssBuildContainerTimeoutSeconds = r.ReadInteger(index++, "DeploymentZone_AmazonEKS.BuildContainerTimeoutSeconds", 0);
			ssDeploymentTimeoutSeconds = r.ReadInteger(index++, "DeploymentZone_AmazonEKS.DeploymentTimeoutSeconds", 0);
			ssUndeploymentTimeoutSeconds = r.ReadInteger(index++, "DeploymentZone_AmazonEKS.UndeploymentTimeoutSeconds", 0);
			ssUpdateConfigurationsTimeoutSeconds = r.ReadInteger(index++, "DeploymentZone_AmazonEKS.UpdateConfigurationsTimeoutSeconds", 0);
			ssEKSApiEndpoint = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSApiEndpoint", "");
			ssEKSClusterName = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSClusterName", "");
			ssEKSNamespace = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSNamespace", "");
			ssEKSSecretTls = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSSecretTls", "");
			ssEKSAWSAccessKeyId = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSAWSAccessKeyId", "");
			ssEKSAWSSecretAccessKey = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSAWSSecretAccessKey", "");
			ssEKSAdvancedConfiguration = r.ReadText(index++, "DeploymentZone_AmazonEKS.EKSAdvancedConfiguration", "");
			ssECRApiEndpoint = r.ReadText(index++, "DeploymentZone_AmazonEKS.ECRApiEndpoint", "");
			ssECRNamespace = r.ReadText(index++, "DeploymentZone_AmazonEKS.ECRNamespace", "");
			ssECRAWSAccessKeyId = r.ReadText(index++, "DeploymentZone_AmazonEKS.ECRAWSAccessKeyId", "");
			ssECRAWSSecretAccessKey = r.ReadText(index++, "DeploymentZone_AmazonEKS.ECRAWSSecretAccessKey", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDeploymentZone_AmazonEKSStructure r) {
			this = r;
		}


		public static bool operator == (STDeploymentZone_AmazonEKSStructure a, STDeploymentZone_AmazonEKSStructure b) {
			if (a.ssTargetPath != b.ssTargetPath) return false;
			if (a.ssFromImageReference != b.ssFromImageReference) return false;
			if (a.ssConfigPath != b.ssConfigPath) return false;
			if (a.ssBuildContainerTimeoutSeconds != b.ssBuildContainerTimeoutSeconds) return false;
			if (a.ssDeploymentTimeoutSeconds != b.ssDeploymentTimeoutSeconds) return false;
			if (a.ssUndeploymentTimeoutSeconds != b.ssUndeploymentTimeoutSeconds) return false;
			if (a.ssUpdateConfigurationsTimeoutSeconds != b.ssUpdateConfigurationsTimeoutSeconds) return false;
			if (a.ssEKSApiEndpoint != b.ssEKSApiEndpoint) return false;
			if (a.ssEKSClusterName != b.ssEKSClusterName) return false;
			if (a.ssEKSNamespace != b.ssEKSNamespace) return false;
			if (a.ssEKSSecretTls != b.ssEKSSecretTls) return false;
			if (a.ssEKSAWSAccessKeyId != b.ssEKSAWSAccessKeyId) return false;
			if (a.ssEKSAWSSecretAccessKey != b.ssEKSAWSSecretAccessKey) return false;
			if (a.ssEKSAdvancedConfiguration != b.ssEKSAdvancedConfiguration) return false;
			if (a.ssECRApiEndpoint != b.ssECRApiEndpoint) return false;
			if (a.ssECRNamespace != b.ssECRNamespace) return false;
			if (a.ssECRAWSAccessKeyId != b.ssECRAWSAccessKeyId) return false;
			if (a.ssECRAWSSecretAccessKey != b.ssECRAWSSecretAccessKey) return false;
			return true;
		}

		public static bool operator != (STDeploymentZone_AmazonEKSStructure a, STDeploymentZone_AmazonEKSStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDeploymentZone_AmazonEKSStructure)) return false;
			return (this == (STDeploymentZone_AmazonEKSStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssTargetPath.GetHashCode()
				^ ssFromImageReference.GetHashCode()
				^ ssConfigPath.GetHashCode()
				^ ssBuildContainerTimeoutSeconds.GetHashCode()
				^ ssDeploymentTimeoutSeconds.GetHashCode()
				^ ssUndeploymentTimeoutSeconds.GetHashCode()
				^ ssUpdateConfigurationsTimeoutSeconds.GetHashCode()
				^ ssEKSApiEndpoint.GetHashCode()
				^ ssEKSClusterName.GetHashCode()
				^ ssEKSNamespace.GetHashCode()
				^ ssEKSSecretTls.GetHashCode()
				^ ssEKSAWSAccessKeyId.GetHashCode()
				^ ssEKSAWSSecretAccessKey.GetHashCode()
				^ ssEKSAdvancedConfiguration.GetHashCode()
				^ ssECRApiEndpoint.GetHashCode()
				^ ssECRNamespace.GetHashCode()
				^ ssECRAWSAccessKeyId.GetHashCode()
				^ ssECRAWSSecretAccessKey.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDeploymentZone_AmazonEKSStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssTargetPath = "";
			ssFromImageReference = "";
			ssConfigPath = "";
			ssBuildContainerTimeoutSeconds = 0;
			ssDeploymentTimeoutSeconds = 0;
			ssUndeploymentTimeoutSeconds = 0;
			ssUpdateConfigurationsTimeoutSeconds = 0;
			ssEKSApiEndpoint = "";
			ssEKSClusterName = "";
			ssEKSNamespace = "";
			ssEKSSecretTls = "";
			ssEKSAWSAccessKeyId = "";
			ssEKSAWSSecretAccessKey = "";
			ssEKSAdvancedConfiguration = "";
			ssECRApiEndpoint = "";
			ssECRNamespace = "";
			ssECRAWSAccessKeyId = "";
			ssECRAWSSecretAccessKey = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssTargetPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTargetPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTargetPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFromImageReference", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFromImageReference' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFromImageReference = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigPath", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigPath' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigPath = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBuildContainerTimeoutSeconds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBuildContainerTimeoutSeconds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBuildContainerTimeoutSeconds = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDeploymentTimeoutSeconds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDeploymentTimeoutSeconds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDeploymentTimeoutSeconds = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUndeploymentTimeoutSeconds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUndeploymentTimeoutSeconds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUndeploymentTimeoutSeconds = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUpdateConfigurationsTimeoutSeconds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUpdateConfigurationsTimeoutSeconds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUpdateConfigurationsTimeoutSeconds = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSApiEndpoint", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSApiEndpoint' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSApiEndpoint = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSClusterName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSClusterName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSClusterName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSNamespace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSNamespace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSNamespace = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSSecretTls", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSSecretTls' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSSecretTls = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSAWSAccessKeyId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSAWSAccessKeyId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSAWSAccessKeyId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSAWSSecretAccessKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSAWSSecretAccessKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSAWSSecretAccessKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEKSAdvancedConfiguration", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEKSAdvancedConfiguration' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEKSAdvancedConfiguration = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssECRApiEndpoint", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssECRApiEndpoint' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssECRApiEndpoint = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssECRNamespace", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssECRNamespace' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssECRNamespace = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssECRAWSAccessKeyId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssECRAWSAccessKeyId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssECRAWSAccessKeyId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssECRAWSSecretAccessKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssECRAWSSecretAccessKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssECRAWSSecretAccessKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDeploymentZone_AmazonEKSStructure Duplicate() {
			STDeploymentZone_AmazonEKSStructure t;
			t.ssTargetPath = this.ssTargetPath;
			t.ssFromImageReference = this.ssFromImageReference;
			t.ssConfigPath = this.ssConfigPath;
			t.ssBuildContainerTimeoutSeconds = this.ssBuildContainerTimeoutSeconds;
			t.ssDeploymentTimeoutSeconds = this.ssDeploymentTimeoutSeconds;
			t.ssUndeploymentTimeoutSeconds = this.ssUndeploymentTimeoutSeconds;
			t.ssUpdateConfigurationsTimeoutSeconds = this.ssUpdateConfigurationsTimeoutSeconds;
			t.ssEKSApiEndpoint = this.ssEKSApiEndpoint;
			t.ssEKSClusterName = this.ssEKSClusterName;
			t.ssEKSNamespace = this.ssEKSNamespace;
			t.ssEKSSecretTls = this.ssEKSSecretTls;
			t.ssEKSAWSAccessKeyId = this.ssEKSAWSAccessKeyId;
			t.ssEKSAWSSecretAccessKey = this.ssEKSAWSSecretAccessKey;
			t.ssEKSAdvancedConfiguration = this.ssEKSAdvancedConfiguration;
			t.ssECRApiEndpoint = this.ssECRApiEndpoint;
			t.ssECRNamespace = this.ssECRNamespace;
			t.ssECRAWSAccessKeyId = this.ssECRAWSAccessKeyId;
			t.ssECRAWSSecretAccessKey = this.ssECRAWSSecretAccessKey;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TargetPath")) VarValue.AppendAttribute(recordElem, "TargetPath", ssTargetPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TargetPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".FromImageReference")) VarValue.AppendAttribute(recordElem, "FromImageReference", ssFromImageReference, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "FromImageReference");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ConfigPath")) VarValue.AppendAttribute(recordElem, "ConfigPath", ssConfigPath, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ConfigPath");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".BuildContainerTimeoutSeconds")) VarValue.AppendAttribute(recordElem, "BuildContainerTimeoutSeconds", ssBuildContainerTimeoutSeconds, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "BuildContainerTimeoutSeconds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DeploymentTimeoutSeconds")) VarValue.AppendAttribute(recordElem, "DeploymentTimeoutSeconds", ssDeploymentTimeoutSeconds, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "DeploymentTimeoutSeconds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UndeploymentTimeoutSeconds")) VarValue.AppendAttribute(recordElem, "UndeploymentTimeoutSeconds", ssUndeploymentTimeoutSeconds, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UndeploymentTimeoutSeconds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UpdateConfigurationsTimeoutSeconds")) VarValue.AppendAttribute(recordElem, "UpdateConfigurationsTimeoutSeconds", ssUpdateConfigurationsTimeoutSeconds, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "UpdateConfigurationsTimeoutSeconds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSApiEndpoint")) VarValue.AppendAttribute(recordElem, "EKSApiEndpoint", ssEKSApiEndpoint, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSApiEndpoint");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSClusterName")) VarValue.AppendAttribute(recordElem, "EKSClusterName", ssEKSClusterName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSClusterName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSNamespace")) VarValue.AppendAttribute(recordElem, "EKSNamespace", ssEKSNamespace, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSNamespace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSSecretTls")) VarValue.AppendAttribute(recordElem, "EKSSecretTls", ssEKSSecretTls, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSSecretTls");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSAWSAccessKeyId")) VarValue.AppendAttribute(recordElem, "EKSAWSAccessKeyId", ssEKSAWSAccessKeyId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSAWSAccessKeyId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSAWSSecretAccessKey")) VarValue.AppendAttribute(recordElem, "EKSAWSSecretAccessKey", ssEKSAWSSecretAccessKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSAWSSecretAccessKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".EKSAdvancedConfiguration")) VarValue.AppendAttribute(recordElem, "EKSAdvancedConfiguration", ssEKSAdvancedConfiguration, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "EKSAdvancedConfiguration");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ECRApiEndpoint")) VarValue.AppendAttribute(recordElem, "ECRApiEndpoint", ssECRApiEndpoint, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ECRApiEndpoint");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ECRNamespace")) VarValue.AppendAttribute(recordElem, "ECRNamespace", ssECRNamespace, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ECRNamespace");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ECRAWSAccessKeyId")) VarValue.AppendAttribute(recordElem, "ECRAWSAccessKeyId", ssECRAWSAccessKeyId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ECRAWSAccessKeyId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ECRAWSSecretAccessKey")) VarValue.AppendAttribute(recordElem, "ECRAWSSecretAccessKey", ssECRAWSSecretAccessKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ECRAWSSecretAccessKey");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "targetpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TargetPath")) variable.Value = ssTargetPath; else variable.Optimized = true;
			} else if (head == "fromimagereference") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".FromImageReference")) variable.Value = ssFromImageReference; else variable.Optimized = true;
			} else if (head == "configpath") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ConfigPath")) variable.Value = ssConfigPath; else variable.Optimized = true;
			} else if (head == "buildcontainertimeoutseconds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BuildContainerTimeoutSeconds")) variable.Value = ssBuildContainerTimeoutSeconds; else variable.Optimized = true;
			} else if (head == "deploymenttimeoutseconds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DeploymentTimeoutSeconds")) variable.Value = ssDeploymentTimeoutSeconds; else variable.Optimized = true;
			} else if (head == "undeploymenttimeoutseconds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UndeploymentTimeoutSeconds")) variable.Value = ssUndeploymentTimeoutSeconds; else variable.Optimized = true;
			} else if (head == "updateconfigurationstimeoutseconds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UpdateConfigurationsTimeoutSeconds")) variable.Value = ssUpdateConfigurationsTimeoutSeconds; else variable.Optimized = true;
			} else if (head == "eksapiendpoint") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSApiEndpoint")) variable.Value = ssEKSApiEndpoint; else variable.Optimized = true;
			} else if (head == "eksclustername") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSClusterName")) variable.Value = ssEKSClusterName; else variable.Optimized = true;
			} else if (head == "eksnamespace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSNamespace")) variable.Value = ssEKSNamespace; else variable.Optimized = true;
			} else if (head == "ekssecrettls") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSSecretTls")) variable.Value = ssEKSSecretTls; else variable.Optimized = true;
			} else if (head == "eksawsaccesskeyid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSAWSAccessKeyId")) variable.Value = ssEKSAWSAccessKeyId; else variable.Optimized = true;
			} else if (head == "eksawssecretaccesskey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSAWSSecretAccessKey")) variable.Value = ssEKSAWSSecretAccessKey; else variable.Optimized = true;
			} else if (head == "eksadvancedconfiguration") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".EKSAdvancedConfiguration")) variable.Value = ssEKSAdvancedConfiguration; else variable.Optimized = true;
			} else if (head == "ecrapiendpoint") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ECRApiEndpoint")) variable.Value = ssECRApiEndpoint; else variable.Optimized = true;
			} else if (head == "ecrnamespace") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ECRNamespace")) variable.Value = ssECRNamespace; else variable.Optimized = true;
			} else if (head == "ecrawsaccesskeyid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ECRAWSAccessKeyId")) variable.Value = ssECRAWSAccessKeyId; else variable.Optimized = true;
			} else if (head == "ecrawssecretaccesskey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ECRAWSSecretAccessKey")) variable.Value = ssECRAWSSecretAccessKey; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTargetPath) {
				return ssTargetPath;
			} else if (key == IdFromImageReference) {
				return ssFromImageReference;
			} else if (key == IdConfigPath) {
				return ssConfigPath;
			} else if (key == IdBuildContainerTimeoutSeconds) {
				return ssBuildContainerTimeoutSeconds;
			} else if (key == IdDeploymentTimeoutSeconds) {
				return ssDeploymentTimeoutSeconds;
			} else if (key == IdUndeploymentTimeoutSeconds) {
				return ssUndeploymentTimeoutSeconds;
			} else if (key == IdUpdateConfigurationsTimeoutSeconds) {
				return ssUpdateConfigurationsTimeoutSeconds;
			} else if (key == IdEKSApiEndpoint) {
				return ssEKSApiEndpoint;
			} else if (key == IdEKSClusterName) {
				return ssEKSClusterName;
			} else if (key == IdEKSNamespace) {
				return ssEKSNamespace;
			} else if (key == IdEKSSecretTls) {
				return ssEKSSecretTls;
			} else if (key == IdEKSAWSAccessKeyId) {
				return ssEKSAWSAccessKeyId;
			} else if (key == IdEKSAWSSecretAccessKey) {
				return ssEKSAWSSecretAccessKey;
			} else if (key == IdEKSAdvancedConfiguration) {
				return ssEKSAdvancedConfiguration;
			} else if (key == IdECRApiEndpoint) {
				return ssECRApiEndpoint;
			} else if (key == IdECRNamespace) {
				return ssECRNamespace;
			} else if (key == IdECRAWSAccessKeyId) {
				return ssECRAWSAccessKeyId;
			} else if (key == IdECRAWSSecretAccessKey) {
				return ssECRAWSSecretAccessKey;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssTargetPath = (string) other.AttributeGet(IdTargetPath);
			ssFromImageReference = (string) other.AttributeGet(IdFromImageReference);
			ssConfigPath = (string) other.AttributeGet(IdConfigPath);
			ssBuildContainerTimeoutSeconds = (int) other.AttributeGet(IdBuildContainerTimeoutSeconds);
			ssDeploymentTimeoutSeconds = (int) other.AttributeGet(IdDeploymentTimeoutSeconds);
			ssUndeploymentTimeoutSeconds = (int) other.AttributeGet(IdUndeploymentTimeoutSeconds);
			ssUpdateConfigurationsTimeoutSeconds = (int) other.AttributeGet(IdUpdateConfigurationsTimeoutSeconds);
			ssEKSApiEndpoint = (string) other.AttributeGet(IdEKSApiEndpoint);
			ssEKSClusterName = (string) other.AttributeGet(IdEKSClusterName);
			ssEKSNamespace = (string) other.AttributeGet(IdEKSNamespace);
			ssEKSSecretTls = (string) other.AttributeGet(IdEKSSecretTls);
			ssEKSAWSAccessKeyId = (string) other.AttributeGet(IdEKSAWSAccessKeyId);
			ssEKSAWSSecretAccessKey = (string) other.AttributeGet(IdEKSAWSSecretAccessKey);
			ssEKSAdvancedConfiguration = (string) other.AttributeGet(IdEKSAdvancedConfiguration);
			ssECRApiEndpoint = (string) other.AttributeGet(IdECRApiEndpoint);
			ssECRNamespace = (string) other.AttributeGet(IdECRNamespace);
			ssECRAWSAccessKeyId = (string) other.AttributeGet(IdECRAWSAccessKeyId);
			ssECRAWSSecretAccessKey = (string) other.AttributeGet(IdECRAWSSecretAccessKey);
		}
		public bool IsDefault() {
			STDeploymentZone_AmazonEKSStructure defaultStruct = new STDeploymentZone_AmazonEKSStructure(null);
			if (this.ssTargetPath != defaultStruct.ssTargetPath) return false;
			if (this.ssFromImageReference != defaultStruct.ssFromImageReference) return false;
			if (this.ssConfigPath != defaultStruct.ssConfigPath) return false;
			if (this.ssBuildContainerTimeoutSeconds != defaultStruct.ssBuildContainerTimeoutSeconds) return false;
			if (this.ssDeploymentTimeoutSeconds != defaultStruct.ssDeploymentTimeoutSeconds) return false;
			if (this.ssUndeploymentTimeoutSeconds != defaultStruct.ssUndeploymentTimeoutSeconds) return false;
			if (this.ssUpdateConfigurationsTimeoutSeconds != defaultStruct.ssUpdateConfigurationsTimeoutSeconds) return false;
			if (this.ssEKSApiEndpoint != defaultStruct.ssEKSApiEndpoint) return false;
			if (this.ssEKSClusterName != defaultStruct.ssEKSClusterName) return false;
			if (this.ssEKSNamespace != defaultStruct.ssEKSNamespace) return false;
			if (this.ssEKSSecretTls != defaultStruct.ssEKSSecretTls) return false;
			if (this.ssEKSAWSAccessKeyId != defaultStruct.ssEKSAWSAccessKeyId) return false;
			if (this.ssEKSAWSSecretAccessKey != defaultStruct.ssEKSAWSSecretAccessKey) return false;
			if (this.ssEKSAdvancedConfiguration != defaultStruct.ssEKSAdvancedConfiguration) return false;
			if (this.ssECRApiEndpoint != defaultStruct.ssECRApiEndpoint) return false;
			if (this.ssECRNamespace != defaultStruct.ssECRNamespace) return false;
			if (this.ssECRAWSAccessKeyId != defaultStruct.ssECRAWSAccessKeyId) return false;
			if (this.ssECRAWSSecretAccessKey != defaultStruct.ssECRAWSSecretAccessKey) return false;
			return true;
		}
	} // STDeploymentZone_AmazonEKSStructure

	/// <summary>
	/// Structure <code>STSolutionPack_SCEntityStructure</code> that represents the Service Studio
	///  structure <code>SolutionPack_SCEntity</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSolutionPack_SCEntityStructure: ISerializable, ITypedRecord<STSolutionPack_SCEntityStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*SkcUunMOFEKPUC_AScX8gg");
		internal static readonly GlobalObjectKey IdSS_Key = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*FbAlw6lVo0a_vn+cNbMqtg");
		internal static readonly GlobalObjectKey IdFilename = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*hs8dfo_r0kWVmcai8Lvy4w");
		internal static readonly GlobalObjectKey IdContent = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*AazrXf2GYkK++5bGgU5uvA");
		internal static readonly GlobalObjectKey IdCreation = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*zlgoJwtUx0a6u1kaB0yKwQ");
		internal static readonly GlobalObjectKey IdExternal = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*0CcUq+cGJk+fW+j8nQuIog");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Id")]
		public int ssId;

		[System.Xml.Serialization.XmlElement("SS_Key")]
		public string ssSS_Key;

		[System.Xml.Serialization.XmlElement("Filename")]
		public string ssFilename;

		[System.Xml.Serialization.XmlElement("Content")]
		public byte[] ssContent;

		[System.Xml.Serialization.XmlElement("Creation")]
		public DateTime ssCreation;

		[System.Xml.Serialization.XmlElement("External")]
		public bool ssExternal;


		public BitArray OptimizedAttributes;

		public STSolutionPack_SCEntityStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssId = 0;
			ssSS_Key = "";
			ssFilename = "";
			ssContent = new byte[] {};
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssExternal = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "SolutionPack_SCEntity.Id", 0);
			ssSS_Key = r.ReadText(index++, "SolutionPack_SCEntity.SS_Key", "");
			ssFilename = r.ReadText(index++, "SolutionPack_SCEntity.Filename", "");
			ssContent = r.ReadBinaryData(index++, "SolutionPack_SCEntity.Content", new byte[] {});
			ssCreation = r.ReadDateTime(index++, "SolutionPack_SCEntity.Creation", new DateTime(1900, 1, 1, 0, 0, 0));
			ssExternal = r.ReadBoolean(index++, "SolutionPack_SCEntity.External", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSolutionPack_SCEntityStructure r) {
			this = r;
		}


		public static bool operator == (STSolutionPack_SCEntityStructure a, STSolutionPack_SCEntityStructure b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssSS_Key != b.ssSS_Key) return false;
			if (a.ssFilename != b.ssFilename) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssContent, b.ssContent)) return false;
			if (a.ssCreation != b.ssCreation) return false;
			if (a.ssExternal != b.ssExternal) return false;
			return true;
		}

		public static bool operator != (STSolutionPack_SCEntityStructure a, STSolutionPack_SCEntityStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSolutionPack_SCEntityStructure)) return false;
			return (this == (STSolutionPack_SCEntityStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssSS_Key.GetHashCode()
				^ ssFilename.GetHashCode()
				^ ssContent.GetHashCode()
				^ ssCreation.GetHashCode()
				^ ssExternal.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSolutionPack_SCEntityStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssId = 0;
			ssSS_Key = "";
			ssFilename = "";
			ssContent = new byte[] {};
			ssCreation = new DateTime(1900, 1, 1, 0, 0, 0);
			ssExternal = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSS_Key", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSS_Key' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSS_Key = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFilename", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFilename' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFilename = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContent = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreation = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExternal", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExternal' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExternal = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSolutionPack_SCEntityStructure Duplicate() {
			STSolutionPack_SCEntityStructure t;
			t.ssId = this.ssId;
			t.ssSS_Key = this.ssSS_Key;
			t.ssFilename = this.ssFilename;
			if (this.ssContent != null) {
				t.ssContent = (byte[]) this.ssContent.Clone();
			} else {
				t.ssContent = null;
			}
			t.ssCreation = this.ssCreation;
			t.ssExternal = this.ssExternal;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".SS_Key")) VarValue.AppendAttribute(recordElem, "SS_Key", ssSS_Key, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "SS_Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filename")) VarValue.AppendAttribute(recordElem, "Filename", ssFilename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Content")) VarValue.AppendAttribute(recordElem, "Content", ssContent, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Content");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation")) VarValue.AppendAttribute(recordElem, "Creation", ssCreation, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".External")) VarValue.AppendAttribute(recordElem, "External", ssExternal, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "External");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "ss_key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".SS_Key")) variable.Value = ssSS_Key; else variable.Optimized = true;
			} else if (head == "filename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filename")) variable.Value = ssFilename; else variable.Optimized = true;
			} else if (head == "content") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Content")) variable.Value = ssContent; else variable.Optimized = true;
			} else if (head == "creation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation")) variable.Value = ssCreation; else variable.Optimized = true;
			} else if (head == "external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".External")) variable.Value = ssExternal; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdSS_Key) {
				return ssSS_Key;
			} else if (key == IdFilename) {
				return ssFilename;
			} else if (key == IdContent) {
				return ssContent;
			} else if (key == IdCreation) {
				return ssCreation;
			} else if (key == IdExternal) {
				return ssExternal;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ssSS_Key = (string) other.AttributeGet(IdSS_Key);
			ssFilename = (string) other.AttributeGet(IdFilename);
			ssContent = (byte[]) other.AttributeGet(IdContent);
			ssCreation = (DateTime) other.AttributeGet(IdCreation);
			ssExternal = (bool) other.AttributeGet(IdExternal);
		}
		public bool IsDefault() {
			STSolutionPack_SCEntityStructure defaultStruct = new STSolutionPack_SCEntityStructure(null);
			if (this.ssId != defaultStruct.ssId) return false;
			if (this.ssSS_Key != defaultStruct.ssSS_Key) return false;
			if (this.ssFilename != defaultStruct.ssFilename) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssContent, defaultStruct.ssContent)) return false;
			if (this.ssCreation != defaultStruct.ssCreation) return false;
			if (this.ssExternal != defaultStruct.ssExternal) return false;
			return true;
		}
	} // STSolutionPack_SCEntityStructure

	/// <summary>
	/// Structure <code>STProducerModuleSignatureStructure</code> that represents the Service Studio
	///  structure <code>ProducerModuleSignature</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STProducerModuleSignatureStructure: ISerializable, ITypedRecord<STProducerModuleSignatureStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*mpSh3C8sPE+KAKTPS41vHg");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ome6KThJJ0+JjK98reLEEA");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Sc_FtT7oB0GMMbPLfz_Tew");
		internal static readonly GlobalObjectKey IdVersionHash = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*5iN461FUxUCmuq3IIaIeeA");
		internal static readonly GlobalObjectKey IdVersionSignature = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*PQoEkPS1r0iUpB7aDI7clg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("VersionHash")]
		public string ssVersionHash;

		[System.Xml.Serialization.XmlElement("VersionSignature")]
		public byte[] ssVersionSignature;


		public BitArray OptimizedAttributes;

		public STProducerModuleSignatureStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssVersionHash = "";
			ssVersionSignature = new byte[] {};
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "ProducerModuleSignature.Name", "");
			ssKey = r.ReadText(index++, "ProducerModuleSignature.Key", "");
			ssKind = r.ReadText(index++, "ProducerModuleSignature.Kind", "");
			ssVersionHash = r.ReadText(index++, "ProducerModuleSignature.VersionHash", "");
			ssVersionSignature = r.ReadBinaryData(index++, "ProducerModuleSignature.VersionSignature", new byte[] {});
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STProducerModuleSignatureStructure r) {
			this = r;
		}


		public static bool operator == (STProducerModuleSignatureStructure a, STProducerModuleSignatureStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssVersionHash != b.ssVersionHash) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssVersionSignature, b.ssVersionSignature)) return false;
			return true;
		}

		public static bool operator != (STProducerModuleSignatureStructure a, STProducerModuleSignatureStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STProducerModuleSignatureStructure)) return false;
			return (this == (STProducerModuleSignatureStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssVersionHash.GetHashCode()
				^ ssVersionSignature.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STProducerModuleSignatureStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssVersionHash = "";
			ssVersionSignature = new byte[] {};
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersionHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersionHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersionHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVersionSignature", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVersionSignature' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVersionSignature = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STProducerModuleSignatureStructure Duplicate() {
			STProducerModuleSignatureStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssKind = this.ssKind;
			t.ssVersionHash = this.ssVersionHash;
			if (this.ssVersionSignature != null) {
				t.ssVersionSignature = (byte[]) this.ssVersionSignature.Clone();
			} else {
				t.ssVersionSignature = null;
			}
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VersionHash")) VarValue.AppendAttribute(recordElem, "VersionHash", ssVersionHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "VersionHash");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".VersionSignature")) VarValue.AppendAttribute(recordElem, "VersionSignature", ssVersionSignature, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "VersionSignature");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "versionhash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VersionHash")) variable.Value = ssVersionHash; else variable.Optimized = true;
			} else if (head == "versionsignature") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".VersionSignature")) variable.Value = ssVersionSignature; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdVersionHash) {
				return ssVersionHash;
			} else if (key == IdVersionSignature) {
				return ssVersionSignature;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssKind = (string) other.AttributeGet(IdKind);
			ssVersionHash = (string) other.AttributeGet(IdVersionHash);
			ssVersionSignature = (byte[]) other.AttributeGet(IdVersionSignature);
		}
		public bool IsDefault() {
			STProducerModuleSignatureStructure defaultStruct = new STProducerModuleSignatureStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssVersionHash != defaultStruct.ssVersionHash) return false;
			if (!RuntimePlatformUtils.CompareByteArrays(this.ssVersionSignature, defaultStruct.ssVersionSignature)) return false;
			return true;
		}
	} // STProducerModuleSignatureStructure

	/// <summary>
	/// Structure <code>STCheckReferenceStatusResultStructure</code> that represents the Service Studio
	///  structure <code>CheckReferenceStatusResult</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCheckReferenceStatusResultStructure: ISerializable, ITypedRecord<STCheckReferenceStatusResultStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdIncompatibleModules = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*vHM7xsMZLU6C5byBaUzbZA");
		internal static readonly GlobalObjectKey IdHasErrors = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*49CTbGQ44EeBcU4EENXd0g");
		internal static readonly GlobalObjectKey IdErrorStatusCode = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*HHLsmryVLUq58Llsy8F8Ew");
		internal static readonly GlobalObjectKey IdErrorMessage = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*qbVhqpsiCkmnDCXq47HeEA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("IncompatibleModules")]
		public RLIncompatibleModuleRecordList ssIncompatibleModules;

		[System.Xml.Serialization.XmlElement("HasErrors")]
		public bool ssHasErrors;

		[System.Xml.Serialization.XmlElement("ErrorStatusCode")]
		public int ssErrorStatusCode;

		[System.Xml.Serialization.XmlElement("ErrorMessage")]
		public string ssErrorMessage;


		public BitArray OptimizedAttributes;

		public STCheckReferenceStatusResultStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssIncompatibleModules = new RLIncompatibleModuleRecordList();
			ssHasErrors = false;
			ssErrorStatusCode = 0;
			ssErrorMessage = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssHasErrors = r.ReadBoolean(index++, "CheckReferenceStatusResult.HasErrors", false);
			ssErrorStatusCode = r.ReadInteger(index++, "CheckReferenceStatusResult.ErrorStatusCode", 0);
			ssErrorMessage = r.ReadText(index++, "CheckReferenceStatusResult.ErrorMessage", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCheckReferenceStatusResultStructure r) {
			this = r;
		}


		public static bool operator == (STCheckReferenceStatusResultStructure a, STCheckReferenceStatusResultStructure b) {
			if (a.ssIncompatibleModules != b.ssIncompatibleModules) return false;
			if (a.ssHasErrors != b.ssHasErrors) return false;
			if (a.ssErrorStatusCode != b.ssErrorStatusCode) return false;
			if (a.ssErrorMessage != b.ssErrorMessage) return false;
			return true;
		}

		public static bool operator != (STCheckReferenceStatusResultStructure a, STCheckReferenceStatusResultStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCheckReferenceStatusResultStructure)) return false;
			return (this == (STCheckReferenceStatusResultStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssIncompatibleModules.GetHashCode()
				^ ssHasErrors.GetHashCode()
				^ ssErrorStatusCode.GetHashCode()
				^ ssErrorMessage.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCheckReferenceStatusResultStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssIncompatibleModules = new RLIncompatibleModuleRecordList();
			ssHasErrors = false;
			ssErrorStatusCode = 0;
			ssErrorMessage = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssIncompatibleModules", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIncompatibleModules' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIncompatibleModules = (RLIncompatibleModuleRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHasErrors", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHasErrors' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHasErrors = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssErrorStatusCode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssErrorStatusCode' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssErrorStatusCode = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssErrorMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssErrorMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssErrorMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssIncompatibleModules.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssIncompatibleModules.InternalRecursiveSave();
		}


		public STCheckReferenceStatusResultStructure Duplicate() {
			STCheckReferenceStatusResultStructure t;
			t.ssIncompatibleModules = (RLIncompatibleModuleRecordList) this.ssIncompatibleModules.Duplicate();
			t.ssHasErrors = this.ssHasErrors;
			t.ssErrorStatusCode = this.ssErrorStatusCode;
			t.ssErrorMessage = this.ssErrorMessage;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssIncompatibleModules.ToXml(this, recordElem, "IncompatibleModules", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HasErrors")) VarValue.AppendAttribute(recordElem, "HasErrors", ssHasErrors, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "HasErrors");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ErrorStatusCode")) VarValue.AppendAttribute(recordElem, "ErrorStatusCode", ssErrorStatusCode, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "ErrorStatusCode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ErrorMessage")) VarValue.AppendAttribute(recordElem, "ErrorMessage", ssErrorMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ErrorMessage");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "incompatiblemodules") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IncompatibleModules")) variable.Value = ssIncompatibleModules; else variable.Optimized = true;
				variable.SetFieldName("incompatiblemodules");
			} else if (head == "haserrors") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HasErrors")) variable.Value = ssHasErrors; else variable.Optimized = true;
			} else if (head == "errorstatuscode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ErrorStatusCode")) variable.Value = ssErrorStatusCode; else variable.Optimized = true;
			} else if (head == "errormessage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ErrorMessage")) variable.Value = ssErrorMessage; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdIncompatibleModules) {
				return ssIncompatibleModules;
			} else if (key == IdHasErrors) {
				return ssHasErrors;
			} else if (key == IdErrorStatusCode) {
				return ssErrorStatusCode;
			} else if (key == IdErrorMessage) {
				return ssErrorMessage;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssIncompatibleModules = new RLIncompatibleModuleRecordList();
			ssIncompatibleModules.FillFromOther((IOSList) other.AttributeGet(IdIncompatibleModules));
			ssHasErrors = (bool) other.AttributeGet(IdHasErrors);
			ssErrorStatusCode = (int) other.AttributeGet(IdErrorStatusCode);
			ssErrorMessage = (string) other.AttributeGet(IdErrorMessage);
		}
		public bool IsDefault() {
			STCheckReferenceStatusResultStructure defaultStruct = new STCheckReferenceStatusResultStructure(null);
			if (this.ssIncompatibleModules != null && this.ssIncompatibleModules.Length != 0) return false;
			if (this.ssHasErrors != defaultStruct.ssHasErrors) return false;
			if (this.ssErrorStatusCode != defaultStruct.ssErrorStatusCode) return false;
			if (this.ssErrorMessage != defaultStruct.ssErrorMessage) return false;
			return true;
		}
	} // STCheckReferenceStatusResultStructure

	/// <summary>
	/// Structure <code>STIncompatibleModuleStructure</code> that represents the Service Studio structure
	///  <code>IncompatibleModule</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STIncompatibleModuleStructure: ISerializable, ITypedRecord<STIncompatibleModuleStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*Mp8bSHw2oUOzEZgrqDw2RA");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*pDa9Nq4mLU2m6IY5d5Kz5w");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*u_avebRROke2RvL+LgY_Xg");
		internal static readonly GlobalObjectKey IdIsMissing = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*xRAE_Dc8_0up7QcUM02wGQ");
		internal static readonly GlobalObjectKey IdIncompatibleElements = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*UiFxrHmbSkmyb6bLI0sS+w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("IsMissing")]
		public bool ssIsMissing;

		[System.Xml.Serialization.XmlElement("IncompatibleElements")]
		public RLIncompatibleElementRecordList ssIncompatibleElements;


		public BitArray OptimizedAttributes;

		public STIncompatibleModuleStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssIsMissing = false;
			ssIncompatibleElements = new RLIncompatibleElementRecordList();
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "IncompatibleModule.Name", "");
			ssKey = r.ReadText(index++, "IncompatibleModule.Key", "");
			ssKind = r.ReadText(index++, "IncompatibleModule.Kind", "");
			ssIsMissing = r.ReadBoolean(index++, "IncompatibleModule.IsMissing", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STIncompatibleModuleStructure r) {
			this = r;
		}


		public static bool operator == (STIncompatibleModuleStructure a, STIncompatibleModuleStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssIsMissing != b.ssIsMissing) return false;
			if (a.ssIncompatibleElements != b.ssIncompatibleElements) return false;
			return true;
		}

		public static bool operator != (STIncompatibleModuleStructure a, STIncompatibleModuleStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STIncompatibleModuleStructure)) return false;
			return (this == (STIncompatibleModuleStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssIsMissing.GetHashCode()
				^ ssIncompatibleElements.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STIncompatibleModuleStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssIsMissing = false;
			ssIncompatibleElements = new RLIncompatibleElementRecordList();
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsMissing", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsMissing' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsMissing = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIncompatibleElements", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIncompatibleElements' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIncompatibleElements = (RLIncompatibleElementRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssIncompatibleElements.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssIncompatibleElements.InternalRecursiveSave();
		}


		public STIncompatibleModuleStructure Duplicate() {
			STIncompatibleModuleStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssKind = this.ssKind;
			t.ssIsMissing = this.ssIsMissing;
			t.ssIncompatibleElements = (RLIncompatibleElementRecordList) this.ssIncompatibleElements.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsMissing")) VarValue.AppendAttribute(recordElem, "IsMissing", ssIsMissing, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsMissing");
				ssIncompatibleElements.ToXml(this, recordElem, "IncompatibleElements", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "ismissing") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsMissing")) variable.Value = ssIsMissing; else variable.Optimized = true;
			} else if (head == "incompatibleelements") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IncompatibleElements")) variable.Value = ssIncompatibleElements; else variable.Optimized = true;
				variable.SetFieldName("incompatibleelements");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdIsMissing) {
				return ssIsMissing;
			} else if (key == IdIncompatibleElements) {
				return ssIncompatibleElements;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssKind = (string) other.AttributeGet(IdKind);
			ssIsMissing = (bool) other.AttributeGet(IdIsMissing);
			ssIncompatibleElements = new RLIncompatibleElementRecordList();
			ssIncompatibleElements.FillFromOther((IOSList) other.AttributeGet(IdIncompatibleElements));
		}
		public bool IsDefault() {
			STIncompatibleModuleStructure defaultStruct = new STIncompatibleModuleStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssIsMissing != defaultStruct.ssIsMissing) return false;
			if (this.ssIncompatibleElements != null && this.ssIncompatibleElements.Length != 0) return false;
			return true;
		}
	} // STIncompatibleModuleStructure

	/// <summary>
	/// Structure <code>STIncompatibleElementStructure</code> that represents the Service Studio structure
	///  <code>IncompatibleElement</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STIncompatibleElementStructure: ISerializable, ITypedRecord<STIncompatibleElementStructure>, ISimpleRecord {
		internal static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*NxiSoL1vT0W30BGwdiyaQA");
		internal static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*D38aTEQtEkm1ZUH+DlpRKg");
		internal static readonly GlobalObjectKey IdKind = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*WyaftqP52kWbdqPUUxWpJg");
		internal static readonly GlobalObjectKey IdIsMissing = GlobalObjectKey.Parse("NIxrPWxt_UGmJAND6qnoqQ*ZGPKKt70gUOul+TMjXN+Uw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Key")]
		public string ssKey;

		[System.Xml.Serialization.XmlElement("Kind")]
		public string ssKind;

		[System.Xml.Serialization.XmlElement("IsMissing")]
		public bool ssIsMissing;


		public BitArray OptimizedAttributes;

		public STIncompatibleElementStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssIsMissing = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssName = r.ReadText(index++, "IncompatibleElement.Name", "");
			ssKey = r.ReadText(index++, "IncompatibleElement.Key", "");
			ssKind = r.ReadText(index++, "IncompatibleElement.Kind", "");
			ssIsMissing = r.ReadBoolean(index++, "IncompatibleElement.IsMissing", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STIncompatibleElementStructure r) {
			this = r;
		}


		public static bool operator == (STIncompatibleElementStructure a, STIncompatibleElementStructure b) {
			if (a.ssName != b.ssName) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssKind != b.ssKind) return false;
			if (a.ssIsMissing != b.ssIsMissing) return false;
			return true;
		}

		public static bool operator != (STIncompatibleElementStructure a, STIncompatibleElementStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STIncompatibleElementStructure)) return false;
			return (this == (STIncompatibleElementStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssName.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssKind.GetHashCode()
				^ ssIsMissing.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STIncompatibleElementStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssName = "";
			ssKey = "";
			ssKind = "";
			ssIsMissing = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsMissing", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsMissing' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsMissing = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STIncompatibleElementStructure Duplicate() {
			STIncompatibleElementStructure t;
			t.ssName = this.ssName;
			t.ssKey = this.ssKey;
			t.ssKind = this.ssKind;
			t.ssIsMissing = this.ssIsMissing;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Kind")) VarValue.AppendAttribute(recordElem, "Kind", ssKind, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Kind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsMissing")) VarValue.AppendAttribute(recordElem, "IsMissing", ssIsMissing, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsMissing");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "kind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Kind")) variable.Value = ssKind; else variable.Optimized = true;
			} else if (head == "ismissing") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsMissing")) variable.Value = ssIsMissing; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdName) {
				return ssName;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdKind) {
				return ssKind;
			} else if (key == IdIsMissing) {
				return ssIsMissing;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssName = (string) other.AttributeGet(IdName);
			ssKey = (string) other.AttributeGet(IdKey);
			ssKind = (string) other.AttributeGet(IdKind);
			ssIsMissing = (bool) other.AttributeGet(IdIsMissing);
		}
		public bool IsDefault() {
			STIncompatibleElementStructure defaultStruct = new STIncompatibleElementStructure(null);
			if (this.ssName != defaultStruct.ssName) return false;
			if (this.ssKey != defaultStruct.ssKey) return false;
			if (this.ssKind != defaultStruct.ssKind) return false;
			if (this.ssIsMissing != defaultStruct.ssIsMissing) return false;
			return true;
		}
	} // STIncompatibleElementStructure

} // OutSystems.NssOMLProcessor
